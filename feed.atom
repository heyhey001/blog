<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Armin Ronacher's Thoughts and Writings</title>
  <id>http://lucumr.pocoo.org/feed.atom</id>
  <updated>2018-07-13T00:00:00Z</updated>
  <link href="http://lucumr.pocoo.org/" />
  <link href="http://lucumr.pocoo.org/feed.atom" rel="self" />
  <subtitle type="text">Armin Ronacher's personal blog about programming, games and random thoughts that come to his mind.</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Python</title>
    <id>http://lucumr.pocoo.org/2018/7/13/python</id>
    <updated>2018-07-13T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2018/7/13/python" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;Guido van Rossum &lt;a class=&quot;reference external&quot; href=&quot;https://mail.python.org/pipermail/python-committers/2018-July/005664.html&quot;&gt;announced that he's stepping down as BDFL&lt;/a&gt;.
It made me think.  The Python programming language has left a profound
impact on my life.  It's my home, it gave me many of my friendships and
acquaintances.  It gave me my work, supplied me with many invaluable
experiences and it even made me meet my now wife.&lt;/p&gt;
&lt;p&gt;As most readers of this blog might know at this blog might know I have a
ambivalent relationship with the language as of a few years ago.  I
learned a lot through Python and one of the things I learned is also
which mistakes one can make in language and interpreter design.  Since I
know Python in and out it's not hard for me to see all the things that did
not go well.  However nothing is perfect.  The things that might be ugly in
the language or implementation also have some unexpected benefits.
Python has a pretty weak story on package distribution and imports, yet at
the same time this has made the Python community more cautious about API
breakage.  The simplistic nature of the interpreter has cultivated an
environment of countless C extensions that expanded the Python community
in ways that few people would have expected.&lt;/p&gt;
&lt;p&gt;Python is Guido van Rossum.  While there have been many contributors over
the years it's without doubt his creation.  You can go back to the
earliest versions of the language and it still feels similar.  The
interpreter design is still the same and so were the influences of the
language.  Python has achieved something that few languages did: it
enabled absolute beginners to start with a language that is fun to pick up
and it stays relevant and useful into ones professional life.&lt;/p&gt;
&lt;p&gt;In case you are reading this Guido: I cannot express enough how much I owe to
you.  For all the strong disagreements I had with some of your decisions
over the years please do not forget that I always appreciated it.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">You can't Rust that</title>
    <id>http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that</id>
    <updated>2018-03-31T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;The last year has been fun because I could build a lot for really nice
stuff for &lt;a class=&quot;reference external&quot; href=&quot;https://sentry.io/&quot;&gt;Sentry&lt;/a&gt; in Rust and for the first time
the development experience was without bigger roadblocks.  While we have
been using Rust before it now feels different because the ecosystem is so
much more stable and we ran less against language or tooling issues.&lt;/p&gt;
&lt;p&gt;However talking to people new to Rust (and even brainstorming APIs with
coworkers) it's hard to get rid of the feeling that Rust can be a mind
bending adventure and that the best way to have a stress free experience
is knowing upfront what you cannot (or should not attempt to) do.  Knowing
that certain things just cannot be done helps putting your mind back back
on the right track.&lt;/p&gt;
&lt;p&gt;So here are things not to do in Rust and what to do instead which I think
should be better known.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;things-move&quot;&gt;
&lt;h2&gt;Things Move&lt;/h2&gt;
&lt;p&gt;The biggest difference between Rust and C++ for me is the address-of
operator (&lt;cite&gt;&amp;amp;&lt;/cite&gt;).  In C++ (like C) that thing just returns the address of
whatever its applied to and while the language might put some restrictions
on you when doing so is a good idea, there is generally nothing stopping
you from taking an address of a value and then using it.&lt;/p&gt;
&lt;p&gt;In Rust this is just usually not useful.  First of all the moment you
take a reference in Rust the borrow checker looms over your code and
prevents you from doing anything stupid.  More importantly however is that
even if it's safe to take a reference it's not nearly as useful as you
might think.  The reason for this is that objects in Rust generally move
around.&lt;/p&gt;
&lt;p&gt;Just take how objects are typically constructed in Rust:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the &lt;cite&gt;new&lt;/cite&gt; method (not taking &lt;cite&gt;self&lt;/cite&gt;) is a static method on the
implementation.  It also returns &lt;cite&gt;Point&lt;/cite&gt; here by value.  This is
&lt;em&gt;generally&lt;/em&gt; how values are constructed.  Because of this taking a
reference in the function does not do anything useful as the value is
potentially moved to a new location on calling.  This is very different to
how this whole thing works in C++:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A constructor in C++ is already operating on an allocated piece of memory.
Before the constructor even runs something already provided the memory
where &lt;cite&gt;this&lt;/cite&gt; points to (typically either somewhere on the stack or through
the &lt;cite&gt;new&lt;/cite&gt; operator on the heap).  This means that C++ code can generally
assume that an instance does not move around.  It's not uncommon that C++
code does really stupid things with the &lt;cite&gt;this&lt;/cite&gt; pointer as a result (like
storing it in another object).&lt;/p&gt;
&lt;p&gt;This difference might sound very minor but it's one of the most
fundamental ones that has huge consequences for Rust programmers.  In
particular it is one of the reasons you cannot have self referential
structs.  While there is talk about expressing types that cannot be moved
in Rust there is no reasonable workaround for this at the moment (The
future direction &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/rust-lang/rfcs/pull/2349&quot;&gt;is the pinning system from RFC 2349&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So what do we do currently instead?  This depends a bit on the situation
but generally the answer is to replace pointers with some form of Handle.
So instead of just storing an absolute pointer in a struct one would
instead store the offset to some reference value.  Later if the pointer
is needed it's calculated on demand.&lt;/p&gt;
&lt;p&gt;For instance we use a pattern like this to work with memory mapped data:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;::&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transmute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borrow&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Cow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[repr(C)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phantom&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;marker&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;PhantomData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[repr(C)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Cow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transmute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_of&lt;/span&gt;::&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_of&lt;/span&gt;::&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;from_raw_parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case &lt;cite&gt;Data&amp;lt;'a&amp;gt;&lt;/cite&gt; only holds a copy-on-write reference to the
backing byte storage (an owned &lt;cite&gt;Vec&amp;lt;u8&amp;gt;&lt;/cite&gt; or a borrowed &lt;cite&gt;&amp;amp;[u8]&lt;/cite&gt; slice).
The byte slice starts with the bytes from &lt;cite&gt;Header&lt;/cite&gt; and they are resolved
on demand when &lt;cite&gt;header()&lt;/cite&gt; is called.  Likewise a single slice is resolved
similarly by the call to &lt;cite&gt;load_slice()&lt;/cite&gt; which takes a stored slice and
then looks it up by offsetting on demand.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To recap: instead of storing a pointer to an object itself, store some
information so that you can calculate the pointer later.  This is also
commonly called using “handles”.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;refcounts-are-not-dirty&quot;&gt;
&lt;h2&gt;Refcounts are not Dirty&lt;/h2&gt;
&lt;p&gt;Another quite interesting case that is surprisingly easy to run into also
has to do with the borrow checker.  The borrow checker doesn't let you do
stupid things with data you do not own and sometimes that can feel like
running into a wall because you think you know better.  In many of those
cases the answer is just one &lt;cite&gt;Rc&amp;lt;T&amp;gt;&lt;/cite&gt; away however.&lt;/p&gt;
&lt;p&gt;To make this less mysterious let's look at the following piece of C++
code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;thread_local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This seems pretty innocent but it has a problem: nothing stops you from
borrowing a field from &lt;cite&gt;current_config&lt;/cite&gt; and then passing it somewhere
else.  This is why in Rust the direct equivalent of that looks
significantly more complicated:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// here we can *immutably* work with config&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should make it immediately obvious that this API is not fun.  First
of all the config is immutable.  Secondly we can only access the config
object within the closure passed to the &lt;cite&gt;with&lt;/cite&gt; function.  Any attempt of
trying to borrow from this config object and have it outlive the closure
will fail (probably with something like “cannot infer an appropriate
lifetime”).  There is no way around it!&lt;/p&gt;
&lt;p&gt;This API is clearly objectively bad.  Imagine we want to look up more of
those thread local variables.  So let's look at both of those issues
separately.  As hinted above ref counting is generally a really nice
solution to deal with the underlying issue here: it's unclear who the
owner is.&lt;/p&gt;
&lt;p&gt;Let's imagine for a second this config object just happens to be bound to
the current thread but is not really owned by the current thread.  What
happens if the config is passed to another thread but the current thread
shuts down?  This is a typical example where one can think of logically
the config having multiple owners.  Since we might want to pass from one
thread to another we want an atomically reference counted wrapper for our
config: an &lt;cite&gt;Arc&amp;lt;Config&amp;gt;&lt;/cite&gt;.  This lets us increase the refcount in the with
block and return it.  The refactored version looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// here we can *immutably* work with config&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The change here is that now the thread local holds a reference counted
config.  As such we can introduce a function that returns an
&lt;cite&gt;Arc&amp;lt;Config&amp;gt;&lt;/cite&gt;.  In the closure from the TLS we increment the refcount with
the &lt;cite&gt;clone()&lt;/cite&gt; method on the &lt;cite&gt;Arc&amp;lt;Config&amp;gt;&lt;/cite&gt; and return it.  Now any caller
to &lt;cite&gt;Config::current&lt;/cite&gt; gets that refcounted config and can hold on to it for
as long as necessary.  For as long as there is code holding the Arc, the
config within it is kept alive.  Even if the originating thread died.&lt;/p&gt;
&lt;p&gt;So how do we make it mutable like in the C++ version?  We need something
that provides us with interior mutability.  There are two options for
this.  One is to wrap the &lt;cite&gt;Config&lt;/cite&gt; in something like an &lt;cite&gt;RwLock&lt;/cite&gt;.  The
second one is to have the &lt;cite&gt;Config&lt;/cite&gt; use locking internally.  For instance
one &lt;em&gt;might&lt;/em&gt; want to do this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;::&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigInner&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigInner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;RwLock&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you do not need this type to work with threads you can also replace
&lt;cite&gt;Arc&lt;/cite&gt; with &lt;cite&gt;Rc&lt;/cite&gt; and &lt;cite&gt;RwLock&lt;/cite&gt; with &lt;cite&gt;RefCell&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To recap: when you need to borrow data that outlives the lifetime of
something you need refcounting.  Don't be afraid of using `Arc` but be
aware that this locks you to immutable data.  Combine with interior
mutability (like `RwLock`) to make the object mutable.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;kill-all-setters&quot;&gt;
&lt;h2&gt;Kill all Setters&lt;/h2&gt;
&lt;p&gt;But the above pattern of effectively having &lt;cite&gt;Arc&amp;lt;RwLock&amp;lt;Config&amp;gt;&amp;gt;&lt;/cite&gt; can be a
bit problematic and swapping it for &lt;cite&gt;RwLock&amp;lt;Arc&amp;lt;Config&amp;gt;&amp;gt;&lt;/cite&gt; can be
significantly better.&lt;/p&gt;
&lt;p&gt;Rust done well is a liberating experience because if programmed well it's
shockingly easy to parallelize your code after the fact.  Rust encourages
immutable data and that makes everything so much easier.  However in the
previous example we just introduced interior mutability.  Imagine we have
multiple threads running, all referencing the same config but one flips a
flag.  What happens to concurrently running code that now is not expecting
the flag to randomly flip?  Because of that interior mutability should be
used carefully.  Ideally an object once created does not change its state
in such a way.  In general I think such a type of setter should be an anti
pattern.&lt;/p&gt;
&lt;p&gt;So instead of doing this what about we take a step back to where we were
earlier where configs were not mutable?  What if we never mutate the
config after we created it but we add an API to promote another config to
current.  This means anyone who is currently holding on to a config can
safely know that the values won't change.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;::&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now configs are still initialized automatically by default but a new
config can be set by constructing a &lt;cite&gt;Config&lt;/cite&gt; object and calling
&lt;cite&gt;make_current&lt;/cite&gt;.  That will move the config into an &lt;cite&gt;Arc&lt;/cite&gt; and then bind it
to the current thread.  Callers to &lt;cite&gt;current()&lt;/cite&gt; will get that &lt;cite&gt;Arc&lt;/cite&gt; back
and can then again do whatever they want.&lt;/p&gt;
&lt;p&gt;Likewise you can again switch &lt;cite&gt;Arc&lt;/cite&gt; for &lt;cite&gt;Rc&lt;/cite&gt; and &lt;cite&gt;RwLock&lt;/cite&gt; for &lt;cite&gt;RefCell&lt;/cite&gt; if
you do not need this to work with threads.  If you are just working with
thread locals you can also combine &lt;cite&gt;RefCell&lt;/cite&gt; with &lt;cite&gt;Arc&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To recap: instead of using interior mutability where an object changes
its internal state, consider using a pattern where you promote new state
to be current and current consumers of the old state will continue to hold
on to it by putting an `Arc` into an `RwLock`.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;in-conclusion&quot;&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;Honestly I wish I would have learned the above three things earlier than I
did.  Mostly because even if you know the patterns you might not
necessarily know when to use them.  So I guess the following mantra is now
what I want to print out and hang somewhere:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Handles, not self referential pointers&lt;/li&gt;
&lt;li&gt;Reference count your way out of lifetime / borrow checker hell&lt;/li&gt;
&lt;li&gt;Consider promoting new state instead of interior mutability&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Diversity in Technology and Open Source</title>
    <id>http://lucumr.pocoo.org/2017/6/5/diversity-in-technology</id>
    <updated>2017-06-05T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2017/6/5/diversity-in-technology" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;It's a topic I generally do not talk much about but a recent &lt;a class=&quot;reference external&quot; href=&quot;https://www.wired.com/2017/06/diversity-open-source-even-worse-tech-overall/&quot;&gt;Wired
Article&lt;/a&gt;
made me think about finally writing down my thoughts on this topic.  The
title of that article was “Diversity in Open Source Is Even Worse Than in
Tech Overall” and that is undoubtedly true.&lt;/p&gt;
&lt;p&gt;When you start an Open Source project today, in particular one which is
further disconnected from frontend technologies there is a very high
chance the organic community development will be everything but diverse.
The highest form of diversity you can naturally expect to form is people
from different countries but even there you might have a bias.&lt;/p&gt;
&lt;p&gt;There are many arguments that can be had about this, but it's my personal
opinion that at least in the longer run it's not healthy for a project or
a community to lack diversity.  I think it's natural for like-minded people
to group together but the longer that process continues the more of an
echo chamber it becomes.  What's worse is the longer you wait to try to
get people involved in the project that would naturally not try to join
the harder it will be.  When your team is 4 men, the first woman which
joins will make a significant impact.  When your team is already 20 men
you need to get a lot more women on board to have the same impact.  But
it's not just gender that is making a difference, it's in particular
cultural backgrounds.  The reason Unicode is hard is not because Unicode
is hard, but because a lot of projects start out with a lack of urgency
since many of the original developers might live in ASCII constrained
environments (It took emojis to become popular for people to develop
a general understanding of why Unicode is useful in the western world).&lt;/p&gt;
&lt;p&gt;A lot of the criticism that comes against the diversity movement is that
it undermines the idea of “meritocracy” and that it does not mirror the
realities in the real world by artificially balancing teams.  Both of
those arguments are weird in a way because they are very hard to defend
if you look at larger parts of society.  Tech for recent historical
reasons is very male heavy but society is not.  Meritocracy in many ways
is just sourcing the best from the pool of naturally available people
in your environment.  Sure by some measurements you will get the best
but is the best really what is lacking in an Open Source project?  We
don't need more of the best, we need more of what is actually missing
and what is missing in many ways is not more strong alpha males but
people that are good in de-escalating arguments in bug trackers and
mailing lists, people that take care of documentations, people that
make software work in new cultural contexts (localization, globalization,
internationalization, etc.), people that care about user experience
etc.&lt;/p&gt;
&lt;p&gt;If you look at Open Source projects in comparison with commercial
software you can quickly see where this lack of diversity is noticeable
the most: consumer applications.  While we're doing reasonably well with
low level technology that never translated well to things that consumers
care about.  The most successful consumer products that came out of the
Open Source community are probably things like The Gimp.  A project that
not only has a ridiculous name for a consumer product, but also one that
is everything but user friendly.  If you do a Google auto complete search
for “Why is Gimp” it completes to “slow [on mac]”, “bad”, “complicated”
and “unintuitive”.  In many ways I think the answer is probably a
reflection of the developer community lacking focus in some key areas.
There is no reason that Open Source software has to be user unfriendly.&lt;/p&gt;
&lt;p&gt;In particular some of the infamous Open Source communities like the
Linux are (almost?) proud of their harsh culture.  Often documentation
is so bad that it became a rite of passage to decipher it or fill in
the blanks by reading the code.&lt;/p&gt;
&lt;p&gt;The only way to achieve the (in my mind) necessary change in Open Source
and tech in general is to go out of ones way to involve people that do
not come naturally.&lt;/p&gt;
&lt;p&gt;So when someone cancels a conference because the speaker lineup after a
blind selection was 100% male it just shows how bad the imbalance in the
developer community is.  It's not unfair to try to artificially bring
balance a conference because the fact that the community is this
imbalanced to that extend is a problem that needs fixing and will not fix
itself naturally.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Be Careful with Python's New-Style String Format</title>
    <id>http://lucumr.pocoo.org/2016/12/29/careful-with-str-format</id>
    <updated>2016-12-29T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2016/12/29/careful-with-str-format" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;This should have been obvious to me for a longer time, but until earlier
today I did not really realize the severity of the issues caused by
&lt;cite&gt;str.format&lt;/cite&gt; on untrusted user input.  It came up as a way to bypass the
Jinja2 Sandbox in a way that would permit retrieving information that you
should not have access to which is why I just pushed out a &lt;a class=&quot;reference external&quot; href=&quot;https://www.palletsprojects.com/blog/jinja-281-released/&quot;&gt;security
release&lt;/a&gt; for
it.&lt;/p&gt;
&lt;p&gt;However I think the general issue is quite severe and needs to be a
discussed because most people are most likely not aware of how easy it is
to exploit.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-core-issue&quot;&gt;
&lt;h2&gt;The Core Issue&lt;/h2&gt;
&lt;p&gt;Starting with Python 2.6 a new format string syntax landed inspired by
.NET which is also the same syntax that is supported by Rust and some
other programming languages.  It's available behind the &lt;cite&gt;.format()&lt;/cite&gt; method
on byte and unicode strings (on Python 3 just on unicode strings) and it's
also mirrored in the more customizable &lt;cite&gt;string.Formatter&lt;/cite&gt; API.&lt;/p&gt;
&lt;p&gt;One of the features of it is that you can address both positional and
keyword arguments to the string formatting and you can explicitly reorder
items at all times.  However the bigger feature is that you can access
attributes and items of objects.  The latter is what is causing the
problem here.&lt;/p&gt;
&lt;p&gt;Essentially one can do things like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class of {0} is {0.__class__}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;quot;class of 42 is &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In essence: whoever controls the format string can access potentially
internal attributes of objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;where-does-it-happen&quot;&gt;
&lt;h2&gt;Where does it Happen?&lt;/h2&gt;
&lt;p&gt;First question is why would anyone control the format string.  There are a
few places where it shows up:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;untrusted translators on string files.  This is a big one because many
applications that are translated into multiple languages will use
new-style Python string formatting and not everybody will vet all the
strings that come in.&lt;/li&gt;
&lt;li&gt;user exposed configuration.  One some systems users might be permitted
to configure some behavior and that might be exposed as format
strings.  In particular I have seen it where users can configure
notification mails, log message formats or other basic templates in web
applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;levels-of-danger&quot;&gt;
&lt;h2&gt;Levels of Danger&lt;/h2&gt;
&lt;p&gt;For as long as only C interpreter objects are passed to the format string
you are somewhat safe because the worst you can discover is some internal
reprs like the fact that something is an integer class above.&lt;/p&gt;
&lt;p&gt;However tricky it becomes once Python objects are passed in.  The reason
for this is that the amount of stuff that is exposed from Python functions
is pretty crazy.  Here is an example from a hypothetical web application
setup that would leak the secret key:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;super secret key&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the user can inject &lt;cite&gt;format_string&lt;/cite&gt; here they could discover the secret
string like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{event.__init__.__globals__[CONFIG][SECRET_KEY]}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;sandboxing-formatting&quot;&gt;
&lt;h2&gt;Sandboxing Formatting&lt;/h2&gt;
&lt;p&gt;So what do you do if you do need to let someone else provide format
strings?  You can use the somewhat undocumented internals to change the
behavior.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagicFormatMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;This class implements a dummy wrapper to fix a bug in the Python&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    standard library for string formatting.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    See http://bugs.python.org/issue13598 for information about why&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    this is necessary.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_last_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_last_index&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_last_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;LookupError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__len__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This is a necessary API but it&amp;#39;s undocumented and moved around&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# between Python releases&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;_string&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter_field_name_split&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter_field_name_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; \
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_formatter_field_name_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SafeFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter_field_name_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safe_getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;safe_getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Expand the logic here.  For instance on 2.x you will also need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to disallow func_globals, on 3.x you will also need to hide&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# things like cr_frame and others.  So ideally have a list of&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# objects that are entirely unsafe to access.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;safe_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SafeFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagicFormatMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vformat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can use the &lt;cite&gt;safe_format&lt;/cite&gt; method as a replacement for
&lt;cite&gt;str.format&lt;/cite&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{0.__class__}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;quot;&amp;lt;type &amp;#39;int&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;safe_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{0.__class__}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Be Careful About What You Dislike</title>
    <id>http://lucumr.pocoo.org/2016/11/5/be-careful-about-what-you-dislike</id>
    <updated>2016-11-05T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2016/11/5/be-careful-about-what-you-dislike" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;The last few months I keep making the same observation over and over again
in various different contexts: that whenever you are confronted with a
very strong opinion about a topic, reasonable discussions about the topic
often involve arguments that have long become outdated or are no longer
strictly relevant to the conversation.&lt;/p&gt;
&lt;p&gt;What I mean by that is that given a controversial topic, a valid argument
for one side of the other is being repeated by a crowd of people that once
heard it, even after that argument stops being valid.  This happens because
often the general situation changed and the argument references a reality
that no longer exists in the same form.  Instead of reevaluating the
environment however, goalposts are moved to restore the general sentiment
of the opinion.&lt;/p&gt;
&lt;p&gt;To give you a practical example of this problem I can just go by a topic I
have a very strong opinion about: Python 3.  When Python 3 was not a huge
thing yet I started having conversations with people in the community
about the problems I see with splitting the community and complexity of
porting.  Not just that, I also kept bringing up general questions about
some of the text and byte decisions.  I started doing talks about the
topic and write blog articles that kept being shared.  Nowadays when I go
to a conference I very quickly end up in conversations where other
developers come to me and see me as the &amp;quot;Does not like Python 3 guy&amp;quot;.
While I still am not a friend of some of the decisions in Python 3 I am
very much aware that Python 3 in 2016 is a very different Python 3 than 6
years ago or earlier.&lt;/p&gt;
&lt;p&gt;In fact, I myself campaigned for some changes to Python 3 that made it
possible to achieve better ports (like the reintroduction of the &lt;cite&gt;u&lt;/cite&gt;
prefix on Unicode string literals) and the bulk of my libraries work on
Python 3 for many years now.  It's a fact that in 2016 the problems that
people have with Python 3 are different than they used to have before.&lt;/p&gt;
&lt;p&gt;This leads to very interesting conversations where I can have a highly
technical conversation about a very specific issue with Python 3 and
thoughts about how to do it differently or deal with it (like some of the
less obvious consequences of the new text storage model) and another
person joins into the conversation with an argument against Python 3 that
has long stropped being valid.  Why?  Because there is a cost towards
porting to Python 3 and a chance is not seen.  This means that a person
with a general negativity towards Python 3 would seek me out and try to
reaffirm their opposition to a port to it.&lt;/p&gt;
&lt;p&gt;Same thing is happening with JavaScript where there is a general negative
sentiment about programming in it but not everybody is having good
arguments for it.  There are some that actually program a lot in it and
dislike specific things about the current state of the ecosystem, but
generally acknowledge that the language is evolving, and then there are
those that take advantage of unhappiness and bring their heavily outdated
opposition against JavaScript into a conversation just to reaffirm their
own opinion.&lt;/p&gt;
&lt;p&gt;This is hardly confined to the programming world.  I made the same
discovery about CETA.  CETA is a free trade agreement between the European
Union and Canada and it had the misfortune of being negotiated at the same
time as the more controversial TTIP with the US.  The story goes roughly
like this: TTIP was negotiated in secrecy (as all trade agreements are)
and there were strong disagreements between what the EU and what the US
thought trade should look like.  Those differences were about food safety
standards and other highly sensitive topics.  Various organizations on
both the left and right extremes of the political scale started to grab
any remotely controversial information that leaked out to shift the public
opinion towards negativity to TTIP.  Then the entire thing spiraled out of
control: people not only railed against TTIP but took their opposition
and looked for similar contracts and found CETA.  Since both are trade
agreements there is naturally a lot of common ground between them.  The
subtleties where quickly lost.  Where the initial arguments against TTIP
were food standards, public services and intransparent ISDS courts many of
the critics failed to realize that CETA fundamentally was a different
beast.  Not only was it already a much improved agreement from the start,
but it kept being modified from the initial public version of it to the
one that was finally sent to national parliaments.&lt;/p&gt;
&lt;p&gt;However despite what I would have expected: that critics go in and
acknowledge that their criticism was being heard instead slowly moved the
goalposts.  At this point there is so much emotion and misinformation in
the general community that the goalpost moved all the way to not
supporting further free trade at all.  In the general conversation about
ISDS and standards many people brought introduced their own opinions about
free trade and their dislike towards corporations and multinationals.&lt;/p&gt;
&lt;p&gt;This I assume is human behavior.  Admitting that you might be wrong is
hard enough, but it's even harder when you had validation that you were
right in the past.  In particular that an argument against something might
no longer be valid because that something has changed in the meantime is
hard.  I'm not sure what the solution to this is but I definitely realized
in the few years on my own behavior that one needs to be more careful
about stating strong opinions in public.  At the same time however I think
we should all be more careful dispelling misinformation in conversations
even if the general mood supports your opinion.  As an example while
emotionally I like hearing stories about how JavaScript's packaging causes
pain to developers since I experienced it first hand, I know from a
rational point of view that the ecosystem is improving a tremendous
speeds.  Yes I have been burned by npm but it's not like this is not
tremendously improving.&lt;/p&gt;
&lt;p&gt;Something that has been put to paper once is hard to remove from people's
minds.  In particular in the technological context technology moves so
fast that very likely something you read once might no longer be up to
date as little as six months later.&lt;/p&gt;
&lt;p&gt;So I suppose my proposal to readers is not to fall into that trap and to
assume that the environment around oneself keeps on changing.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">I don't understand Python's Asyncio</title>
    <id>http://lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio</id>
    <updated>2016-10-30T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;Recently I started looking into Python's new &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/asyncio.html&quot;&gt;asyncio&lt;/a&gt; module a bit more.
The reason for this is that I needed to do something that works better
with evented IO and I figured I might give the new hot thing in the Python
world a try.  Primarily what I learned from this exercise is that I it's a
much more complex system than I expected and I am now at the point where I
am very confident that I do not know how to use it properly.&lt;/p&gt;
&lt;p&gt;It's not conceptionally hard to understand and borrows a lot from Twisted,
but it has so many elements that play into it that I'm not sure any more
how the individual bits and pieces are supposed to go together.  Since I'm
not clever enough to actually propose anything better I just figured I
share my thoughts about what confuses me instead so that others might be
able to use that in some capacity to understand it.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-primitives&quot;&gt;
&lt;h2&gt;The Primitives&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;asyncio&lt;/cite&gt; is supposed to implement asynchronous IO with the help of
coroutines.  Originally implemented as a library around the &lt;cite&gt;yield&lt;/cite&gt; and
&lt;cite&gt;yield from&lt;/cite&gt; expressions it's now a much more complex beast as the
language evolved at the same time.  So here is the current set of things
that you need to know exist:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;event loops&lt;/li&gt;
&lt;li&gt;event loop policies&lt;/li&gt;
&lt;li&gt;awaitables&lt;/li&gt;
&lt;li&gt;coroutine functions&lt;/li&gt;
&lt;li&gt;old style coroutine functions&lt;/li&gt;
&lt;li&gt;coroutines&lt;/li&gt;
&lt;li&gt;coroutine wrappers&lt;/li&gt;
&lt;li&gt;generators&lt;/li&gt;
&lt;li&gt;futures&lt;/li&gt;
&lt;li&gt;concurrent futures&lt;/li&gt;
&lt;li&gt;tasks&lt;/li&gt;
&lt;li&gt;handles&lt;/li&gt;
&lt;li&gt;executors&lt;/li&gt;
&lt;li&gt;transports&lt;/li&gt;
&lt;li&gt;protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition the language gained a few special methods that are new:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;__aenter__&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;__aexit__&lt;/tt&gt; for asynchronous &lt;cite&gt;with&lt;/cite&gt; blocks&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;__aiter__&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;__anext__&lt;/tt&gt; for asynchronous iterators (async loops
and async comprehensions).  For extra fun that protocol already changed
once.  In 3.5 it returns an awaitable (a coroutine) in Python 3.6 it
will return a newfangled async generator.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;__await__&lt;/tt&gt; for custom awaitables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's quite a bit to know and the documentation covers those parts.
However here are some notes I made on some of those things to understand
them better:&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;event-loops&quot;&gt;
&lt;h3&gt;Event Loops&lt;/h3&gt;
&lt;p&gt;The event loop in asyncio is a bit different than you would expect from
first look.  On the surface it looks like each thread has one event loop
but that's not really how it works.  Here is how I think this works:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;if you are the main thread an event loop is created when you call
&lt;tt class=&quot;docutils literal&quot;&gt;asyncio.get_event_loop()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;if you are any other thread, a runtime error is raised from
&lt;tt class=&quot;docutils literal&quot;&gt;asyncio.get_event_loop()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;You can at any point &lt;tt class=&quot;docutils literal&quot;&gt;asyncio.set_event_loop()&lt;/tt&gt; to bind an event loop
with the current thread.  Such an event loop can be created with the
&lt;tt class=&quot;docutils literal&quot;&gt;asyncio.new_event_loop()&lt;/tt&gt; function.&lt;/li&gt;
&lt;li&gt;Event loops can be used without being bound to the current thread.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;asyncio.get_event_loop()&lt;/tt&gt; returns the thread bound event loop, it
does not return the currently running event loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The combination of these behaviors is super confusing for a few reasons.
First of all you need to know that these functions are delegates to the
underlying event loop policy which is globally set.  The default is to
bind the event loop to the thread.  Alternatively one could in theory bind
the event loop to a greenlet or something similar if one would so desire.
However it's important to know that library code does not control the
policy and as such cannot reason that asyncio will scope to a thread.&lt;/p&gt;
&lt;p&gt;Secondly asyncio does not require event loops to be bound to the context
through the policy.  An event loop can work just fine in isolation.
However this is the first problem for library code as a coroutine or
something similar does not know which event loop is responsible for
scheduling it.  This means that if you call &lt;tt class=&quot;docutils literal&quot;&gt;asyncio.get_event_loop()&lt;/tt&gt;
from within a coroutine you might not get the event loop back that ran
you.  This is also the reason why all APIs take an optional explicit loop
parameter.  So for instance to figure out which coroutine is currently
running one cannot invoke something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead the loop has to be passed explicitly.  This furthermore requires
you to pass through the loop explicitly everywhere in library code or very
strange things will happen.  Not sure what the thinking for that design is
but if this is not being fixed (that for instance &lt;tt class=&quot;docutils literal&quot;&gt;get_event_loop()&lt;/tt&gt;
returns the actually running loop) then the only other change that makes
sense is to explicitly disallow explicit loop passing and require it to be
bound to the current context (thread etc.).&lt;/p&gt;
&lt;p&gt;Since the event loop policy does not provide an identifier for the current
context it also is impossible for a library to &amp;quot;key&amp;quot; to the current
context in any way.  There are also no callbacks that would permit to hook
the tearing down of such a context which further limits what can be done
realistically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;awaitables-and-coroutines&quot;&gt;
&lt;h3&gt;Awaitables and Coroutines&lt;/h3&gt;
&lt;p&gt;In my humble opinion the biggest design mistake of Python was to overload
iterators so much.  They are now being used not just for iteration but
also for various types of coroutines.  One of the biggest design mistakes
of iterators in Python is that &lt;cite&gt;StopIteration&lt;/cite&gt; bubbles if not caught.
This can cause very frustrating problems where an exception somewhere can
cause a generator or coroutine elsewhere to abort.  This is a long running
issue that Jinja for instance has to fight with.  The template engine
internally renders into a generator and when a template for some reason
raises a &lt;cite&gt;StopIteration&lt;/cite&gt; the rendering just ends there.&lt;/p&gt;
&lt;p&gt;Python is slowly learning the lesson of overloading this system more.
First of all in 3.something the asyncio module landed and did not have
language support.  So it was decorators and generators all the way down.
To implemented the &lt;cite&gt;yield from&lt;/cite&gt; support and more, the &lt;cite&gt;StopIteration&lt;/cite&gt; was
overloaded once more.  This lead to surprising behavior like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[0, 2]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No error, no warning.  Just not the behavior you expect.  This is because
a &lt;cite&gt;return&lt;/cite&gt; with a value from a function that is a generator actually
raises a &lt;cite&gt;StopIteration&lt;/cite&gt; with a single arg that is not picked up by the
iterator protocol but just handled in the coroutine code.&lt;/p&gt;
&lt;p&gt;With 3.5 and 3.6 a lot changed because now in addition to generators we
have coroutine objects.  Instead of making a coroutine by wrapping a
generator there is no a separate object which creates a coroutine
directly.  It's implemented by prefixing a function with &lt;tt class=&quot;docutils literal&quot;&gt;async&lt;/tt&gt;.  For
instance &lt;tt class=&quot;docutils literal&quot;&gt;async def x()&lt;/tt&gt; will make such a coroutine.  Now in 3.6 there
will be separate async generators that will raise &lt;cite&gt;AsyncStopIteration&lt;/cite&gt; to
keep it apart.  Additionally with Python 3.5 and later there is now a
future import (&lt;tt class=&quot;docutils literal&quot;&gt;generator_stop&lt;/tt&gt;) that will raise a &lt;cite&gt;RuntimeError&lt;/cite&gt; if
code raises &lt;cite&gt;StopIteration&lt;/cite&gt; in an iteration step.&lt;/p&gt;
&lt;p&gt;Why am I mentioning all this?  Because the old stuff does not really go
away.  Generators still have &lt;cite&gt;send&lt;/cite&gt; and &lt;cite&gt;throw&lt;/cite&gt; and coroutines still
largely behave like generators.  That is a lot of stuff you need to know
now for quite some time going forward.&lt;/p&gt;
&lt;p&gt;To unify a lot of this duplication we have a few more concepts in Python
now:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;awaitable: an object with an &lt;tt class=&quot;docutils literal&quot;&gt;__await__&lt;/tt&gt; method.  This is for instance
implemented by native coroutines and old style coroutines and some
others.&lt;/li&gt;
&lt;li&gt;coroutinefunction: a function that returns a native coroutine.  Not to
be confused with a function returning a coroutine.&lt;/li&gt;
&lt;li&gt;a coroutine: a native coroutine.  Note that old asyncio coroutines are
not considered coroutines by the current documentation as far as I can
tell.  At the very least &lt;tt class=&quot;docutils literal&quot;&gt;inspect.iscoroutine&lt;/tt&gt; does not consider that
a coroutine.  It's however picked up by the future/awaitable branches.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In particularly confusing is that &lt;tt class=&quot;docutils literal&quot;&gt;asyncio.iscoroutinefunction&lt;/tt&gt; and
&lt;tt class=&quot;docutils literal&quot;&gt;inspect.iscoroutinefunction&lt;/tt&gt; are doing different things.  Same with
&lt;tt class=&quot;docutils literal&quot;&gt;inspect.iscoroutine&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;inspect.iscoroutinefunction&lt;/tt&gt;.  Note that
even though inspect does not know anything about asycnio legacy coroutine
functions in the type check, it is apparently aware of them when you check
for awaitable status even though it does not conform to &lt;tt class=&quot;docutils literal&quot;&gt;__await__&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;coroutine-wrappers&quot;&gt;
&lt;h3&gt;Coroutine Wrappers&lt;/h3&gt;
&lt;p&gt;Whenever you run &lt;tt class=&quot;docutils literal&quot;&gt;async def&lt;/tt&gt; Python invokes a thread local coroutine
wrapper.  It's set with &lt;tt class=&quot;docutils literal&quot;&gt;sys.set_coroutine_wrapper&lt;/tt&gt; and it's a function
that can wrap this.  Looks a bit like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; sys.set_coroutine_wrapper(lambda x: 42)
&amp;gt;&amp;gt;&amp;gt; async def foo():
...  pass
...
&amp;gt;&amp;gt;&amp;gt; foo()
__main__:1: RuntimeWarning: coroutine &amp;#39;foo&amp;#39; was never awaited
42
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case I never actually invoke the original function and just give
you a hint of what this can do.  As far as I can tell this is always
thread local so if you swap out the event loop policy you need to figure
out separately how to make this coroutine wrapper sync up with the same
context if that's something you want to do.  New threads spawned will not
inherit that flag from the parent thread.&lt;/p&gt;
&lt;p&gt;This is not to be confused with the asyncio coroutine wrapping code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;awaitables-and-futures&quot;&gt;
&lt;h3&gt;Awaitables and Futures&lt;/h3&gt;
&lt;p&gt;Some things are awaitables.  As far as I can see the following things are
considered awaitable:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;native coroutines&lt;/li&gt;
&lt;li&gt;generators that have the fake &lt;tt class=&quot;docutils literal&quot;&gt;CO_ITERABLE_COROUTINE&lt;/tt&gt; flag set (we
will cover that)&lt;/li&gt;
&lt;li&gt;objects with an &lt;tt class=&quot;docutils literal&quot;&gt;__await__&lt;/tt&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essentially these are all objects with an &lt;tt class=&quot;docutils literal&quot;&gt;__await__&lt;/tt&gt; method except that
the generators don't for legacy reasons.  Where does the
&lt;tt class=&quot;docutils literal&quot;&gt;CO_ITERABLE_COROUTINE&lt;/tt&gt; flag come from?  It comes from a coroutine
wrapper (now to be confused with &lt;tt class=&quot;docutils literal&quot;&gt;sys.set_coroutine_wrapper&lt;/tt&gt;) that is
&lt;tt class=&quot;docutils literal&quot;&gt;&amp;#64;asyncio.coroutine&lt;/tt&gt;.  That through some indirection will wrap the
generator with &lt;tt class=&quot;docutils literal&quot;&gt;types.coroutine&lt;/tt&gt; (to to be confused with
&lt;tt class=&quot;docutils literal&quot;&gt;types.CoroutineType&lt;/tt&gt; or &lt;tt class=&quot;docutils literal&quot;&gt;asyncio.coroutine&lt;/tt&gt;) which will re-create the
internal code object with the additional flag &lt;tt class=&quot;docutils literal&quot;&gt;CO_ITERABLE_COROUTINE&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So now that we know what those things are, what are futures?  First we
need to clear up one thing: there are actually two (completely
incompatible) types of futures in Python 3. &lt;tt class=&quot;docutils literal&quot;&gt;asyncio.futures.Future&lt;/tt&gt; and
&lt;tt class=&quot;docutils literal&quot;&gt;concurrent.futures.Future&lt;/tt&gt;.  One came before the other but they are
also also both still used even within asyncio.  For instance
&lt;tt class=&quot;docutils literal&quot;&gt;asyncio.run_coroutine_threadsafe()&lt;/tt&gt; will dispatch a coroutine to a
event loop running in another thread but it will then return a
&lt;tt class=&quot;docutils literal&quot;&gt;concurrent.futures.Future&lt;/tt&gt; object instead of a
&lt;tt class=&quot;docutils literal&quot;&gt;asyncio.futures.Future&lt;/tt&gt; object.  This makes sense because only the
&lt;tt class=&quot;docutils literal&quot;&gt;concurrent.futures.Future&lt;/tt&gt; object is thread safe.&lt;/p&gt;
&lt;p&gt;So now that we know there are two incompatible futures we should clarify
what futures are in asyncio.  Honestly I'm not entirely sure where the
differences are but I'm going to call this &amp;quot;eventual&amp;quot; for the moment.
It's an object that eventually will hold a value and you can do some
handling with that eventual result while it's still computing.  Some
variations of this are called deferreds, others are called promises.  What
the exact difference is is above my head.&lt;/p&gt;
&lt;p&gt;What can you do with a future?  You can attach a callback that will be
invoked once it's ready or you can attach a callback that will be invoked
if the future fails.  Additionally you can &lt;tt class=&quot;docutils literal&quot;&gt;await&lt;/tt&gt; it (it implements
&lt;tt class=&quot;docutils literal&quot;&gt;__await__&lt;/tt&gt; and is thus awaitable).  Additionally futures can be
cancelled.&lt;/p&gt;
&lt;p&gt;So how do you get such a future?  By calling &lt;tt class=&quot;docutils literal&quot;&gt;asyncio.ensure_future&lt;/tt&gt; on
an awaitable object.  This will also make a good old generator into such a
future.  However if you read the docs you will read that
&lt;tt class=&quot;docutils literal&quot;&gt;asyncio.ensure_future&lt;/tt&gt; actually returns a &lt;tt class=&quot;docutils literal&quot;&gt;Task&lt;/tt&gt;.  So what's a task?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;tasks&quot;&gt;
&lt;h3&gt;Tasks&lt;/h3&gt;
&lt;p&gt;A task is a future that is wrapping a coroutine in particular.  It works
like a future but it also has some extra methods to extract the current
stack of the contained coroutine.  We already saw the tasks mentioned
earlier because it's the main way to figure out what an event loop is
currently doing via &lt;tt class=&quot;docutils literal&quot;&gt;Task.get_current&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;There is also a difference in how cancellation works for tasks and futures
but that's beyond the scope of this.  Cancellation is its own entire
beast.  If you are in a coroutine and you know you are currently running
you can get your own task through &lt;tt class=&quot;docutils literal&quot;&gt;Task.get_current&lt;/tt&gt; as mentioned but
this requires knowledge of what event loop you are dispatched on which
might or might not be the thread bound one.&lt;/p&gt;
&lt;p&gt;It's not possible for a coroutine to know which loop goes with it.  Also the
&lt;cite&gt;Task&lt;/cite&gt; does not provide that information through a public API.  However if
you did manage to get hold of a task you can currently access
&lt;tt class=&quot;docutils literal&quot;&gt;task._loop&lt;/tt&gt; to find back to the event loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;handles&quot;&gt;
&lt;h3&gt;Handles&lt;/h3&gt;
&lt;p&gt;In addition to all of this there are handles.  Handles are opaque objects
of pending executions that cannot be awaited but they can be cancelled.
In particular if you schedule the execution of a call with &lt;tt class=&quot;docutils literal&quot;&gt;call_soon&lt;/tt&gt;
or &lt;tt class=&quot;docutils literal&quot;&gt;call_soon_threadsafe&lt;/tt&gt; (and some others) you get that handle you can
then use to cancel the execution as a best effort attempt but you can't
wait for the call to actually take place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;executors&quot;&gt;
&lt;h3&gt;Executors&lt;/h3&gt;
&lt;p&gt;Since you can have multiple event loops but it's not obvious what the use
of more than one of those things per thread is the obvious assumption can
be made that a common setup is to have N threads with an event loop each.
So how do you inform another event loop about doing some work?  You cannot
schedule a callback into an event loop in another thread &lt;em&gt;and&lt;/em&gt; get the
result back.  For that you need to use executors instead.&lt;/p&gt;
&lt;p&gt;Executors come from &lt;tt class=&quot;docutils literal&quot;&gt;concurrent.futures&lt;/tt&gt; for instance and they allow you
to schedule work into threads that itself is not evented.  For instance if
you use &lt;tt class=&quot;docutils literal&quot;&gt;run_in_executor&lt;/tt&gt; on the event loop to schedule a function to be
called in another thread.  The result is then returned as an asyncio
coroutine instead of a concurrent coroutine like
&lt;tt class=&quot;docutils literal&quot;&gt;run_coroutine_threadsafe&lt;/tt&gt; would do.  I did not yet have enough mental
capacity to figure out why those APIs exist, how you are supposed to use
and when which one.  The documentation suggests that the executor stuff
could be used to build multiprocess things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;transports-and-protocols&quot;&gt;
&lt;h3&gt;Transports and Protocols&lt;/h3&gt;
&lt;p&gt;I always though those would be the confusing things but that's basically a
verbatim copy of the same concepts in Twisted.  So read those docs if you
want to understand them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;how-to-use-asyncio&quot;&gt;
&lt;h2&gt;How to use asyncio&lt;/h2&gt;
&lt;p&gt;Now that we know roughly understand asyncio I found a few patterns that
people seem to use when they write asyncio code:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;pass the event loop to all coroutines.  That appears to be what a part
of the community is doing.  Giving a coroutine knowledge about what loop
is going to schedule it makes it possible for the coroutine to learn
about its task.&lt;/li&gt;
&lt;li&gt;alternatively you require that the loop is bound to the thread.  That
also lets a coroutine learn about that.  Ideally support both.  Sadly
the community is already torn of what to do.&lt;/li&gt;
&lt;li&gt;If you want to use contextual data (think thread locals) you are a bit
out of luck currently.  The most popular workaround is apparently
atlassian's &lt;tt class=&quot;docutils literal&quot;&gt;aiolocals&lt;/tt&gt; which basically requires you to manually
propagate contextual information into coroutines spawned since the
interpreter does not provide support for this.  This means that if you
have a utility library spawning coroutines you will lose context.&lt;/li&gt;
&lt;li&gt;Ignore that the old coroutine stuff in Python exists.  Use 3.5 only with
the new &lt;tt class=&quot;docutils literal&quot;&gt;async def&lt;/tt&gt; keyword and co.  In particular you will need that
anyways to somewhat enjoy the experience because with older versions you
do not have async context managers which turn out to be very necessary
for resource management.&lt;/li&gt;
&lt;li&gt;Learn to restart the event loop for cleanup.  This is something that
took me longer to realize than I wish it did but the sanest way to deal
with cleanup logic that is written in async code is to restart the event
loop a few times until nothing pending is left.  Since sadly there is no
common pattern to deal with this you will end up with some ugly
workaround at time.  For instance &lt;cite&gt;aiohttp&lt;/cite&gt;'s web support also does this
pattern so if you want to combine two cleanup logics you will probably
have to reimplement the utility helper that it provides since that
helper completely tears down the loop when it's done.  This is also not
the first library I saw do this :(&lt;/li&gt;
&lt;li&gt;Working with subprocesses is non obvious.  You need to have an event
loop running in the main thread which I suppose is listening in on
signal events and then dispatches it to other event loops.  This
requires that the loop is notified via
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;asyncio.get_child_watcher().attach_loop(...)&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Writing code that supports both async and sync is somewhat of a lost
cause.  It also gets dangerous quickly when you start being clever and
try to support &lt;tt class=&quot;docutils literal&quot;&gt;with&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;async with&lt;/tt&gt; on the same object for
instance.&lt;/li&gt;
&lt;li&gt;If you want to give a coroutine a better name to figure out why it was
not being awaited, setting &lt;tt class=&quot;docutils literal&quot;&gt;__name__&lt;/tt&gt; doesn't help.  You need to set
&lt;tt class=&quot;docutils literal&quot;&gt;__qualname__&lt;/tt&gt; instead which is what the error message printer uses.&lt;/li&gt;
&lt;li&gt;Sometimes internal type conversations can screw you over.  In particular
the &lt;tt class=&quot;docutils literal&quot;&gt;asyncio.wait()&lt;/tt&gt; function will make sure all things passed are
futures which means that if you pass coroutines instead you will have a
hard time finding out if your coroutine finished or is pending since the
input objects no longer match the output objects.  In that case the only
real sane thing to do is to ensure that everything is a future upfront.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;context-data&quot;&gt;
&lt;h2&gt;Context Data&lt;/h2&gt;
&lt;p&gt;Aside from the insane complexity and lack of understanding on my part of
how to best write APIs for it my biggest issue is the complete lack of
consideration for context local data.  This is something that the node
community learned by now.  &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;continuation-local-storage&lt;/span&gt;&lt;/tt&gt; exists but has
been accepted as implemented too late.  Continuation local storage and
similar concepts are regularly used to enforce security policies in a
concurrent environment and corruption of that information can cause severe
security issues.&lt;/p&gt;
&lt;p&gt;The fact that Python does not even have any store at all for this is more
than disappointing.  I was looking into this in particular because I'm
investigating how to best support &lt;a class=&quot;reference external&quot; href=&quot;https://docs.sentry.io/learn/breadcrumbs/&quot;&gt;Sentry's breadcrumbs&lt;/a&gt; for asyncio and I do not
see a sane way to do it.  There is no concept of context in asyncio, there
is no way to figure out which event loop you are working with from generic
code and without monkeypatching the world this information will not be
available.&lt;/p&gt;
&lt;p&gt;Node is currently going through the process of &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/nodejs/node-eps/pull/18&quot;&gt;finding a long term
solution for this problem&lt;/a&gt;.
That this is not something to be left ignored can be seen by this being a
recurring issue in all ecosystems.  It comes up with JavaScript, Python
and the .NET environment.  The problem &lt;a class=&quot;reference external&quot; href=&quot;https://docs.google.com/document/d/1tlQ0R6wQFGqCS5KeIw0ddoLbaSYx6aU7vyXOkv-wvlM/edit&quot;&gt;is named async context propagation&lt;/a&gt;
and solutions go by many names.  In Go the context package needs to be
used and explicitly passed to all goroutines (not a perfect solution but
at least one).  .NET has the best solution in the form of local call
contexts.  It can be a thread context, an web request context, or
something similar but it's automatically propagating unless suppressed.
This is the gold standard of what to aim for.  Microsoft had this solved
since more than 15 years now I believe.&lt;/p&gt;
&lt;p&gt;I don't know if the ecosystem is still young enough that logical call
contexts can be added but now might still be the time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;personal-thoughts&quot;&gt;
&lt;h2&gt;Personal Thoughts&lt;/h2&gt;
&lt;p&gt;Man that thing is complex and it keeps getting more complex.  I do not
have the mental capacity to casually work with asyncio.  It requires
constantly updating the knowledge with all language changes and it has
tremendously complicated the language.  It's impressive that an ecosystem
is evolving around it but I can't help but get the impression that it will
take quite a few more years for it to become a particularly enjoyable and
stable development experience.&lt;/p&gt;
&lt;p&gt;What landed in 3.5 (the actual new coroutine objects) is great.  In
particular with the changes that will come up there is a sensible base
that I wish would have been in earlier versions.  The entire mess with
overloading generators to be coroutines was a mistake in my mind.  With
regards to what's in asyncio I'm not sure of anything.  It's an incredibly
complex thing and super messy internally.  It's hard to comprehend how it
works in all details.  When you can pass a generator, when it has to be a
real coroutine, what futures are, what tasks are, how the loop works and
that did not even come to the actual IO part.&lt;/p&gt;
&lt;p&gt;The worst part is that asyncio is not even particularly fast.  David
Beazley's live demo hacked up asyncio replacement is twice as fast as it.
There is an enormous amount of complexity that's hard to understand and
reason about and then it fails on it's main promise.  I'm not sure what to
think about it but I know at least that I don't understand asyncio enough
to feel confident about giving people advice about how to structure code
for it.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Rust and Rest</title>
    <id>http://lucumr.pocoo.org/2016/7/10/rust-rest</id>
    <updated>2016-07-10T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2016/7/10/rust-rest" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;A few months back I decided to write a command line client for &lt;a class=&quot;reference external&quot; href=&quot;http://www.getsentry.com/&quot;&gt;Sentry&lt;/a&gt; because manually invoking the Sentry API for
some common tasks (such as dsym or sourcemap management is just no fun).
Given the choice of languages available I went with Rust.  The reason for
this is that I want people to be able to download a single executable that
links everything in statically.  The choice was between C, C++, Go and
Rust.  There is no denying that I really like Rust so it was already a
pretty good choice for me.  However what made it even easier is that Rust
quite a potent ecosystem for what I wanted.  So here is my lessons learned
from this.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;libraries-for-http&quot;&gt;
&lt;h2&gt;Libraries for HTTP&lt;/h2&gt;
&lt;p&gt;To make an HTTP request you have a choice of libraries.  In particular
there are two in Rust you can try: &lt;a class=&quot;reference external&quot; href=&quot;http://hyper.rs/&quot;&gt;hyper&lt;/a&gt; and
&lt;a class=&quot;reference external&quot; href=&quot;https://crates.io/crates/curl&quot;&gt;rust-curl&lt;/a&gt;.  I tried both and there are
some releases with the former but I settled in rust-curl in the end.  The
reason for this is twofold.  The first is that curl (despite some of the
oddities in how it does things) is very powerful and integrates really
well with the system SSL libraries.  This means that when I compile the
executable I get the native TLS support right away.  rust-curl also
(despite being not a pure rust library) compiles really well out of the
box on Windows, macOS and Linux.  The second reason is that Hyper is
currently undergoing a major shift in how it's structured and a bit in
flux.  I did not want to bet on that too much.  When I started it also did
not have proxy support which is not great.&lt;/p&gt;
&lt;p&gt;For JSON parsing and serializing I went with &lt;a class=&quot;reference external&quot; href=&quot;https://crates.io/crates/serde&quot;&gt;serde&lt;/a&gt;.  I suppose that serde will eventually
be the library of choice for all things serialization but right now it's
not.  It depends on compiler plugins and there are two ways to make it
work right now.  One is to go with nightly Rust (which is what I did) the
other is to use the build script support in Rust.  This is similar to what
you do in Go where some code generation happens as part of the build.  It
definitely works but it's not nearly as nice as using serde with nightly
Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;api-design&quot;&gt;
&lt;h2&gt;API Design&lt;/h2&gt;
&lt;p&gt;The next question is what a good API design for a Rust HTTP library is.  I
struggeld with this quite a bit and it took multiple iterations to end up
with something that I think is a good pattern.  What I ended up is a
collection of multiple types:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;Api&lt;/tt&gt;: I have a basic client object which I call &lt;tt class=&quot;docutils literal&quot;&gt;Api&lt;/tt&gt; internally.
it manages the curl handles (right now it just caches one) and also
exposes convenience methods to perform certain types of HTTP requests.
On top of that it provides high level methods that send the right HTTP
requests and handle the responses.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;ApiRequest&lt;/tt&gt;: basically your request object.  It's mostly a builder
for making requests and has a method to send the request and get a
response object.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;ApiResponse&lt;/tt&gt;: contains the response from the HTTP request.  This also
provides various helpers to convert the response into different things.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;ApiResult&amp;lt;T&amp;gt;&lt;/tt&gt;: this is a result object which is returned from most
methods.  The error is a special API error that converts from all the
APIs we call into.  This means it can hold curl errors, form errors,
JSON errors, IO errors and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To give you an idea how this looks like I want to show you one of the
high level methods that use most of the API:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list_releases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;ApiResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReleaseInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/projects/{}/{}/releases/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                         &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PathArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PathArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Note that I'm using the new question mark syntax &lt;tt class=&quot;docutils literal&quot;&gt;?&lt;/tt&gt; instead of the
more familiar &lt;tt class=&quot;docutils literal&quot;&gt;try!&lt;/tt&gt; macro here)&lt;/p&gt;
&lt;p&gt;So what is happening here?&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;This is a method on the &lt;tt class=&quot;docutils literal&quot;&gt;Api&lt;/tt&gt; struct.  We use the &lt;tt class=&quot;docutils literal&quot;&gt;get()&lt;/tt&gt;
shorthand method to make an HTTP &lt;cite&gt;GET&lt;/cite&gt; request.  It takes one argument
which is the URL to make the request to.  We use standard string
formatting to create the URL path here.&lt;/li&gt;
&lt;li&gt;The &lt;cite&gt;PathArg&lt;/cite&gt; is a simple wrapper that customizes the formatting so
that instead of just stringifying a value it also percent encodes it.&lt;/li&gt;
&lt;li&gt;The return value of the &lt;cite&gt;get&lt;/cite&gt; method is a &lt;tt class=&quot;docutils literal&quot;&gt;ApiResult&amp;lt;ApiResponse&amp;gt;&lt;/tt&gt;
which provides a handy &lt;tt class=&quot;docutils literal&quot;&gt;convert()&lt;/tt&gt; method which does both error
handling and deserialization.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How does the JSON handling take place here?  The answer is that
&lt;tt class=&quot;docutils literal&quot;&gt;convert()&lt;/tt&gt; can do that.  Because &lt;tt class=&quot;docutils literal&quot;&gt;Vec&amp;lt;ReleaseInfo&amp;gt;&lt;/tt&gt; has an automatic
deserializer implemented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-error-onion&quot;&gt;
&lt;h2&gt;The Error Onion&lt;/h2&gt;
&lt;p&gt;The bulk of the complexity is hidden behind multiple layers of error
handling.  It took me quite a long time to finally come up with this
design which is why I'm particularly happy with finally having found one I
really like.  The reason error handling is so tricky with HTTP requests is
because you want to have both the flexibility of responding to specific
error conditions as well as automatically handling all the ones you are
not interested in.&lt;/p&gt;
&lt;p&gt;The design I ended up with is that I have an &lt;tt class=&quot;docutils literal&quot;&gt;ApiError&lt;/tt&gt; type.  All the
internal errors that the library could encounter (curl errors etc.) are
automatically converted into an &lt;tt class=&quot;docutils literal&quot;&gt;ApiError&lt;/tt&gt;.  If you send a request the
return value is as such &lt;tt class=&quot;docutils literal&quot;&gt;Result&amp;lt;ApiResponse, ApiError&amp;gt;&lt;/tt&gt;.  However the
trick here is that at this level no HTTP error (other than connection
errors) is actually stored as &lt;tt class=&quot;docutils literal&quot;&gt;ApiError&lt;/tt&gt;.  Instead also a failed
response (because for instance of a 404) is stored as the actual response
object.&lt;/p&gt;
&lt;p&gt;On the response object you can check the status of the response with these
methods:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However what's nice is that most of the time you don't have to do any of
this.  The response method also provides a method to conver non successful
responses into errors like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;ApiResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deserialize&lt;/span&gt;::&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiError&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiError&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;generic error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method consumes the response and depending on the condition of the
response returns different results.  If everything was fine the response
is returned unchanged.  However if there was an error we first try to
deserialize the body with our own &lt;tt class=&quot;docutils literal&quot;&gt;ErrorInfo&lt;/tt&gt; which is the JSON response
our API returns or otherwise we fall back to a generic error message and
the status code.&lt;/p&gt;
&lt;p&gt;What's deserialize?  It just invokes serde for deserialization:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deserialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;ApiResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serde_json&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;from_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[..],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing you can see here is that the body is buffered into memory
entirely.  I was torn on this in the beginning but it actually turns out
to make the API significantly nicer because it allows you to reason about
the response better.  Without buffering up everything in memory it becomes
much harder to do conditional things based on the body.  For the cases
where we cannot deal with this limitation I have extra methods to stream
the incoming data.&lt;/p&gt;
&lt;p&gt;On deserialization we match on the body.  The body is an &lt;tt class=&quot;docutils literal&quot;&gt;Option&amp;lt;Vec&amp;lt;u8&amp;gt;&amp;gt;&lt;/tt&gt;
here which we convert into a &lt;tt class=&quot;docutils literal&quot;&gt;&amp;amp;[u8]&lt;/tt&gt; which satisfies the &lt;tt class=&quot;docutils literal&quot;&gt;Read&lt;/tt&gt;
interface which we can then use for deserialization.&lt;/p&gt;
&lt;p&gt;The nice thing about the aforementioned &lt;tt class=&quot;docutils literal&quot;&gt;to_result&lt;/tt&gt; method is that it
works just so nice.  The common case is to convert something into a result
and to then deserialize the response if everything is fine.  Which is why
we have this &lt;tt class=&quot;docutils literal&quot;&gt;convert&lt;/tt&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;ApiResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;complex-uses&quot;&gt;
&lt;h2&gt;Complex Uses&lt;/h2&gt;
&lt;p&gt;There are some really nice uses for this.  For instance here is how we
check for updates from the GitHub API:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_latest_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;ApiResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://api.github.com/repos/getsentry/sentry-cli/releases/latest&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;GitHubRelease&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REFERENCE_NAME&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser_download_url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we silently ignore a 404 but otherwise we parse the response as
&lt;cite&gt;GitHubRelease&lt;/cite&gt; structure and then look through all the assets.  The call
to &lt;cite&gt;to_result&lt;/cite&gt; does nothing on success but it will handle all the other
response errors automatically.&lt;/p&gt;
&lt;p&gt;To get an idea how the structures like &lt;cite&gt;GitHubRelease&lt;/cite&gt; are defined, this
is all that is needed:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[derive(Debug, Deserialize)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GitHubAsset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser_download_url&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[derive(Debug, Deserialize)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GitHubRelease&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag_name&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GitHubAsset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;curl-handle-management&quot;&gt;
&lt;h2&gt;Curl Handle Management&lt;/h2&gt;
&lt;p&gt;One thing that is not visible here is how I manage the curl handles.  Curl
is a C library and the Rust binding to it is quite low level.  While it's
well typed and does not require unsafe code to use, it still feels very
much like a C library.  In particular there is a curl &amp;quot;easy&amp;quot; handle object
you are supposed to keep hanging around between requests to take advantage
of keepalives.  However the handles are stateful.  Readers of this blog
are aware that there are few things I hate as much as unnecessary stateful
APIs.  So I made it as stateless as possible.&lt;/p&gt;
&lt;p&gt;The &amp;quot;correct&amp;quot; thing to do would be to have a pool of &amp;quot;easy&amp;quot; handles.
However in my case I never have more than one request outstanding at the
time so instead of going with something more complex I stuff away the
&amp;quot;easy&amp;quot; handle in a &lt;tt class=&quot;docutils literal&quot;&gt;RefCell&lt;/tt&gt;.  A &lt;tt class=&quot;docutils literal&quot;&gt;RefCell&lt;/tt&gt; is a smart pointer that
moves the borrow semantics that rust normally requires at compile time to
runtime.  This is rougly how this looks:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApiRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;RefMut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;easy&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Easy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_handle&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;RefCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;easy&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Easy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;ApiResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borrow_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiRequest&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way if you call &lt;cite&gt;request&lt;/cite&gt; twice you will get a runtime panic if the
last request is still outstanding.  This is fine for what I do.  The
&lt;tt class=&quot;docutils literal&quot;&gt;ApiRequest&lt;/tt&gt; object itself implements a builder like pattern where you
can modify the object with chaining calls.  This is roughly how this looks
like when used for a more complex situation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;ApiResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;NoDsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;EventInfo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_submit_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Sentry-Auth&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_auth_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_json_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;lessons-learned&quot;&gt;
&lt;h2&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;My key takeaways from doing this in Rust so far have been:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Rust is definitely a great choice for building command line utilities.
The ecosystem is getting stronger by the day and there are so many
useful crates already for very common tasks.&lt;/li&gt;
&lt;li&gt;The cross platform support is superb.  Getting the windows build going
was easy cake compared to the terror you generally go through with
other languages (including Python).&lt;/li&gt;
&lt;li&gt;serde is a pretty damn good library.  It's a shame it's not as nice to
use on stable rust.  Can't wait for this stuff to get more stable.&lt;/li&gt;
&lt;li&gt;Result objects in rust are great but sometimes it makes sense to not
immediately convert data into a result object.  I originally converted
failure responses into errors immediately and that definitely hurt the
convenience of the APIs tremendously.&lt;/li&gt;
&lt;li&gt;Don't be afraid of using C libraries like &lt;cite&gt;curl&lt;/cite&gt; instead of native
Rust things.  It turns out that Rust's build support is pretty
magnificent which makes installing the rust curl library
straightforward.  It even takes care of compiling curl itself on
Windows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to see the code, the entire git repository of the client can
be found online: &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/getsentry/sentry-cli&quot;&gt;getsentry/sentry-cli&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">A Europe For Our Children</title>
    <id>http://lucumr.pocoo.org/2016/5/18/for-our-children</id>
    <updated>2016-05-18T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2016/5/18/for-our-children" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;Most of the readers of this blog are not from Europe, let alone Austria,
the country I was born in.  As such I'm not sure how many will actually
care about Austrian politics here, especially if it's a lengthy post.  But
I would still like if you read it because I think the topic is important
and not just because of Austria.  Our problems here are not just ours,
they are a general issue that affects all of Europe and the western world.&lt;/p&gt;
&lt;p&gt;So since you are probably in no way familiar with Austrian politics or the
situation in the country I want to give you a brief overview.  Austria has
recovered very quickly from the war torn country it was after World War 2
and emerged as one of the most powerful economies of Europe if looked at
on a GDP per capita basis.  It underwent a conversion from an agricultural
country with some tourism attached to being dominated by the service
industry and producing technology and parts (the economical tree map looks
confusing because it's so heavily diversified).&lt;/p&gt;
&lt;p&gt;However as great as the country has developed after the wars and as
profitable the creation of the Eurozone was, there was an end to this
positive trend and it came with the financial crisis of 2007/2008
(although with a bit of a delay).  The economy did recover, but it did not
do it to the extent people wanted.  At the same time necessary reforms
were not implemented (or not implemented in the right ways) and as a
result the country has suffered major blows in the last few years.  From a
personal point of view I cannot stress enough how disappointed I am that
many of my collegues went to other countries and started their companies
there or work there.  But it would be foolish to blame politics on this
alone.  This is as much a problem of politics as it is a problem of
culture.&lt;/p&gt;
&lt;p&gt;We now reached the point where cheap and populist ideas like reducing
social welfare for non citizens gets popular support.  In this environment
right wing parties emerge and this sunday Austrians will probably elect
the first right wing leader of the country since the end of World War 2.&lt;/p&gt;
&lt;p&gt;But politics not what I want to talk about.  What I want to talk about is
the erosion of civilized discourse in Austria and I think in all of
Europe.  A large part of the general public are unable to have civilized
discussions on the bases of facts and instead conspiracies and emotions
take over and this is something that extends to politicians in Austria as
well.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-symptoms-and-problems&quot;&gt;
&lt;h2&gt;The Symptoms and Problems&lt;/h2&gt;
&lt;p&gt;If you look at the emotional state of the country you can see a few
symptoms and problems that help the populists to raise to power:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Inability (or unwillingness) to learn and understand&lt;/strong&gt; how Austria and
the world changed in the last few years.  I think this is a big one of the
people who want to leave the European Union and do similar crazy things
to the Austrian economy.  We're so intertwined with it, that I doubt
anyone can predict what would happen as a consequence of leaving it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Comparing things that cannot directly be compared&lt;/strong&gt; is a very related
problem. As an example the Euro might have been a mistake for Germany
but that does not mean that the Euro was not a profit for Austria.  We
were pegged to the Mark before, for us not much changed.  If anything the
situation improved because we're an export nation and our export partners
are other European countries and if they also use the Euro they cannot
harm our exports by devaluing their own currencies.&lt;/p&gt;
&lt;p&gt;But despite the fact it's so very hard to compare countries because they
are so fundamentally differently structured - yet people will still do
it in conversations.  Switzerland is heralded as the great example of
continental Europe in Austria but it's so specific out of history that
it's incredible hard to copy or imitate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Not being able consider the other side&lt;/strong&gt;. I am shocked sometimes what
people here in Austria think the US are like.  The idea that both
Europeans and Americans might have very similar fears or hopes for TTIP
for instance does not seem to exist here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Fear of change&lt;/strong&gt;. I think this is a typical Austrian problem but to
smaller extent it probably exists elsewhere too. Everything new is
torpedoed until it cannot be avoided any more because every single other
country already did it before. That applies to smoking bans as much as
to embracing of credit cards, online services, acceptance of
homosexuality, Sunday shopping, flexible working hours and much more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Broad categorization&lt;/strong&gt;. I think Austrians are masters at giving
good/bad labels to large masses of people based on some categorization
instead of considering the individual.  Refugees are either good or bad,
the industry is good or bad, corporations are good or bad, immigrants
are good or bad. That individually a refugee could be good or bad is
impossible to comprehend in the general discourse and if someone does
bring it up, it often gets dismissed as an outlier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;strong&gt;Inability to give credit&lt;/strong&gt;. This is particularly a problem in Austrian
politics. It's one party against the other and never ever would a ruling
party give an opposition party credit or the other way round. Likewise
would social democratic voters never give conservative parties credit
for something or the other way round.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-root-causes&quot;&gt;
&lt;h2&gt;The Root Causes&lt;/h2&gt;
&lt;p&gt;But what causes this behavior?  I think Austria's history has a lot to do
with it.  In the recent history there were conservatives versus social
democrats.  Combined with the fact that after the war Austria emerged not
only as a loser but also has one with a lot of baggage due to the support
to national socialism and the complicated way to deal with it after the
war.  As such the population was always split in two on this level.
However they could unity at least somewhat by voting for one of the two
large centrist parties.  Because the country was doing really well, there
was no reason to reevaluate this.&lt;/p&gt;
&lt;p&gt;However when disaster struck this rift became bigger instead of smaller
and particular with this upcoming presidential election only the most
extreme candidates made it into the run-off. Voters did not vote for
people they believed in as much as they voted by using tactics against
predictions.  This now has lead to one the ugliest pre-elections I have
seen.&lt;/p&gt;
&lt;p&gt;Politics are no longer about doing the right thing but defending
principles, even if they are completely unfounded.  Even though everybody
says they have the best for Austrian in mind everyone is so stuck to their
own opinion that not a single meter of compromise can be achieved.
Newspapers paint scary pictures of the different outcomes of the election,
how the country will be torn, how one candidate would mean European
sanctions and how the other candidate would mean the end of a functioning
society.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;a-path-forward&quot;&gt;
&lt;h2&gt;A Path Forward&lt;/h2&gt;
&lt;p&gt;There are clearly many things wrong in this country but so is it
everywhere else.  We're not alone with the changes in the world and we
cannot fall back to local solutions for these problems.  But likewise can
we not pretend that problems don't exist.  This behavior of ruling parties
has helped the rise of the populists.  It does not help to pretend that
immigration without integration does not contribute to problems in
society.  We need a more honest approach with more talking to each other.&lt;/p&gt;
&lt;p&gt;Just a few days ago we got &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Christian_Kern&quot;&gt;a new chancellor&lt;/a&gt; and he has indicated that
he wants to end the course of confrontation his predecessors had.  This
has been supported by all other parties other than the right wing FPOe.  I
hope they reconsider and also want to constructively work together with
the rest of the government to lead the country forward and to restore a
positive way of thinking rather than the fear that has been going around
for the last years.&lt;/p&gt;
&lt;p&gt;This however is not something that is a problem that needs to be solved in
government.  This is a problem that we as people in that country have and
we need to talk to each other more.  If we talk more to each other I hope
it becomes clear that we share many core values, we just don't always
agree on all of them.&lt;/p&gt;
&lt;p&gt;And to my friends in Austria: please vote. But more than that: please
accept that if the outcome is not what you wanted, that it does not mean
the end of the country as you know it.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Micropackages and Open Source Trust Scaling</title>
    <id>http://lucumr.pocoo.org/2016/3/24/open-source-trust-scaling</id>
    <updated>2016-03-24T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2016/3/24/open-source-trust-scaling" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;Like everybody else this week &lt;a class=&quot;reference external&quot; href=&quot;https://www.getsentry.com/&quot;&gt;we&lt;/a&gt; had fun
with &lt;a class=&quot;reference external&quot; href=&quot;http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/&quot;&gt;the pad-left disaster&lt;/a&gt;.
We're from the Python community and our exposure to the node ecosystem is
primarily for the client side.  We're big fans of the ecosystem that
develops around react and as such quite a bit of our daily workflow
involves npm.&lt;/p&gt;
&lt;p&gt;What frustrated me personally about this conversation that took place over
the internets about the last few days however has nothing to do with npm,
the guy who deleted his packages, any potential trademark disputes or the
supposed inability of the JavaScript community to write functions to pad
strings.  It has more to do with how the ecosystem evolving around npm has
created the most dangerous and irresponsible environment which in many
ways leaves me scared.&lt;/p&gt;
&lt;p&gt;My opinion very quickly went from “&lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/mitsuhiko/status/712429716356124673&quot;&gt;Oh that's funny&lt;/a&gt;” to
“&lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/mitsuhiko/status/712430645671280640&quot;&gt;This concerns me&lt;/a&gt;”.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;dependency-explosion&quot;&gt;
&lt;h2&gt;Dependency Explosion&lt;/h2&gt;
&lt;p&gt;When &amp;quot;pad left&amp;quot; disaster stroke I had a brief look at Sentry's dependency
tree.  I should probably have done that before but for as long things work
you don't really tend to do that.  At the time of writing we have 39
dependencies in our &lt;tt class=&quot;docutils literal&quot;&gt;package.json&lt;/tt&gt;.  These dependencies are strongly
vetted in the sense that we do not include anything there we did not
investigate properly.  What however we cannot do, is also to investigate
every single dependency there is.  The reason for this is how these node
dependencies explode.  While we have 39 direct dependencies, we have more
than a thousand dependencies in total as it turns out.&lt;/p&gt;
&lt;p&gt;To give you a comparison: the Sentry backend (Sentry server) has 45 direct
dependencies.  If you resolve all dependencies and install them as well
you end up with a total of 65 packages which is significantly less.  We
only get a total of 20 packages over what we depend on ourselves.  The
typical Python project would be similar.  For instance the Flask framework
depends on three (soon to be four with Click added) other packages:
Werkzeug, Jinja2 and itsdangerous.  Jinja2 additionally depends on
MarkupSafe.  All of those packages are written by the same author however
but split into rough responsibilities.&lt;/p&gt;
&lt;p&gt;Why is that important?&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;dependencies incur cost.&lt;/li&gt;
&lt;li&gt;every dependency is a liability.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-cost-of-dependencies&quot;&gt;
&lt;h2&gt;The Cost of Dependencies&lt;/h2&gt;
&lt;p&gt;Let's talk about the cost of dependencies first.  There are a few costs
associated with every dependency and most of you who have been programming
for a few years will have encountered this.&lt;/p&gt;
&lt;p&gt;The most obvious costs are that packages need to be downloaded from
somewhere.  This corresponds to direct cost.  The most shocking example I
encountered for this is the &lt;a class=&quot;reference external&quot; href=&quot;https://www.npmjs.com/package/isarray&quot;&gt;isarray&lt;/a&gt;
npm package.  It's currently being downloaded short of 19 million times a
month from npm.  The entire contents of that package can fit into a single
line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;[object Array]&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However in addition to this stuff there is a bunch of extra content in it.
You actually end up downloading a 2.5KB tarball because of all the extra
metadata, readme, license file, travis config, unittests and makefile.  On
top of that npm adds 6KB for its own metadata.  Let's round it to 8KB that
need to be downloaded.  Multiplied with the total number of downloads last
month the node community downloaded 140GB worth of isarray.  That's half
of the monthly downloads of what Flask achieves measured by size.&lt;/p&gt;
&lt;p&gt;The footprint of Sentry's server component is big when you add up all the
dependencies.  Yet the entire installation of Sentry from pypi takes about
30 seconds including compiling lxml.  Installing the over 1000
dependencies for the UI though takes I think about 5 minutes even though
you end up with a fraction of the code afterwards.  Also the further you
are away from the npm CDN node the worse the price for the network
roundtrip you pay.  I threw away my node cache for fun and ran npm install
on Sentry.  Takes about 4.5 minutes.  And that's with good latency to npm,
on a above average network connect and a top of the line Macbook Pro with
an SSD.  I don't want to know what the experience is for people on
unreliable network connections.  Afterwards I end up with 165MB in
&lt;cite&gt;node_modules&lt;/cite&gt;.  For comparison the entirety of the Sentry's backend
dependencies on the file system and all metadata is 60MB.&lt;/p&gt;
&lt;p&gt;When we have a thousand different dependencies we have a thousand
different licenses and copyright files.  Really makes me wonder what the
license screen of a node powered desktop application would look like.  But
it's not also a thousand licenses, it's a huge number of independent
developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;trust-and-auditing&quot;&gt;
&lt;h2&gt;Trust and Auditing&lt;/h2&gt;
&lt;p&gt;This leads me to what my actual issue with micro-dependencies is: we do not
have trust solved.  Every once in a while people will bring up how we all
would be better off if we PGP signed our Python packages.  I think what a
lot of people miss in the process is that signatures were never a
technical problem but a trust and scaling problem.&lt;/p&gt;
&lt;p&gt;I want to give you a practical example of what I mean with this.  Say you
build a program based on the Flask framework.  You pull in a total of 4-5
dependencies for Flask alone which are all signed off my me.  The attack
vector to get untrusted code into Flask is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;get a backdoor into a pull request and get it merged&lt;/li&gt;
&lt;li&gt;steal my credentials to PyPI and publish a new release with a backdoor&lt;/li&gt;
&lt;li&gt;put a backdoor into one of my dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of those attack vectors I cover.  I use my own software, monitor what
releases are PyPI which is also the only place to install my software
from.  I 2FA all my logins where possible, I use long randomly generated
passwords where I cannot etc.  None of my libraries use a dependency I do
not trust the developer of.  In essence if you use Flask you only need to
trust me to not be malicious or idiotic.  Generally by vetting me as a
person (or maybe at a later point an organization that releases my
libraries) you can be reasonably sure that what you install is what you
expect and not something dangerous.  If you develop large scale Python
applications you can do this for all your dependencies and you end up with
a reasonably short list.  More than that.  Because Python's import system
is very limited you end up with only one version of each library so when
you want to go in detail and sign off on releases you only need to do it
once.&lt;/p&gt;
&lt;p&gt;Back to Sentry's use of npm.  It turns out we have four different versions
of the same query string library because of different version pinning by
different libraries.  Fun.&lt;/p&gt;
&lt;p&gt;Those dependencies can easily end up being high value targets because of
how few people know about them.  juliangruber's &amp;quot;isarray&amp;quot; has 15 stars on
github and only two people watch the repository.  It's downloaded 18
million times a month.  Sentry depends on it 20 times.  14 times it's a
pin for &lt;tt class=&quot;docutils literal&quot;&gt;0.0.1&lt;/tt&gt;, once it's a pin for &lt;tt class=&quot;docutils literal&quot;&gt;^1.0.0&lt;/tt&gt; and 5 times for
&lt;tt class=&quot;docutils literal&quot;&gt;~1.0.0&lt;/tt&gt;.  Any pin for anything other than a strict version match is a
disaster waiting to happen if someone would manage to push out a point
release for it by stealing juliangruber's credentials.&lt;/p&gt;
&lt;p&gt;Now one could argue that the same problem applies if people hack my
account and push out a new Flask release.  But I can promise you I will
notice a release from one of my ~5 libraries because of a) I monitor those
packages, b) other people would notice a release.  I doubt people would
notice a new isarray release.  Yet &lt;tt class=&quot;docutils literal&quot;&gt;isarray&lt;/tt&gt; is not sandboxed and runs
with the same rights as the rest of the code you have.&lt;/p&gt;
&lt;p&gt;For instance sindresorhus &lt;a class=&quot;reference external&quot; href=&quot;https://www.npmjs.com/~sindresorhus&quot;&gt;maintains 827 npm packages&lt;/a&gt;.  Most of which are probably one
liners.  I have no idea how good his opsec is, but my assumption is that
it's significantly harder for him to ensure that all of those are actually
his releases than it is for me as I only have to look over a handful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;signatures&quot;&gt;
&lt;h2&gt;Signatures&lt;/h2&gt;
&lt;p&gt;There is a common talk that package signatures would solve a lot of those
issues but at the end of the day because of the trust we get from PyPI and
npm we get very little extra security from a package signature compared to
just trusting the username/password auth on package publish.&lt;/p&gt;
&lt;p&gt;Why package signatures are not the holy grail was &lt;a class=&quot;reference external&quot; href=&quot;https://caremad.io/2013/07/packaging-signing-not-holy-grail/&quot;&gt;covered by Donald
Stufft&lt;/a&gt;
aka Mr PyPI.  You should definitely read that since he's describing the
overarching issue much better than I could ever do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;future-of-micro-dependencies&quot;&gt;
&lt;h2&gt;Future of Micro-Dependencies&lt;/h2&gt;
&lt;p&gt;To be perfectly honest:  I'm legitimately scared about node's integrity
of the ecosystem and this worry does not go away.  Among other things I'm
using keybase and keybase uses unpinned node libraries left and right.
keybase has 225 node dependencies from a quick look.  Among those many
partially pinned one-liner libraries for which it would be easily enough
to roll out backdoor update if one gets hold of credentials.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: it has been pointed out that keybase shrinkwrapped in the node
client and that the new client is written in Go.&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/maxtaco/status/713037656255557632&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If micro-dependencies want to have a future then something must change in
npm.  Maybe they would have to get a specific tag so that the system can
automatically run automated analysis to spot unexpected updates.  Probably
they should require a CC0 license to simplify copyright dialogs etc.&lt;/p&gt;
&lt;p&gt;But as it stands right now I feel like this entire thing is a huge
disaster waiting to happen and if you are not using node shrinkwrap yet
you better get started quickly.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Introducing Lektor — A Static File Content Management System For Python</title>
    <id>http://lucumr.pocoo.org/2015/12/21/introducing-lektor</id>
    <updated>2015-12-21T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2015/12/21/introducing-lektor" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;The longer I'm programming and creating software, the more I notice that I
build a lot of stuff that requires maintenance even though it should not.
In particular a topic that just keeps annoying me is how quickly
technology moves forward and how much effort it is to maintain older code
that still exists but now stands on ancient foundations.&lt;/p&gt;
&lt;p&gt;This is not a new discovery mind you.  This blog you're reading started
out as a Django application many, many years ago; made a transition to
WordPress because I could not be bothered with updating Django; and then
turned into two different static site generators because I did not want to
bother with making database updates and rather wanted to track my content
in a git repository.&lt;/p&gt;
&lt;p&gt;I like static website generators quite a bit.  As everything needs a
website these days — it's impossible to escape the work to create one.
For programmers it's possible to get away with building something with
static website generators like Jekyll, Hexo, Hugo, Pelican, Hyde, Brunch,
Middleman, Harp, Expose, …&lt;/p&gt;
&lt;p&gt;As you can see the list of tools available is endless.  Unfortunately
though these tools are all aimed at programmers and it's very hard to use
them as someone without programming experience.  Worse though: many of
them are clones of each other just written in different programming
languages with very similar designs.  There is very little innovation in
that space and that's a bit unfortunate because I like the flexibility I
get from frameworks like Flask at times.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;so-i-built-my-own&quot;&gt;
&lt;h2&gt;So I Built My Own&lt;/h2&gt;
&lt;p&gt;This is by far not the first time I built a static website generator but I
hope it will be the last time.  This one however is different from any
project I built before.  The reason it exists is quite frankly that it's
impossible to escape family duties.  For me that means helping out with
the website of my parents.  I knew that I did not want that to be
WordPress or something that needs security updates so about two years ago
I started to investigate that options there are.&lt;/p&gt;
&lt;p&gt;After a ton of toying around I ended up using &lt;a class=&quot;reference external&quot; href=&quot;http://pythonhosted.org/Frozen-Flask/&quot;&gt;Frozen-Flask&lt;/a&gt; for that project.  It was neat
because it allowed me to structure the website exactly like I wanted.
However it also meant that whenever text started to change I needed to
spend time on it.  Thus I had to investigate CMS solutions again.
Countless weekends were wasted trying to make WordPress work again and
looking at Statamic.  However I found them quite a bit more complex to
customize than what I was used to with Frozen-Flask and they did not
really fit the format at all.  Especially WordPress feels much more like a
blog engine than a CMS.&lt;/p&gt;
&lt;p&gt;Finally I decided to sit down and build something completely different: a
content management system that uses flat files as source files like most
other systems, but it has a locally hosted admin panel that a non
programmer can use.  You install the application, double click on the
project, a browser opens and you can edit the pages.  It builds in the
background into static HTML files and there is a publish button to ship it
up to a server.  For collaboration one can use Dropbox.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;enter-lektor&quot;&gt;
&lt;h2&gt;Enter Lektor&lt;/h2&gt;
&lt;p&gt;I called this system Lektor and Open Sourced it initially a few months ago
after not having cared about it in a year or so.  However I had another
run-in with a project which was the Sentry documentation.  Sentry uses
Sphinx for the documentation and customizing the docs for what we had in
mind there turned out to be a complete waste of time and sanity.  While
Lektor is currently not in a position where it could replace Sphinx for
Sentry it gave me enough motivation to hack on it again on weekends.&lt;/p&gt;
&lt;p&gt;So I figured I might retry Open Sourcing it and made a website for it with
documentation and cleaned up some bad stuff in it.&lt;/p&gt;
&lt;p&gt;Here is what it looks like when you open up the admin panel:&lt;/p&gt;
&lt;img alt=&quot;https://raw.githubusercontent.com/lektor/lektor-archive/master/screenshots/admin.png&quot; src=&quot;https://raw.githubusercontent.com/lektor/lektor-archive/master/screenshots/admin.png&quot; style=&quot;width: 100%;&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;lektor-is-a-framework&quot;&gt;
&lt;h2&gt;Lektor is a Framework&lt;/h2&gt;
&lt;p&gt;But what makes Lektor so much fun to work with is that Lektor is (while
very opinionated) very, very flexible.  It takes a lot of inspiration from
ORMs like Django's.  Instead of there being a &amp;quot;blog component&amp;quot; you can model
your own blog posts and render them with the templates you want to use.
There is not a single built-in template that you have to use.  The only
thing it gives you is a quickstart that sets up the folders and copies
default minimalistic templates over.&lt;/p&gt;
&lt;p&gt;As an example, here is how a blog index template looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;blog_layout.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;macros/pagination.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;render_pagination&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;My Blog&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endblock&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;My Blog&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;blog-index&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this.pagination.items&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; —
      by &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.author&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
      on &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.pub_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dateformat&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this.pagination.pages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;render_pagination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this.pagination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endblock&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The system understands what the blog is, that it has child records, that
those records are paginated, it can provide pagination etc.  However there
is nothing in there that makes it a blog in itself.  It just has a very
flexible ORM inspired component that gives access to the structured files
on the file system.  Programming for Lektor feels very much like
programming something with Flask or Django.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;learn-more&quot;&gt;
&lt;h2&gt;Learn More&lt;/h2&gt;
&lt;p&gt;If you want to learn more about it, there are quite a few resources at
this point:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.getlektor.com/&quot;&gt;The Lektor Website&lt;/a&gt;, with documentation
and all that cool stuff.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.getlektor.com/blog/2015/12/hello-lektor/&quot;&gt;Introduction Blog Post&lt;/a&gt;,
with some more back story and explanations of how it works.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.getlektor.com/docs/guides/&quot;&gt;A Few Guides&lt;/a&gt; on how to
build blogs, portfolio websites, etc.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.getlektor.com/docs/quickstart/&quot;&gt;A Quickstart&lt;/a&gt; with a
screencast to show the basics.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.getlektor.com/docs/deployment/travisci/&quot;&gt;A Deployment Guide for Lektor + GitHub Pages&lt;/a&gt; that shows how
to put something up with the help of Travis-CI (which also includes a
short screencast).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;final-words&quot;&gt;
&lt;h2&gt;Final Words&lt;/h2&gt;
&lt;p&gt;I hope people find it useful.  I know that I enjoy using it a ton and I
hope it makes others enjoy it similarly.  Because I run so many Open
Source projects and maintenance of all of them turns out to be tricky I
figured I do this better this time around.  Lektor belongs to a separate
org and the project does not use any resources only I have access to
(other than the domain name and the server travis-CI deploys to).  So in
case people want to help out, there is no single point of failure!&lt;/p&gt;
&lt;p&gt;I hope I can spend some time over Christmas to do the same to my other
projects and alter the bus factor of them.&lt;/p&gt;
&lt;p&gt;There is far too much in Lektor to be able to cover it in a single blog
post so I will probably write a bit more about some of the really cool
things about in in the next few weeks.  Enjoy!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

