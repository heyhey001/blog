<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Armin Ronacher's Thoughts and Writings</title>
  <id>http://lucumr.pocoo.org/feed.atom</id>
  <updated>2016-12-29T00:00:00Z</updated>
  <link href="http://lucumr.pocoo.org/" />
  <link href="http://lucumr.pocoo.org/feed.atom" rel="self" />
  <subtitle type="text">Armin Ronacher's personal blog about programming, games and random thoughts that come to his mind.</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Be Careful with Python's New-Style String Format</title>
    <id>http://lucumr.pocoo.org/2016/12/29/careful-with-str-format</id>
    <updated>2016-12-29T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2016/12/29/careful-with-str-format" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;This should have been obvious to me for a longer time, but until earlier
today I did not really realize the severity of the issues caused by
&lt;cite&gt;str.format&lt;/cite&gt; on untrusted user input.  It came up as a way to bypass the
Jinja2 Sandbox in a way that would permit retrieving information that you
should not have access to which is why I just pushed out a &lt;a class=&quot;reference external&quot; href=&quot;https://www.palletsprojects.com/blog/jinja-281-released/&quot;&gt;security
release&lt;/a&gt; for
it.&lt;/p&gt;
&lt;p&gt;However I think the general issue is quite severe and needs to be a
discussed because most people are most likely not aware of how easy it is
to exploit.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-core-issue&quot;&gt;
&lt;h2&gt;The Core Issue&lt;/h2&gt;
&lt;p&gt;Starting with Python 2.6 a new format string syntax landed inspired by
.NET which is also the same syntax that is supported by Rust and some
other programming languages.  It's available behind the &lt;cite&gt;.format()&lt;/cite&gt; method
on byte and unicode strings (on Python 3 just on unicode strings) and it's
also mirrored in the more customizable &lt;cite&gt;string.Formatter&lt;/cite&gt; API.&lt;/p&gt;
&lt;p&gt;One of the features of it is that you can address both positional and
keyword arguments to the string formatting and you can explicitly reorder
items at all times.  However the bigger feature is that you can access
attributes and items of objects.  The latter is what is causing the
problem here.&lt;/p&gt;
&lt;p&gt;Essentially one can do things like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class of {0} is {0.__class__}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;quot;class of 42 is &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In essence: whoever controls the format string can access potentially
internal attributes of objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;where-does-it-happen&quot;&gt;
&lt;h2&gt;Where does it Happen?&lt;/h2&gt;
&lt;p&gt;First question is why would anyone control the format string.  There are a
few places where it shows up:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;untrusted translators on string files.  This is a big one because many
applications that are translated into multiple languages will use
new-style Python string formatting and not everybody will vet all the
strings that come in.&lt;/li&gt;
&lt;li&gt;user exposed configuration.  One some systems users might be permitted
to configure some behavior and that might be exposed as format
strings.  In particular I have seen it where users can configure
notification mails, log message formats or other basic templates in web
applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;levels-of-danger&quot;&gt;
&lt;h2&gt;Levels of Danger&lt;/h2&gt;
&lt;p&gt;For as long as only C interpreter objects are passed to the format string
you are somewhat safe because the worst you can discover is some internal
reprs like the fact that something is an integer class above.&lt;/p&gt;
&lt;p&gt;However tricky it becomes once Python objects are passed in.  The reason
for this is that the amount of stuff that is exposed from Python functions
is pretty crazy.  Here is an example from a hypothetical web application
setup that would leak the secret key:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;super secret key&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the user can inject &lt;cite&gt;format_string&lt;/cite&gt; here they could discover the secret
string like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{event.__init__.__globals__[CONFIG][SECRET_KEY]}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;sandboxing-formatting&quot;&gt;
&lt;h2&gt;Sandboxing Formatting&lt;/h2&gt;
&lt;p&gt;So what do you do if you do need to let someone else provide format
strings?  You can use the somewhat undocumented internals to change the
behavior.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagicFormatMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;This class implements a dummy wrapper to fix a bug in the Python&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    standard library for string formatting.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    See http://bugs.python.org/issue13598 for information about why&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    this is necessary.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_last_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_last_index&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_last_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;LookupError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__len__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This is a necessary API but it&amp;#39;s undocumented and moved around&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# between Python releases&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;_string&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter_field_name_split&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter_field_name_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; \
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_formatter_field_name_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SafeFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter_field_name_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safe_getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;safe_getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Expand the logic here.  For instance on 2.x you will also need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to disallow func_globals, on 3.x you will also need to hide&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# things like cr_frame and others.  So ideally have a list of&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# objects that are entirely unsafe to access.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;safe_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SafeFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagicFormatMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vformat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can use the &lt;cite&gt;safe_format&lt;/cite&gt; method as a replacement for
&lt;cite&gt;str.format&lt;/cite&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{0.__class__}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;quot;&amp;lt;type &amp;#39;int&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;safe_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{0.__class__}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">OSX as Transparent Wifi MITM Proxy</title>
    <id>http://lucumr.pocoo.org/2013/1/6/osx-wifi-proxy</id>
    <updated>2013-01-06T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2013/1/6/osx-wifi-proxy" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;Yesterday I was in the situation where I wanted to debug an iOS device
and what network calls it would make.  Normally the trivial step is to
just define an HTTP proxy server in the wifi settings but that will only
work for as long as you have something that actually honors this proxy
server.  But there are better ways to transparently proxy connections from
a device connected via Wifi which does not require any changes on the
actual device.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-tools&quot;&gt;
&lt;h2&gt;The Tools&lt;/h2&gt;
&lt;p&gt;In order for this to work you need a device running OS X which is
connected to the same network as the Wifi.  Then you need to convince the
Wifi device to see you as the gateway instead of the actual gateway.  The
easiest way is just to go to the settings and change the gateway to your
computer's IP.  The second ingredient is an HTTP proxy, ideally one that
can also decrypt and reencrypt SSL traffic.  Personally I can recommend
&lt;a class=&quot;reference external&quot; href=&quot;http://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt; for that.  Lastly you will need
another proxy that can work transparently which sits between your device
and Charles.  On OS X &lt;a class=&quot;reference external&quot; href=&quot;http://darkk.net.ru/redsocks/&quot;&gt;redsocks&lt;/a&gt; gets
this job done.&lt;/p&gt;
&lt;p&gt;If you don't want to spend the money on Charles or you want to rewrite
traffic with Python you can use &lt;a class=&quot;reference external&quot; href=&quot;http://mitmproxy.org/&quot;&gt;mitmproxy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-setup&quot;&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;The first thing you will notice is that when you point your Wifi device to
your computer it will loose network connectivity.  That's because by
default your computer won't forward packets.  This can easily be changed
through sysctl:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ sudo sysctl -w net.inet.ip.forwarding=1
&lt;/pre&gt;
&lt;p&gt;After that you should be able to browse the internet again on your Wifi
device.&lt;/p&gt;
&lt;p&gt;The second step is installing &lt;tt class=&quot;docutils literal&quot;&gt;redsocks&lt;/tt&gt;.  If you have &lt;a class=&quot;reference external&quot; href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;brew&lt;/a&gt; that's a very trivial operation:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ brew install redsocks
&lt;/pre&gt;
&lt;p&gt;Once installed you will need to create a config file for it.  Call it
&lt;tt class=&quot;docutils literal&quot;&gt;redsocks.conf&lt;/tt&gt; and place it in a folder from which you run redsocks:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
base {
    log_debug = on;
    log_info = on;
    log = stderr;
    daemon = off;
    redirector = generic;
}

redsocks {
    local_ip = 0.0.0.0;
    local_port = 12345;

    ip = 127.0.0.1;
    port = 8889;

    // known types: socks4, socks5, http-connect, http-relay
    type = socks5;
}
&lt;/pre&gt;
&lt;p&gt;Since I'm using Charles I take advantage of it's socks5 support and point
it to &lt;cite&gt;localhost:8889&lt;/cite&gt; where Charles normally starts up if configured as
Socks5 proxy.  If you're using a regular HTTP proxy you can use
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;http-connect&lt;/span&gt;&lt;/tt&gt; as proxy type.  The &lt;tt class=&quot;docutils literal&quot;&gt;local_port&lt;/tt&gt; defines where the
actual transparent redsocks proxy opens.&lt;/p&gt;
&lt;p&gt;All you have to do then is to start it:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ redsocks
&lt;/pre&gt;
&lt;p&gt;After that you will need to point all the traffic that is not from your
computer and from port &lt;tt class=&quot;docutils literal&quot;&gt;80&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;443&lt;/tt&gt; of your Wifi through redsocks.
On OS X the firewall canbe controlled through &lt;tt class=&quot;docutils literal&quot;&gt;ipfw&lt;/tt&gt;.  In my case the
wifi device is &lt;tt class=&quot;docutils literal&quot;&gt;en1&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ sudo ipfw add fwd 127.0.0.1,12345 tcp from not me to any 80 in via en1
$ sudo ipfw add fwd 127.0.0.1,12345 tcp from not me to any 443 in via en1
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;working-around-os-x-bugs&quot;&gt;
&lt;h2&gt;Working around OS X Bugs&lt;/h2&gt;
&lt;p&gt;Now currently if you finish that above setup you will notice that nothing
actually works.  The cause for this is a Bug in the OS X kernel that
requires flipping the &lt;tt class=&quot;docutils literal&quot;&gt;net.inet.ip.scopedroute&lt;/tt&gt; flag to &lt;tt class=&quot;docutils literal&quot;&gt;0&lt;/tt&gt;.  I am not
entirely sure what it does, but the internet reports that it breaks
network sharing through the user preferences.  In any case it fixes
&lt;tt class=&quot;docutils literal&quot;&gt;ipfw&lt;/tt&gt; based forwarding so you can flip it with sysctl:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ sudo sysctl -w net.inet.ip.scopedroute=0
&lt;/pre&gt;
&lt;p&gt;Unfortunately in OS X Lion this flag can actually not be flipped from
userspace so you need to set it as boot parameter and then restart your
computer.  You can do this by editing the
&lt;tt class=&quot;docutils literal&quot;&gt;/Library/Preferences/SystemConfiguration/com.apple.Boot.plist&lt;/tt&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;  &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Kernel Flags&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;net.inet.ip.scopedroute=0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;installing-ssl-certificates&quot;&gt;
&lt;h2&gt;Installing SSL Certificates&lt;/h2&gt;
&lt;p&gt;After all that your HTTP traffic should show up in your SSL interception
proxy.  SSL will only work if the application on your Wifi device is
trusting your SSL interception proxy's CA.  For browsers for instance
that's trivial to change.  The Charles Certificate can be added to the
trust store by following this link: &lt;a class=&quot;reference external&quot; href=&quot;http://charlesproxy.com/charles.crt&quot;&gt;charles.crt&lt;/a&gt;.  Note that this will not work
with applications that don't use the system's CA trust store.  In that
case you will need to recompile your application so that it trusts the
Charles CA.&lt;/p&gt;
&lt;img alt=&quot;../../../../static/charles.png&quot; src=&quot;../../../../static/charles.png&quot; style=&quot;width: 100%;&quot; /&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Samsung Pay's MST Transactions and Merchant's Ability to Detect “Cloned” Magstripe Tracks</title>
    <id>http://lucumr.pocoo.org/2015/8/31/the-thing-about-samsung-pay</id>
    <updated>2015-08-31T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2015/8/31/the-thing-about-samsung-pay" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;I have a weird obsession with payment systems.  They fascinate me.  I find
it very satisfying to make a credit card transaction and to get a text
message confirming the purchase on my phone a second afterwards.  As
someone obsessed with networks, scalability and user experience I find
this a very interesting field even though it's embedded in probably the
least agile and most regulated industry.  But not just the technology is
interesting, also the fraud aspect is.  Fraud prevention is an equally
interesting topic to ponder about.&lt;/p&gt;
&lt;p&gt;What makes frauds in payments so interesting is that there are many
different payment protocols that exist throughout the world and your
credit card is valid with almost all of them.  The fraud vectors are huge
and very often the only thing that keeps fraud rates down is a random spot
checks and common sense.&lt;/p&gt;
&lt;p&gt;The reason my interest got piqued again recently was Samsung Pay,
particularly the MST part.  MST, if you are not familiar with it, stands
for magnetic secure transmission.  The idea is that the phone emits
a magnetic field that carries the information of track 2 on a credit card
(at least in principle).  What this means is that you can go to a lot of
magstrip readers, hold your phone to it, and the reader thinks the card
was swiped.  (Assuming there are no other checks that a card is in a
slot)&lt;/p&gt;
&lt;p&gt;From a fraud perspective this seems crazy.  You scan someone's credit
card, duplicate it onto your phone and off you go.  Here are the results
of my investigation about how this is supposed to be used securely.&lt;/p&gt;
&lt;p&gt;But for this we need to cover some ground.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;a-bit-of-history&quot;&gt;
&lt;h2&gt;A Bit of History&lt;/h2&gt;
&lt;p&gt;If we don't go too far back, the earliest forms of standardized credit
card processing were based on a credit card number.  The credit card
number in itself is split into two parts.  The first six digits are the
IIN or Issuer Identification Number.  It identifies the network of the
card (MasterCard, AMEX, Visa, etc.) and might identify the bank within
that network.  The rest (the remaining 10-13 digits) are the PAN or
Primary Account Number.  IIN + PAN + expiration date + name of cardholder
are the basic requirements for making a credit card transaction.&lt;/p&gt;
&lt;p&gt;However as you can guess, since all that information is on the card there
is very little that actually protects a payment.  That's why on most of
those transactions done that way they will also ask for the signature of
the cardholder.  That signature really only plays a role if the
transaction gets disputed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-magstripe&quot;&gt;
&lt;h2&gt;The Magstripe&lt;/h2&gt;
&lt;p&gt;What makes credit cards convenient for in-store purchases is that you do
not need to write down numbers, instead you can &amp;quot;swipe&amp;quot; the card.  At
least you do that in the US ;)  When you swipe the card, the reader reads
the two tracks on the magstripe.  They are almost the same with a
different data density.  Both tracks contain: IIN + PAN, country code,
expiration date and a field for discretionary data.  It also contains the
service code.  The service code tells the terminal how the card wants to
be confirmed (does it work internationally, does it need online
verification, does it need a pin, AM only etc.)&lt;/p&gt;
&lt;p&gt;Track 1 which has higher density also contains the card holder name and
has a bit of extra space for the discretionary data.  So if you swipe the
card, you have pretty much all the info that's written on it.  What's in
the discretionary data we will cover later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;transaction-types-and-security-codes&quot;&gt;
&lt;h2&gt;Transaction Types and Security Codes&lt;/h2&gt;
&lt;p&gt;An important tool for understanding fraud and to combat it is to split the
one huge problem of credit card fraud into smaller sub-problems.  In
particular the most important split is &amp;quot;card present&amp;quot; or &amp;quot;card not
present&amp;quot; (CNP) which should indicate if the physical card was present at
the origin of the transaction or not.  So how do you do that if the data
is the same?  The earliest form of trying to combat this was the addition
of two security codes.  They have various different names (CVC, CVV, CID)
and on most cards it comes in two flavors: code 1 and code 2.  One is
stored in the magstripe in the discretionary data field, the other is
printed on the back of the card.  The idea is that you can differentiate
between transactions carrying no security code, or CVC1 or CVC2.  If
someone skimmed your card through a magstripe reader, they can get to all
data with the exception of CVC2.  If someone takes your card number via
phone they won't get your CVC1.&lt;/p&gt;
&lt;p&gt;At this point you can already see that there are different types of
transactions with different fraud parameters.  If someone does not use a
CVC code it does not mean that the transaction will be declined outright,
but it indicates that something is fishy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;emv&quot;&gt;
&lt;h2&gt;EMV&lt;/h2&gt;
&lt;p&gt;EMV is the answer for all problems and has been for a long time.  The
reason it plays little role here is because EMV in itself is secure (bad
chip implementations notwithstanding).  However EMV is still not rolled
out in the US and as such, there is a huge market where magstripe is still
something people need to deal with.  Also EMV without NFC support cannot
support MST which is the topic of discussion here.  We will come back to
that later however.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;modern-transaction-types&quot;&gt;
&lt;h2&gt;Modern Transaction Types&lt;/h2&gt;
&lt;p&gt;What should be clear now is that there are many different ways to make a
credit card transaction.  But what is that actual transaction?  At one
point you want your money.  If you get your money or not as a merchant
depends on if the transaction was fraudulent or not, and if it was, if you
had a chance to detect the fraud yourself.&lt;/p&gt;
&lt;p&gt;At one point you need to actually try to charge the issuer of the card as
a merchant.  Ideally you do it as quickly as possible.  If you do it at
the time you swipe the card, you might directly go online and check with
the card issuer if everything is in order.  This happens in most terminals
now where the terminal directly talks to the bank to record the
transaction.&lt;/p&gt;
&lt;p&gt;A more evolved version of this method is to replace the magstripe with a
EMV chip.  That chip can a challenge/response game with the payment
terminal which means that each purchase is unique and skimming the data
off the chip will not be any good for future transactions.  That again
will only work for transactions that actually use the EMV chip.  If you
just steal the magstripe and go to the US where all readers are magstripe,
this will do absolutely nothing to you.&lt;/p&gt;
&lt;p&gt;Likewise for online payments many issuing banks will use 3D Secure for
payment verification.  The idea is that the online form for your credit
card number also presents you an iframe with an extra input form by the
bank.  This allows a second factor to confirm the payment.  For instance
on my Austrian Erste Mastercard the second factor is a confirmation with a
transaction code.  The transaction will be declined unless I confirm the
payment in the iframe with a unique token sent to my phone via SMS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;tokenization-apple-pay-samsung-pay&quot;&gt;
&lt;h2&gt;Tokenization: Apple Pay / Samsung Pay&lt;/h2&gt;
&lt;p&gt;In an ideal world the magstripe would no longer exist and all terminals
would use the EMV chip and online transactions would require 3D secure.
However that's clearly not happening because the US seem to take bloody
ages to replace their infrastructure.  And not just the US.  The idea to
force everybody to newer and in this case kinda incompatible technologies
did not work for many years, so an alternative has to appear.&lt;/p&gt;
&lt;p&gt;One alternative is what's often called &amp;quot;Tokenization&amp;quot; and oddly enough, it
works by replacing the customer equipment rather then the merchant one.
Instead of making all merchants upgrade their terminals to support EMV,
you instead upgrade the customer's credit card to a phone.&lt;/p&gt;
&lt;p&gt;To understand why that's necessary you need to understand that NFC is not
always NFC and in case of Samsung it might not even involve an actual RFID
chip at all.  In Europe when you use NFC for a payment the card transmits
a response to a challenge like an EMV chip is.  The transaction gets
confirmed safely either directly by the card or in combination with the
user's PIN.  In either case the transaction gets confirmed through the
issuer.  In the United States however EMV often does not exist, so NFC has
an alternative method where it transmits the MSD (magnet stripe data)
instead.  Apple Pay can do that similar to how Samsung Pay can transmit
the very same data via magnetic pulses or NFC.&lt;/p&gt;
&lt;p&gt;So how does that make anything any more secure?  Because of tokenization.
Remember how the credit card number is split into IIN and PAN and how the
magstripe contains this extra discretionary data.  The idea is that
assuming the terminal is connected to the internet and verifies
transactions with the issuing bank the phone can play a little trick.  The
bank provides the phone with a method to &amp;quot;clone&amp;quot; the card securely onto
the phone.  At this point the phone acts as a hardware token generator.
Whenever it confirms a transaction it replaces the PAN with a uniquely
generated one and places some extra data in the discretionary data part.
Both of that information gets transmitted to the issuing bank or TSP
(token service provider, so MasterCard or Visa) where the token PAN (DPAN)
gets replaced for the real PAN.  The actual flow is a bit more complex
than that, but in the end the transaction goes through like before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-merchant-and-tokenization&quot;&gt;
&lt;h2&gt;The Merchant and Tokenization&lt;/h2&gt;
&lt;p&gt;The important part here however is the merchant and this is where things
get tricky.  With Apple Pay the transaction is always done through a form
of NFC.  Either NFC with MSD or proper EMV NFC.  It means that the
merchant explicitly agrees with this form of payment and will introduce
the system to the employees that accept the transactions.   To confirm
such a payment as a merchant you just make sure that the transaction is
made from an iphone and everything else &amp;quot;should be secure&amp;quot;.  The only
case of fraud is if someone managed to get a card on their phone which
they were not entitled too, but that's the bank's problem because they
should make that flow secure.&lt;/p&gt;
&lt;p&gt;The situation however is different with Samsung Pay and the reason for
that is MST.  As Samsung Pay works with non NFC POS terminals the question
is how a merchant can differ a phone that uses Tokenization properly or
a fraudulent phone that just relays the magstripe tracks from a stolen
card.  In fact, the merchant can't really do anything there because the
transaction is as far as I know indistinguishable from what is shown on
the terminal.  The only party that could reliably block the transaction is
the issuer or TSP.  This interestingly enough can be solved by supporting
EMV :)&lt;/p&gt;
&lt;p&gt;A modern card (one that would be used with Samsung Pay) could come with
magstripe and EMV and the magstripe could indicate that the card prefers
the chip over swiping.  In this case you could still clone the magstripe
into your phone, but the transaction would be declined if it used neither
tokenization nor the chip.  For this to work however, all merchants need
to support EMV which currently is not the case in the US.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-non-emv-apocalypse-of-2015&quot;&gt;
&lt;h2&gt;The Non EMV Apocalypse of 2015&lt;/h2&gt;
&lt;p&gt;Something interesting is going to happen end of October 2015.  The US will
finally start to force merchants to upgrade to terminals that support EMV.
From that point onwards any card that has an EMV chip, but the chip was
not used for the transaction and that transaction was fraudulent will
become the merchant's problem.  Assuming Samsung Pay becomes widespread
it could make this liability shift a bit more painful because as a
merchant you can not tell a good Samsung phone from a bad Samsung phone,
whereas you could probably tell an original credit card with embossed
numbers from a fake card with mismatching numbers and making your own
embossed cards with all the cards you skimmed is a lot more work than to
clone a card into a phone.&lt;/p&gt;
&lt;p&gt;So maybe EMV will become a bigger thing as a result of Samsung Pay even if
the technology in itself has some potential for magstripe abuse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;death-of-msd&quot;&gt;
&lt;h2&gt;Death of MSD&lt;/h2&gt;
&lt;p&gt;Interestingly enough the roll-out of EMV in the US might have some bad
aspects for European travellers and others.  Our cards have a very
different fraud profile than American ones because domestic transactions
are done via EMV for nearly thirty nears now, with the liability shift
having happened more than 10 years ago.  In Europe cards prefer chip and
pin for terminals and NFC is only supported for EMV transactions.&lt;/p&gt;
&lt;p&gt;The US terminals might use the MSD data for NFC however.  So as a European
customer you might see an NFC logo somewhere, but because it uses NFC MSD
your European bank will decline the transaction because they only allow
EMV based NFC.  This is to be seen however, right now NFC terminals in the
US are still not very widespread and the liability shift did not happen
yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;safety-of-samsung-pay&quot;&gt;
&lt;h2&gt;Safety of Samsung Pay&lt;/h2&gt;
&lt;p&gt;So is it safe?  Implemented correctly with tokenization Samsung Pay seems
pretty safe.&lt;/p&gt;
&lt;p&gt;Will merchants like it?  If they have EMV terminals, they will not have a
problem with it.  If they only have legacy terminals without chip support,
they might become fraud magnets and they have little method to defend
themselves against it.&lt;/p&gt;
&lt;p&gt;Will the magstripe finally die?  Seems like magstripe found a second
coming in the US thanks to tokenization, MSD NFC and maybe even Samsung
Pay but most likely only as a transitional technology for EMV.&lt;/p&gt;
&lt;p&gt;I'm actually quite interested in if there are means of detecting a relayed
magstripe track for a merchant.  If someone knows, please let me know and
I will amend the article to reflect that.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">The End of Safe Harbor and a Scary Path Forward</title>
    <id>http://lucumr.pocoo.org/2015/10/6/end-of-safe-harbor</id>
    <updated>2015-10-06T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2015/10/6/end-of-safe-harbor" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;In the Austrian internets &lt;a class=&quot;reference external&quot; href=&quot;http://www.politico.eu/wp-content/uploads/2015/10/schrems-judgment.pdf&quot;&gt;the news about the end of the safe harbor act&lt;/a&gt;
has been universally welcomed it seems.  Especially from non technical
folks that see this as a big win for their privacy.  Surprisingly many
technical people also welcomed this ruling.  And hey, if Snowden says
that's a good ruling, who will argue against.&lt;/p&gt;
&lt;p&gt;I'm very torn about this issue because from a purely technical point of
view it is very tricky to follow the ruling and by keeping to the current
state of our data center environments in the light of some other rulings.&lt;/p&gt;
&lt;p&gt;I'm as disappointed as everybody else that government agencies are
operating above what seems reasonable from a privacy point of view, but we
should be careful about what how this field develops.  Fundamentally
sharing information on the internet and the right to privacy stand in
conflict to each other and the topic is a lot more complex than to just
demand more privacy without considering what this means on a technical
level.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;what-was-safe-harbor&quot;&gt;
&lt;h2&gt;What Was Safe Harbor?&lt;/h2&gt;
&lt;p&gt;The US-EU Safe Harbor laws declared US soil as a safe location for user
data to fulfill the European Privacy Directive.  In a nutshell: this was
the only reason any modern internet service could keep their primary user
data in the United States on services like Amazon EC2 or Heroku.&lt;/p&gt;
&lt;p&gt;In essence Safe Harbor was a self assessment that an American company
could sign to make itself subject to the European Data Protection
Directive.  At least in principle.  Practically very few US companies
cared about privacy which is probably a big reason why we ended up in this
situation right now.  The second one is the NSA surveillance but I want to
cover this in particular separately a bit later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-changed&quot;&gt;
&lt;h2&gt;What Changed?&lt;/h2&gt;
&lt;p&gt;Maximillian Schrems, an Austrian citizen, has started an investigation
into Facebook and its data deletion policies a while ago and been
engaging with the Irish authorities on that matter ever since.  The Irish
rejected the complaint because they referred to the Safe Harbor act.  What
changed now is that the European Court of Justice ruled the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In today’s judgment, the Court of Justice holds that the existence of
a Commission decision finding that a third country ensures an adequate
level of protection of the personal data transferred cannot eliminate
or even reduce the powers available to the national supervisory
authorities under the Charter of Fundamental Rights of the European
Union and the directive.&lt;/p&gt;
&lt;p&gt;[…]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For all those reasons, the Court declares the Safe Harbour Decision
invalid&lt;/strong&gt;. This judgment has the consequence that the Irish supervisory
authority is required to examine Mr Schrems’ complaint with all due
diligence and, at the conclusion of its investigation, is to decide
whether, pursuant to the directive, transfer of the data of Facebook’s
European subscribers to the United States should be suspended on the
ground that that country does not afford an adequate level of
protection of personal data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The detailed ramifications of this are a bit unclear, but if you were
relying on Safe Harbor so far, you probably have to move servers now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;why-was-safe-harbor-useful&quot;&gt;
&lt;h2&gt;Why Was Safe Harbor Useful?&lt;/h2&gt;
&lt;p&gt;So if you take the internet three years ago (before the Ukrainian
situation happened) the most common of legally running an international
internet platform as a smallish startup was to put the servers somewhere
in the US and fill out the safe harbor self assessment every 12 months.&lt;/p&gt;
&lt;p&gt;To understand why that was a common setup you need to consider why it was
chosen in the first place.  The European Data Protection Directive came
into effect quite a long time ago.  It's dated for the end of 1995 and
required user data to be either stored in EFTA states or optionally in
another country if it can be ensured that the same laws are upheld.  This
is what safe harbor did.  In absence of this, all data from European
citizens must be stored on European soil.&lt;/p&gt;
&lt;p&gt;After the Ukrainian upraising and after Crimea fell to the Russian
Federation a few things changed.  International sanctions were put up
against Russia and Russia decided to adopt the same provision as the
European Union: Russian citizen's data has to be stored on Russian
servers.  This time however without an option to get exceptions to this
rule.&lt;/p&gt;
&lt;p&gt;It's true that the US do not yet have a provision that requires US citizen
data to be stored in the States, but this is something that has been
discussed in the past and it's a requirement for working with the
government already.  However with both Russia and Europe we now have two
large international players that set the precedent and it can only get
worse from here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;privacy-vs-data-control&quot;&gt;
&lt;h2&gt;Privacy vs Data Control&lt;/h2&gt;
&lt;p&gt;The core of the issue currently is that data is considered power and
privacy is a secondary issue there.  While upholding privacy is an
important and necessary goal, we need to be careful to not forget that
the European countries are not any better.  While it's nice to blame the
NSA for world wide surveillance programs, we Europeans have our own
governmental agencies that act with very little supervision and especially
in the UK operate on the same invasiveness as in the US.&lt;/p&gt;
&lt;p&gt;A European cloud provider will have to comply with local law enforcement
just as much as an American cloud provider will have to be with federal US
one.  The main difference just being the institutions involved.&lt;/p&gt;
&lt;p&gt;The motivation for the Russian government is most likely related to law
enforcement over privacy.  I'm almost sure they care more about keeping
certain power over companies doing business in Russia to protect
themselves against international sanctions than their citizens privacy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;data-locality-and-personal-data&quot;&gt;
&lt;h2&gt;Data Locality and Personal Data&lt;/h2&gt;
&lt;p&gt;So what exactly is the problem with storing European citizens data in
Europe, data of Americans in the states and the data of Russians somewhere
in the Russian Federation?  Unsurprisingly this is a very hard problem to
solve if you want to allow people from those different countries to
interact with each other.&lt;/p&gt;
&lt;p&gt;Let's take a hypothetical startup here that wants to build some sort of
Facebook for climbers.  They have a very niche audience but they attract
users from all over the world.  Users of the platform can make
international friendships, upload their climbing trips, exchange messages
with each other and also purchase subscriptions for &amp;quot;pro&amp;quot; features like
extra storage.&lt;/p&gt;
&lt;p&gt;So let's say we want to identify Russians, Americans and Europeans to keep
the data local to each of their jurisdictions.  The easy part is to set up
some servers in all of those countries and make them talk to each other.
The harder part is to figure out which user belongs to which jurisdiction.
One way would be to make users upload their passport upon account creation
and determine their main data center by their citizenship.  This obviously
would not cover dual citizens.  A Russian-American might fall into two
shards on a legal basis but they would only opt into one of them.  So
let's ignore those outliers.  Let's also ignore what happens if the
citizenship of a user changes because that process is quite involved and
usually takes a few years and does not happen all that commonly.&lt;/p&gt;
&lt;p&gt;Now that we know where users are supposed to be stored, the question is
how users are supposed to interact with each other.  While distributed
databases exist, they are not magic.  Sending information from country to
country takes a lot of time so operations that affect two users from
different regions will involve quite a bit of delay.  It also requires
that the data temporarily crosses into another region.  So if an American
user sends data to a Russian user, that information will have to be
processed somewhere.&lt;/p&gt;
&lt;p&gt;The problem however is if the information is not temporarily in flux.  For
instance sending a message from Russia to America could be seen as falling
as being a duplicated message that is both intended for the American and
Russian jurisdiction.  Tricker it gets with information that cannot be
directly correlated to a user.  For instance what your friends are.
Social relationships can only be modelled efficiently if the data is
sufficiently local.  We do not have magic in computing and we are bound to
the laws of physics.  If your friends are on the other side of the world
(which nowadays the most likely are) it becomes impossible to handle.&lt;/p&gt;
&lt;p&gt;Credit card processing also falls in to this.  Just because you are
British does not mean your credit card is.  Many people live in other
countries and have many different bank accounts.  The data inherently
flows from system to system to clear the transaction.  Our world is very
connected nowadays and the concept of legal data locality is very much at
odds with the realities of our world.&lt;/p&gt;
&lt;p&gt;The big cloud services are out, because they are predominantly placed in
the US.  Like it or not, Silicon Valley is many, many years ahead of what
European companies can do.  While there are some tiny cloud service
providers in Europe, they barely go further than providing you with
elastically priced hardware.  For European startups this is a significant
disadvantage over their American counterparts when they can no longer use
American servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;privacy-not-data-locality&quot;&gt;
&lt;h2&gt;Privacy not Data Locality&lt;/h2&gt;
&lt;p&gt;The case has been made that this discussion is not supposed to be about
data locality but about privacy.  That is correct for sure, but
unfortunately data centers fall into the jurisdiction of where they are
placed.  Unless we come up with a rule where data centers are placed on
international soil where they computers within them are out of
government's reach, a lot of this privacy discussion is dishonest.&lt;/p&gt;
&lt;p&gt;What if the bad player are the corporates and now the governments?  Well
in that case that was the whole point of safe harbor to begin with: to
enforce stricter privacy standards on foreign corporations for European
citizens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;how-to-comply&quot;&gt;
&lt;h2&gt;How to Comply?&lt;/h2&gt;
&lt;p&gt;Now the question is how to comply with what this is going into.  These new
rules are more than implementable for Facebook size corporations, but it
is incredibly hard to do for small startups.  It's also not quite clear
what can and what cannot be done with data now.  At which point data is
considered personal and at which point it is not, is something that
differs from country to country and is in some situations even not
entirely clear.  For instance according to the UK DPA user relationships
are personal information if they have &amp;quot;biographical significance&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;a-disconnected-world&quot;&gt;
&lt;h2&gt;A Disconnected World&lt;/h2&gt;
&lt;p&gt;What worries me is that we are taking a huge step back from an
interconnected world where people can share information with each other,
to more and more incompatible decentralization.  Computer games
traditionally have already enforced shards where people from different
countries could not play together because of legal reasons.  For instance
many of my Russian friends could never play a computer game with me,
because they are forced to play in their own little online world.&lt;/p&gt;
&lt;p&gt;Solutions will be found, and this ruling will probably have no significance
for the average user.  Most likely companies will ignore the ruling
entirely anyways because nobody is going to prosecute anyone unless they
are Facebook size.  However that decisions of this magnitude are made
without considering the technical feasibility is problematic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-workaround&quot;&gt;
&lt;h2&gt;The Workaround&lt;/h2&gt;
&lt;p&gt;For all intents and purposes nothing will really change for large
companies like Facebook anyways.  They will have their lawyers argue that
their system cannot be implemented in a way to comply with forcing data to
live in Europe and as such will refer to Article 26 of the Data Protection
Directive which states that personal data to an untrusted third country on
either a user given consent to this or there being a technical necessity
for fulfilling the contract between user and service provider.  The TOS
will change, the lawyers will argue and in the end the only one who will
really have to pick up the shards are small scale companies which are
already overwhelmed by all the prior rules.&lt;/p&gt;
&lt;p&gt;Today does not seem to be a good day for small cloud service providers.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">The Lazy User is OpenID's Security Issue</title>
    <id>http://lucumr.pocoo.org/2010/8/18/the-lazy-user-is-openid-s-security-issue</id>
    <updated>2010-08-18T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2010/8/18/the-lazy-user-is-openid-s-security-issue" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;For &lt;a class=&quot;reference external&quot; href=&quot;http://lincolnloop.com/&quot;&gt;Lincoln Loop&lt;/a&gt; I am doing more with the
Facebook API currently than is good for me. Now Facebook is not using
OpenID but OAuth, but the core issue is the same and it becomes a little
bit more obvious when you're doing OAuth based sign in. The problem is
that users are lazy, and so are developers. Developers are especially
lazy because when they have to sign into their development application
multiple times a day for testing the authentication module you will take
every measure possible to save time. And in my case it usually involves
remembering the password for my OpenID for the session. But even without
remembering the actual password of my OpenID account, it still means
that my OpenID provider remembers the authentication request for my
application and will skip the screen the next time the application
requested authentication until the browser closes.&lt;/p&gt;
&lt;p&gt;Enter OpenID's (and OAuth's) security problem: the “remember me for this
computer button”.&lt;/p&gt;
&lt;p&gt;For as long as I have to do with websites and authentication systems the
following three rules were widely followed by application developers:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;To change your password you have to enter your old password for
confirmation.&lt;/li&gt;
&lt;li&gt;To change your email address for an account you have to enter
your password or old email address.&lt;/li&gt;
&lt;li&gt;To delete your account you have to confirm per email or at least
old password, sometimes even a combination of both.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice one thing? All these steps require you to enter a password. Now
with OpenID / OAuth we don't have a password we could enter on that
website, what we could do instead is redirecting to the OpenID provider
/ OAuth service to let the user confirm the action. Unfortunately these
services will remember you. If you are a careful user you will not let
the service there remember your password for general authentication, but
it will remember you when you come back in the same browser session.&lt;/p&gt;
&lt;p&gt;So say you are logging in on your computer and not close the browser.
Leave the notebook unattended for a few seconds and someone else comes
to the PC to delete your account for example (or do something else of
destructive nature). Even if the application does a OpenID auth check to
delete the account (which no website I tested does) the OpenID provider
will have remembered you (at least the ones I tried all do). Bam, you
lost your account.&lt;/p&gt;
&lt;p&gt;Deleting here is not really the problem, just think about the OpenID
equivalent of password change: linking another OpenID account to your
profile. Most websites support more than one OpenID identity. To add
another OpenID identity URL to a website you most of the time don't even
have to confirm from an old one. It will just happily accept a second
OpenID identity URL. And again, even if it would check for the old one,
your provider would still have you remembered.&lt;/p&gt;
&lt;p&gt;This problem is unique to OpenID because OAuth services usually do not
support more than one connection because the OAuth based login mechanism
is customized for each website. Signing in with Twitter is a completely
different procedure than signing in with Facebook. You usually can't
hook a different twitter account to the same user account that was
already linked to Facebook or the other way round.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&quot;reference external&quot; href=&quot;http://wiki.openid.net/OpenID-Security-Best-Practices&quot;&gt;OpenID Security Best Practices&lt;/a&gt; only mention
that you have to check the added OpenID identity URLs if they are
controlled by the user by passing it trough the authentication
handshake, but it does not mention anywhere that you should check at
least one of the already authenticated for confirmation. And as
mentioned above, if the OpenID provider remembers you that would not
solve anything here.&lt;/p&gt;
&lt;p&gt;I might be missing something completely obvious, but there does not seem
to be a way to force the OpenID provider to force the user to approve
the authentication again (same for OAuth). The OpenID PAPE extension
does provide some metadata for the application to check if the
authentication happened via password or a hardware device but as far as
I can see, it also does not provide a way to force the approval screen
on the user again. The PAPE extension however does provide a way to
specify a maximum lifetime for the approval in advance (like a minute).
That would certainly help to fight that problem, but then you would have
to do that on the initial sign in and not when you want to force the
approval from the user when adding a second OpenID for example.&lt;/p&gt;
&lt;p&gt;I might be completely wrong with what I just wrote above, but from my
experience existing systems are not providing a way to force this
approval screen on users or it's just not obviously documented so that
nobody is using it. If there is a way, please let me know. Either way I
will be very careful to not leave my notebook unattended for a second
when a browser is still open.&lt;/p&gt;
</content>
  </entry>
</feed>

