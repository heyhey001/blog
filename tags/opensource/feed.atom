<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Armin Ronacher's Thoughts and Writings</title>
  <id>http://lucumr.pocoo.org/feed.atom</id>
  <updated>2017-06-05T00:00:00Z</updated>
  <link href="http://lucumr.pocoo.org/" />
  <link href="http://lucumr.pocoo.org/feed.atom" rel="self" />
  <subtitle type="text">Armin Ronacher's personal blog about programming, games and random thoughts that come to his mind.</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Diversity in Technology and Open Source</title>
    <id>http://lucumr.pocoo.org/2017/6/5/diversity-in-technology</id>
    <updated>2017-06-05T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2017/6/5/diversity-in-technology" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;It's a topic I generally do not talk much about but a recent &lt;a class=&quot;reference external&quot; href=&quot;https://www.wired.com/2017/06/diversity-open-source-even-worse-tech-overall/&quot;&gt;Wired
Article&lt;/a&gt;
made me think about finally writing down my thoughts on this topic.  The
title of that article was “Diversity in Open Source Is Even Worse Than in
Tech Overall” and that is undoubtedly true.&lt;/p&gt;
&lt;p&gt;When you start an Open Source project today, in particular one which is
further disconnected from frontend technologies there is a very high
chance the organic community development will be everything but diverse.
The highest form of diversity you can naturally expect to form is people
from different countries but even there you might have a bias.&lt;/p&gt;
&lt;p&gt;There are many arguments that can be had about this, but it's my personal
opinion that at least in the longer run it's not healthy for a project or
a community to lack diversity.  I think it's natural for like-minded people
to group together but the longer that process continues the more of an
echo chamber it becomes.  What's worse is the longer you wait to try to
get people involved in the project that would naturally not try to join
the harder it will be.  When your team is 4 men, the first woman which
joins will make a significant impact.  When your team is already 20 men
you need to get a lot more women on board to have the same impact.  But
it's not just gender that is making a difference, it's in particular
cultural backgrounds.  The reason Unicode is hard is not because Unicode
is hard, but because a lot of projects start out with a lack of urgency
since many of the original developers might live in ASCII constrained
environments (It took emojis to become popular for people to develop
a general understanding of why Unicode is useful in the western world).&lt;/p&gt;
&lt;p&gt;A lot of the criticism that comes against the diversity movement is that
it undermines the idea of “meritocracy” and that it does not mirror the
realities in the real world by artificially balancing teams.  Both of
those arguments are weird in a way because they are very hard to defend
if you look at larger parts of society.  Tech for recent historical
reasons is very male heavy but society is not.  Meritocracy in many ways
is just sourcing the best from the pool of naturally available people
in your environment.  Sure by some measurements you will get the best
but is the best really what is lacking in an Open Source project?  We
don't need more of the best, we need more of what is actually missing
and what is missing in many ways is not more strong alpha males but
people that are good in de-escalating arguments in bug trackers and
mailing lists, people that take care of documentations, people that
make software work in new cultural contexts (localization, globalization,
internationalization, etc.), people that care about user experience
etc.&lt;/p&gt;
&lt;p&gt;If you look at Open Source projects in comparison with commercial
software you can quickly see where this lack of diversity is noticeable
the most: consumer applications.  While we're doing reasonably well with
low level technology that never translated well to things that consumers
care about.  The most successful consumer products that came out of the
Open Source community are probably things like The Gimp.  A project that
not only has a ridiculous name for a consumer product, but also one that
is everything but user friendly.  If you do a Google auto complete search
for “Why is Gimp” it completes to “slow [on mac]”, “bad”, “complicated”
and “unintuitive”.  In many ways I think the answer is probably a
reflection of the developer community lacking focus in some key areas.
There is no reason that Open Source software has to be user unfriendly.&lt;/p&gt;
&lt;p&gt;In particular some of the infamous Open Source communities like the
Linux are (almost?) proud of their harsh culture.  Often documentation
is so bad that it became a rite of passage to decipher it or fill in
the blanks by reading the code.&lt;/p&gt;
&lt;p&gt;The only way to achieve the (in my mind) necessary change in Open Source
and tech in general is to go out of ones way to involve people that do
not come naturally.&lt;/p&gt;
&lt;p&gt;So when someone cancels a conference because the speaker lineup after a
blind selection was 100% male it just shows how bad the imbalance in the
developer community is.  It's not unfair to try to artificially bring
balance a conference because the fact that the community is this
imbalanced to that extend is a problem that needs fixing and will not fix
itself naturally.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Micropackages and Open Source Trust Scaling</title>
    <id>http://lucumr.pocoo.org/2016/3/24/open-source-trust-scaling</id>
    <updated>2016-03-24T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2016/3/24/open-source-trust-scaling" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;Like everybody else this week &lt;a class=&quot;reference external&quot; href=&quot;https://www.getsentry.com/&quot;&gt;we&lt;/a&gt; had fun
with &lt;a class=&quot;reference external&quot; href=&quot;http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/&quot;&gt;the pad-left disaster&lt;/a&gt;.
We're from the Python community and our exposure to the node ecosystem is
primarily for the client side.  We're big fans of the ecosystem that
develops around react and as such quite a bit of our daily workflow
involves npm.&lt;/p&gt;
&lt;p&gt;What frustrated me personally about this conversation that took place over
the internets about the last few days however has nothing to do with npm,
the guy who deleted his packages, any potential trademark disputes or the
supposed inability of the JavaScript community to write functions to pad
strings.  It has more to do with how the ecosystem evolving around npm has
created the most dangerous and irresponsible environment which in many
ways leaves me scared.&lt;/p&gt;
&lt;p&gt;My opinion very quickly went from “&lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/mitsuhiko/status/712429716356124673&quot;&gt;Oh that's funny&lt;/a&gt;” to
“&lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/mitsuhiko/status/712430645671280640&quot;&gt;This concerns me&lt;/a&gt;”.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;dependency-explosion&quot;&gt;
&lt;h2&gt;Dependency Explosion&lt;/h2&gt;
&lt;p&gt;When &amp;quot;pad left&amp;quot; disaster stroke I had a brief look at Sentry's dependency
tree.  I should probably have done that before but for as long things work
you don't really tend to do that.  At the time of writing we have 39
dependencies in our &lt;tt class=&quot;docutils literal&quot;&gt;package.json&lt;/tt&gt;.  These dependencies are strongly
vetted in the sense that we do not include anything there we did not
investigate properly.  What however we cannot do, is also to investigate
every single dependency there is.  The reason for this is how these node
dependencies explode.  While we have 39 direct dependencies, we have more
than a thousand dependencies in total as it turns out.&lt;/p&gt;
&lt;p&gt;To give you a comparison: the Sentry backend (Sentry server) has 45 direct
dependencies.  If you resolve all dependencies and install them as well
you end up with a total of 65 packages which is significantly less.  We
only get a total of 20 packages over what we depend on ourselves.  The
typical Python project would be similar.  For instance the Flask framework
depends on three (soon to be four with Click added) other packages:
Werkzeug, Jinja2 and itsdangerous.  Jinja2 additionally depends on
MarkupSafe.  All of those packages are written by the same author however
but split into rough responsibilities.&lt;/p&gt;
&lt;p&gt;Why is that important?&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;dependencies incur cost.&lt;/li&gt;
&lt;li&gt;every dependency is a liability.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-cost-of-dependencies&quot;&gt;
&lt;h2&gt;The Cost of Dependencies&lt;/h2&gt;
&lt;p&gt;Let's talk about the cost of dependencies first.  There are a few costs
associated with every dependency and most of you who have been programming
for a few years will have encountered this.&lt;/p&gt;
&lt;p&gt;The most obvious costs are that packages need to be downloaded from
somewhere.  This corresponds to direct cost.  The most shocking example I
encountered for this is the &lt;a class=&quot;reference external&quot; href=&quot;https://www.npmjs.com/package/isarray&quot;&gt;isarray&lt;/a&gt;
npm package.  It's currently being downloaded short of 19 million times a
month from npm.  The entire contents of that package can fit into a single
line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;[object Array]&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However in addition to this stuff there is a bunch of extra content in it.
You actually end up downloading a 2.5KB tarball because of all the extra
metadata, readme, license file, travis config, unittests and makefile.  On
top of that npm adds 6KB for its own metadata.  Let's round it to 8KB that
need to be downloaded.  Multiplied with the total number of downloads last
month the node community downloaded 140GB worth of isarray.  That's half
of the monthly downloads of what Flask achieves measured by size.&lt;/p&gt;
&lt;p&gt;The footprint of Sentry's server component is big when you add up all the
dependencies.  Yet the entire installation of Sentry from pypi takes about
30 seconds including compiling lxml.  Installing the over 1000
dependencies for the UI though takes I think about 5 minutes even though
you end up with a fraction of the code afterwards.  Also the further you
are away from the npm CDN node the worse the price for the network
roundtrip you pay.  I threw away my node cache for fun and ran npm install
on Sentry.  Takes about 4.5 minutes.  And that's with good latency to npm,
on a above average network connect and a top of the line Macbook Pro with
an SSD.  I don't want to know what the experience is for people on
unreliable network connections.  Afterwards I end up with 165MB in
&lt;cite&gt;node_modules&lt;/cite&gt;.  For comparison the entirety of the Sentry's backend
dependencies on the file system and all metadata is 60MB.&lt;/p&gt;
&lt;p&gt;When we have a thousand different dependencies we have a thousand
different licenses and copyright files.  Really makes me wonder what the
license screen of a node powered desktop application would look like.  But
it's not also a thousand licenses, it's a huge number of independent
developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;trust-and-auditing&quot;&gt;
&lt;h2&gt;Trust and Auditing&lt;/h2&gt;
&lt;p&gt;This leads me to what my actual issue with micro-dependencies is: we do not
have trust solved.  Every once in a while people will bring up how we all
would be better off if we PGP signed our Python packages.  I think what a
lot of people miss in the process is that signatures were never a
technical problem but a trust and scaling problem.&lt;/p&gt;
&lt;p&gt;I want to give you a practical example of what I mean with this.  Say you
build a program based on the Flask framework.  You pull in a total of 4-5
dependencies for Flask alone which are all signed off my me.  The attack
vector to get untrusted code into Flask is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;get a backdoor into a pull request and get it merged&lt;/li&gt;
&lt;li&gt;steal my credentials to PyPI and publish a new release with a backdoor&lt;/li&gt;
&lt;li&gt;put a backdoor into one of my dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of those attack vectors I cover.  I use my own software, monitor what
releases are PyPI which is also the only place to install my software
from.  I 2FA all my logins where possible, I use long randomly generated
passwords where I cannot etc.  None of my libraries use a dependency I do
not trust the developer of.  In essence if you use Flask you only need to
trust me to not be malicious or idiotic.  Generally by vetting me as a
person (or maybe at a later point an organization that releases my
libraries) you can be reasonably sure that what you install is what you
expect and not something dangerous.  If you develop large scale Python
applications you can do this for all your dependencies and you end up with
a reasonably short list.  More than that.  Because Python's import system
is very limited you end up with only one version of each library so when
you want to go in detail and sign off on releases you only need to do it
once.&lt;/p&gt;
&lt;p&gt;Back to Sentry's use of npm.  It turns out we have four different versions
of the same query string library because of different version pinning by
different libraries.  Fun.&lt;/p&gt;
&lt;p&gt;Those dependencies can easily end up being high value targets because of
how few people know about them.  juliangruber's &amp;quot;isarray&amp;quot; has 15 stars on
github and only two people watch the repository.  It's downloaded 18
million times a month.  Sentry depends on it 20 times.  14 times it's a
pin for &lt;tt class=&quot;docutils literal&quot;&gt;0.0.1&lt;/tt&gt;, once it's a pin for &lt;tt class=&quot;docutils literal&quot;&gt;^1.0.0&lt;/tt&gt; and 5 times for
&lt;tt class=&quot;docutils literal&quot;&gt;~1.0.0&lt;/tt&gt;.  Any pin for anything other than a strict version match is a
disaster waiting to happen if someone would manage to push out a point
release for it by stealing juliangruber's credentials.&lt;/p&gt;
&lt;p&gt;Now one could argue that the same problem applies if people hack my
account and push out a new Flask release.  But I can promise you I will
notice a release from one of my ~5 libraries because of a) I monitor those
packages, b) other people would notice a release.  I doubt people would
notice a new isarray release.  Yet &lt;tt class=&quot;docutils literal&quot;&gt;isarray&lt;/tt&gt; is not sandboxed and runs
with the same rights as the rest of the code you have.&lt;/p&gt;
&lt;p&gt;For instance sindresorhus &lt;a class=&quot;reference external&quot; href=&quot;https://www.npmjs.com/~sindresorhus&quot;&gt;maintains 827 npm packages&lt;/a&gt;.  Most of which are probably one
liners.  I have no idea how good his opsec is, but my assumption is that
it's significantly harder for him to ensure that all of those are actually
his releases than it is for me as I only have to look over a handful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;signatures&quot;&gt;
&lt;h2&gt;Signatures&lt;/h2&gt;
&lt;p&gt;There is a common talk that package signatures would solve a lot of those
issues but at the end of the day because of the trust we get from PyPI and
npm we get very little extra security from a package signature compared to
just trusting the username/password auth on package publish.&lt;/p&gt;
&lt;p&gt;Why package signatures are not the holy grail was &lt;a class=&quot;reference external&quot; href=&quot;https://caremad.io/2013/07/packaging-signing-not-holy-grail/&quot;&gt;covered by Donald
Stufft&lt;/a&gt;
aka Mr PyPI.  You should definitely read that since he's describing the
overarching issue much better than I could ever do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;future-of-micro-dependencies&quot;&gt;
&lt;h2&gt;Future of Micro-Dependencies&lt;/h2&gt;
&lt;p&gt;To be perfectly honest:  I'm legitimately scared about node's integrity
of the ecosystem and this worry does not go away.  Among other things I'm
using keybase and keybase uses unpinned node libraries left and right.
keybase has 225 node dependencies from a quick look.  Among those many
partially pinned one-liner libraries for which it would be easily enough
to roll out backdoor update if one gets hold of credentials.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: it has been pointed out that keybase shrinkwrapped in the node
client and that the new client is written in Go.&lt;/em&gt; &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/maxtaco/status/713037656255557632&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If micro-dependencies want to have a future then something must change in
npm.  Maybe they would have to get a specific tag so that the system can
automatically run automated analysis to spot unexpected updates.  Probably
they should require a CC0 license to simplify copyright dialogs etc.&lt;/p&gt;
&lt;p&gt;But as it stands right now I feel like this entire thing is a huge
disaster waiting to happen and if you are not using node shrinkwrap yet
you better get started quickly.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">The Sentry in my Life</title>
    <id>http://lucumr.pocoo.org/2015/3/30/sentry-in-my-life</id>
    <updated>2015-03-30T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2015/3/30/sentry-in-my-life" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;The idea of converting an Open Source project into a company is something
that excites many of us, but very often this is something that will not
succeed.  Often times it's because many Open Source projects fill a void
that exists largely because in that space no money can be made.  This is
especially true for my projects which are largely developer facing
utilities for which it's impossible to find a market.&lt;/p&gt;
&lt;p&gt;This is something I was always more than happy with and I compensated this
with my day job.  At Fireteam I work on things that interest me and pay
me.  In this case online infrastructure for computer games.  This has
given me both the opportunity to keep hacking on my own Open Source
libraries in my free time (and partially on company time) and without
Fireteam many of my projects would be in a worse state now.&lt;/p&gt;
&lt;p&gt;Which is why I'm very excited to be able to join a company that makes
money while combining my passion (which is building tools and libraries
that make developer's lifes better) with my favourite development model
(which is Open Source) by joining &lt;a class=&quot;reference external&quot; href=&quot;https://getsentry.com/&quot;&gt;Sentry&lt;/a&gt; as a
partner.&lt;/p&gt;
&lt;p&gt;Sentry is one of the tools that have stuck with me since shortly after its
inception.  Every single project I made over the last few years which had
real users, involved monitoring through Sentry in one form or another.
It's a pretty simple concept: instead of logging to boring files, you send
your incidents to Sentry, it stores them, groups them up, notifies you if
necessary and renders them to you.&lt;/p&gt;
&lt;p&gt;I've known David Cramer for many years now (the original creator of
Sentry).  There was a lot of talk about us working together in the past,
but things never quite worked out.  Now that he and his co-founder Chris
Jennings decided to scale up the Sentry operations and do this full-time I
decided to join them in their endeavours.&lt;/p&gt;
&lt;p&gt;Initially we're going to focus on making Sentry the best that it can be,
but you can probably expect some cool Open Source technology coming from
us in the near future.&lt;/p&gt;
</content>
  </entry>
</feed>

