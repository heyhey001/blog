<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Armin Ronacher's Thoughts and Writings</title>
  <id>http://lucumr.pocoo.org/feed.atom</id>
  <updated>2015-02-17T00:00:00Z</updated>
  <link href="http://lucumr.pocoo.org/" />
  <link href="http://lucumr.pocoo.org/feed.atom" rel="self" />
  <subtitle type="text">Armin Ronacher's personal blog about programming, games and random thoughts that come to his mind.</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Apologies to Github</title>
    <id>http://lucumr.pocoo.org/2008/9/20/apologies-to-github</id>
    <updated>2008-09-20T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2008/9/20/apologies-to-github" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;A few days ago I wrote a &lt;a class=&quot;reference external&quot; href=&quot;/2008/9/14/bitbucket-is-no-bit-bucket/&quot;&gt;review about bitbucket&lt;/a&gt;
and one part of the blog post was about how I was annoyed by the GitHub
admins forcing people into using GitHub for hosting. Here the section in
all its shaming glory:&lt;/p&gt;
&lt;blockquote&gt;
When GitHub appeared on the internets for the first time, there was
a short period of time when I saw the admins of that site jump into
many IRC channels of projects that were using git already to switch
to GitHub for hosting.&lt;/blockquote&gt;
&lt;p&gt;Turns out that either my mind played a trick on me, or I screwed up
earlier and mixed up persons. Fortunately IRC logs exist to disprove
what I wrote earlier.&lt;/p&gt;
&lt;p&gt;In the discussions I could grep in my IRC logs it were always non GitHub
administrators that tried to convince the project owners to switch to
GitHub and in one situation it was one GitHub author that &lt;em&gt;briefly&lt;/em&gt;
joined the discussion to explain the benefits of GitHub.&lt;/p&gt;
&lt;p&gt;So I screwed up and my negative bias towards GitHub was mostly based on
something my mind made up. Because of that I want to apologise to the
GitHub team for the false claims I made earlier. I hope I can somehow
made up for that somehow.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Git and Mercurial Branching</title>
    <id>http://lucumr.pocoo.org/2010/8/17/git-and-mercurial-branching</id>
    <updated>2010-08-17T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2010/8/17/git-and-mercurial-branching" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;People using my stuff will have noticed a trend that I started using git
(and github) for some of my newer projects. Now there are two parts of
the story. One is obviously github which is currently unbeatable. Not
necessarily due to the size of the community but that it gives you a
very neat way to look at what patches are available all over the place
(I'm referring to the fork queue). But the other reason is that despite
all the hate for git I have, it has grown on me as the tool that does
the job better.&lt;/p&gt;
&lt;p&gt;This however is a shame because if you remove the github component and
some other addons like the hub command, hg is the superior tool. If you
would download both tools and compare what they can do out of the box
with the stuff they ship, hg has the better user interface and better
tools for collaboration. These tools are essentially &lt;cite&gt;hg incoming&lt;/cite&gt;, &lt;cite&gt;hg
outgoing&lt;/cite&gt; and the &lt;cite&gt;hg serve&lt;/cite&gt; command. Additionally the zeroconf
extension is pretty awesome when you collaborate locally.&lt;/p&gt;
&lt;p&gt;Just to give you an example: Georg and me where hacking on &lt;a class=&quot;reference external&quot; href=&quot;http://logbook.pocoo.org/&quot;&gt;Logbook&lt;/a&gt; at EuroPython over an ad-hoc Wifi network
because the people running the conference were unable to keep the
network running. Even though logbook is hosted at github currently, we
were using mercurial for hacking locally. You fire up an &lt;cite&gt;hg serve&lt;/cite&gt; in
one window and other persons on the network can instantly pull from it.
That's patch exchange you don't have to think about, it just works (tm).&lt;/p&gt;
&lt;p&gt;On the surface hg and git look very much alike. The commands are now
pretty similar and they appear to solve the same problems. However there
is a philosophical difference between these two: the handling of
branches.&lt;/p&gt;
&lt;p&gt;In both hg and git you're exchanging things called changesets. They have
an sha1 checksum and are linked with their parents and some other meta
information. Whatever information you are changing, the checksum will
change as well. So if you would take a changeset and only change the
name of the committer, the checksum would change. In hg there is another
piece of information that makes a changeset: the branch the changeset
was committed to. A branch in hg has a name (one that for a long time
was eternal) and in a way a head (the latest commit changeset).&lt;/p&gt;
&lt;p&gt;Now to understand my problem you have to keep two things in mind:
changesets in hg are linked to the first one that ever happened in the
repository (same for git) and that a changeset belongs to a branch, even
if merged.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I don't like merging&lt;/strong&gt;. That might sound strange, but I really don't
like merging. I did a lot of merging in hg because it works good enough,
but what I started doing with git is picking single changesets and
applying their diffs. Why am I doing this? Now first the implications:
the checksum changes, because the parents of a changeset will change
with that operation. On the other hand it gives you the flexibility to
pick a single changeset and apply it to different branches.&lt;/p&gt;
&lt;p&gt;So a good example are maintenance branches. My concept of maintenance is
to release bugfix releases if enough bugs accumulated. I don't promise a
bugfix release upfront, because if the API does not change in a
backwards incompatible way and a release is upcoming, I can combine that
into one release. Now that might sound like bad release management, and
it clearly is not the optimal way, but I am one person doing the
releases and I have way too many projects to care about and a limited
amount of time.&lt;/p&gt;
&lt;p&gt;Now what if at one point there are already two or three bugfixes or a
critical bug comes up that absolutely must be released (for example
security issues). What I do in git is I check out the tag of the release
I want to incorporate the patches and start cherry-picking the patches
from the master branch I want to apply. I obviously could not merge with
master because then I would pull in all the patches up to the patch I
was interested in (remember, they are linked and only exist if the link
to the first changeset is fully established).&lt;/p&gt;
&lt;p&gt;In git branches are just labels to a changeset. When you cherry pick one
changeset from a branch (or a branch of another repo) and apply it to
another one, you no longer know where the changeset was coming from.
That's a limitation I can totally live with. The cherry picking command
in git has a flag that allows me to add a &amp;quot;signed off&amp;quot; flag. That way I
can preserve the original author of the changeset and add my own name
for the signed off flag. So a changeset shows both authors. Here an
example of how this looks like: &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/mitsuhiko/flask/commit/36a421bb3a235f696131bc8a546492fc04a411f0&quot;&gt;commit 36a421bb3a235f696131 to Flask&lt;/a&gt;.
This is actually implemented by just adding a mime-like header as footer
to the changeset, nothing fancy with commit metadata etc. However the
important thing of this feature is that it's consistently implemented by
the little amount of UI that exist in git and other commands. People are
aware of this signed off thing.&lt;/p&gt;
&lt;p&gt;Doing the same in hg is also possible with the transplant command. The
downside is that if you transplant patches from one repo or branch into
another one, the incoming and outgoing commands no longer work like you
would expect them to do. They compare the checksum of the changeset
instead of the checksum of the contents of the patch. And as soon as the
UI starts no longer working, user frustration starts happening. But the
frustration of a user is not the issue here, the real issue is that this
confuses users and will cause them to make (understandable) mistakes.
I'm not a revision control system author myself and my knowledge of the
tools I'm using is limited to the subset I am using as well. Very often
when I get the link to a hg repo from another person I will notice that
they have a bugfix hg branch or something similar and screwed up merging
with upstream. Sometimes in the process of correcting that mistake I
will make another huge mistake myself that I then start correcting in
frustration by stripping all the changesets I just made and applying the
patch by hand, totally bypassing hg. These mistakes happen because
features like remote bookmarks, transplanting changesets and even named
branches are not integrated well enough into other commands. Especially
that the branch name is imprinted into the changeset is confusing to say
the least.&lt;/p&gt;
&lt;p&gt;For example the hg repositories on pocoo.org were partially created from
a huge subversion repository by an early version of one of the
subversion conversion commands. Don't ask me which one, but what it did
was naming the default branch everyone works on &amp;quot;trunk&amp;quot;. However to the
best of my knowledge a hg repository starts with &amp;quot;default&amp;quot; as default
branch name and hides that from the user interface. When people now pick
up work on one of our converted repos sometimes the confusion kicks in
why their hg experiments never had a displayed branch and why certain
assumptions are now invalidated. This especially becomes an obvious
problem the more git users are out there. A git user has the idea that
&amp;quot;git pull&amp;quot; will fetch all the changesets and merge that with the branch
they are tracking. Git has a pretty bizarre but working concept to track
remote branches that involves entries in the git config I don't
understand at all. I'm thankful the git UI provides some support to do
that for me. However on the other hand in hg we don't have the concept
of tracking remote branches. What we have there instead are just aliases
to a URL that points to a hg repository (and lately we can even refer to
branches on a remote repo in the URL that is another source of confusion
for me I will explain later). hg will pull changes from there and let
you do the merge then. Because that is quite repetitive someone came up
with the fetch extension for hg that pulls in changes and merges if
necessary, otherwise will just update. Now that fetch extension just
assumes that if there are two heads it should merge them, otherwise if
there is one head it will update, and if it finds anything else it will
just error out. You have no idea how many times hg fetch totally
destroyed the recent history when I merged in stuff that looked find in
hg incoming. Now obviously I should not have used hg fetch in the first
place, but a bit of help from the extension would be appreciated. Fetch
is also only partially to blame because it predates bookmarks and back
then nobody was using named branches.&lt;/p&gt;
&lt;p&gt;It all boils down basically to hg having an awesome internal concept
that does a lot of things really well, but other things not being
properly supported by the user interface I suppose.&lt;/p&gt;
&lt;p&gt;In layman terms git's branching concept roughly works like this: all
your changesets are linked to at least one parent. A changset has a
checksum for the commit + metadata and I think a checksum for the
contents of the patch as well. Additionally you can assign names to
changesets. There are tags which are aliases to changesets that do not
change, and there are branches which are basically names that are moved
to a new changeset on commit. Because of how this works you can have
changesets that are no longer linked to any place of the history because
they point away from one changeset and the name information of their
hash is lost. Git has a garbage collector that can remove these things
from the repository. There is not much magic in there and obviously it
would be very easy for hg to support that, but the core issue here is
not the implementation but the user interface. I don't think hg needs
git style branches at all!&lt;/p&gt;
&lt;p&gt;What hg needs instead is a user interface that is aware of certain
operations:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;cite&gt;hg push&lt;/cite&gt; can push bookmarks to remote repositories nowadays, but this
also involves pushing multiple heads to the serverside which the hg
command currently disallows by default unless you force it to. This is
user unfriendly and even if you are an experienced hg user you will
most likely not do the force but ask first if you are doing something
wrong here.&lt;/li&gt;
&lt;li&gt;The special label &amp;quot;tip&amp;quot; in hg moves between branches. This is the
worst user interface fail because all tools are interested in tip more
than what branch you are on. For example if you are using named
branches in hg things like bitbucket, trac (and I think even hgweb)
will show you the contents of the default file browser view
alternating between different branches. If the last commit was on
0.2-maintenance you will see the contents of the 0.2-maintenance
branch by default, if the last commit was on 2.0-new-features it will
display that branch instead. I think the invention of a tip label was
a mistake. It should have been per-branch instead.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;hg incoming&lt;/cite&gt; / &lt;cite&gt;hg outgoing&lt;/cite&gt; are unaware of things like &lt;cite&gt;hg transplant&lt;/cite&gt;.
If you are doing transplanting, hg incoming over the times becomes so
filled up with changesets already applied that you better not use it
at all. It also forces people you just transplanted patches from
delete their local checkout (or strip it to an older revision) and
pull again. In git this is not a problem because you just delete your
local feature branch and update the separately tracked master branch
which will magically include the changes I transplanted. Due to the
separate content tracking this will not even transfer larger amounts
of data over the wire, because git will already find them locally.&lt;/li&gt;
&lt;li&gt;The &lt;cite&gt;hg heads&lt;/cite&gt; command is intended to help people merge changes
locally by visualizing what unmerged heads are there, but when you
start using bookmarks and named branches it's intentional that there
are multiple heads. The more branches, the more useless the command.
The solution here would be git-like branch tracking so that heads can
filter out uninteresting pieces of information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is that hg over the time started adopting solutions that actually
are not solutions. For example you can have an alias not only for the
URL of a repository but the URL of a repository + a branch. That sounds
like wonderful thing to have, unfortunately due to the fact that the
name of the branch is part of the changesets you will be surprised
sooner or later when you merge in changes from another persons repo and
suddenly see feature branches appear even though you never specified
anything like that. This is a problem that becomes more apparent the
more people use hg with git knowledge where it's logical and encouraged
to create branches for every single feature you are implementing.&lt;/p&gt;
&lt;p&gt;I am not quite sure what the named-branch-in-URL is supposed to fix, but
for me it just created more confusion when working with repositories
that actually have named branches in that differ from the one or two I
have.&lt;/p&gt;
&lt;p&gt;So why does hg has these &amp;quot;limitations&amp;quot; in the first place? Probably
because the history of the project was not the big-ass Linux kernel
(though that is not entirely true) but mercurial itself. And for smaller
repositories the git model does not appear too appealing at the first
glance. It took me a while to start fully appreciating the possibilities
of small branches and now I can't live without them any more.&lt;/p&gt;
&lt;p&gt;The git UI might suck, and I still have a hard time with it, but the
branching works nicely and so is dealing with other people's patches.
It's the perfect tool for me currently when it comes to quickly
reviewing and applying patches and it grew on me. I still wonder
internally why the hell I'm writing &lt;cite&gt;git push origin :branchname&lt;/cite&gt; to
delete a branch remotely :) And with all these UI faults, git has the
better UI for branchy development :(&lt;/p&gt;
&lt;p&gt;But due to the horrible git UI and the incredible hostility of git for
people switching from the friendly lands from mercurial I am pretty sure
very few core developer of git had a look a serious at &amp;quot;the other tool&amp;quot;
to get an idea of what everybody is buzzing about when the topic &amp;quot;hg and
git branching&amp;quot; comes up.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Why I Don't Hate Git: Hidden Consistency</title>
    <id>http://lucumr.pocoo.org/2015/2/17/ui-and-hidden-consistency</id>
    <updated>2015-02-17T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2015/2/17/ui-and-hidden-consistency" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;Git for me is an interesting topic.  I used it initially when git had no
UI and &lt;a class=&quot;reference external&quot; href=&quot;http://git.or.cz/cogito/&quot;&gt;cogito&lt;/a&gt; was still a thing.  I can't
say I enjoyed using it much.  At the time I did all my development tasks
with SVN and the world was good.  A little while later I played around with
mercurial and instantly fell in love.  I held onto mercurial for a long
time and defended it vigorously.  Only in 2008 did I finally start to use
git and it took me multiple attempts until I was convinced that I should
migrate my repositories from mercurial to git.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;git-s-horrible-ui&quot;&gt;
&lt;h2&gt;Git's Horrible UI&lt;/h2&gt;
&lt;p&gt;I suppose anyone who comes from any version control system to git will be
quickly surprised by its utter lack of consistency in the UI.  Steve Losh
famously made fun of this in his &lt;a class=&quot;reference external&quot; href=&quot;http://stevelosh.com/blog/2013/04/git-koans/&quot;&gt;git koans&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However every time this topic comes up I am a bit in disbelief because I
don't remember the git UI confusing in daily operations.  Sure enough, for
whatever reason &lt;tt class=&quot;docutils literal&quot;&gt;git remote&lt;/tt&gt; works different from &lt;tt class=&quot;docutils literal&quot;&gt;git branch&lt;/tt&gt; and
&lt;tt class=&quot;docutils literal&quot;&gt;git tag&lt;/tt&gt; for some reason but given that I also use them in a different
way I would not even make that association.  The only git command I
actually remember being odd is &lt;tt class=&quot;docutils literal&quot;&gt;git show&lt;/tt&gt; which has a bit of an
unfamiliar syntax for exploring object contents.&lt;/p&gt;
&lt;p&gt;Yet at the same time I remember fighting against Mercurial very commonly
and I have a very strained relationship with perforce, but I can't
remember many cases where I had issues with git.&lt;/p&gt;
&lt;p&gt;Why do I not hate git the same way?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;learning-the-ui-vs-the-concept&quot;&gt;
&lt;h2&gt;Learning the UI vs the Concept&lt;/h2&gt;
&lt;p&gt;Thinking about this a bit more I think the reason git resonates so well
with me is because I learned git differently than any other version
control system.  With mercurial and perforce you learn the UI and you
learn how to solve some specific problems with it with the consequences or
implementations of those actions being a mystery.&lt;/p&gt;
&lt;p&gt;With git on the other hand even the first page of the tutorial has a
direct link to the &lt;a class=&quot;reference external&quot; href=&quot;http://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain&quot;&gt;internals chapter of the git book&lt;/a&gt;
which explains the internal implementation of git.&lt;/p&gt;
&lt;p&gt;This was even more the case in the past when git did not even have a UI.
As a user you were expected to work with some of the files in the &lt;cite&gt;.git&lt;/cite&gt;
folder yourself!  I remember playing around in the very early days with
git where there was not even a way to commit.  The &lt;cite&gt;.git/HEAD&lt;/cite&gt; was still a
symlink to the current branch and a documented way to commit was this
dance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Commit message&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; git-commit-tree &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git-write-tree&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &amp;gt; .git/HEAD
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Only later an alias for commit was added, and even then the tutorial was
still … &lt;a class=&quot;reference external&quot; href=&quot;https://raw.githubusercontent.com/git/git/c7c4bbe63193f580abd2460e96dd7e65f2d4904c/Documentation/tutorial.txt&quot;&gt;rough I would say&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Git didn't start as a version control system, it started as a concept that
other tools could use to build a version control system on top.  And this
set a very different tone for how it developed than many other systems.&lt;/p&gt;
&lt;p&gt;Surely git changed over the last 10 years and some concepts were changed,
but in the grand scheme of things it has not changed much.  There is a
certain beauty in being able to create a repository in git from 2005, doing
another commit with git from 2015, doing another commit with git from 2005
and looking at the resulting log with git from 2015.&lt;/p&gt;
&lt;p&gt;The core concept of git has not changed.&lt;/p&gt;
&lt;p&gt;Of course the UI is something you need to learn to work with git, but
because you can learn the underlying concept of git, the UI fades largely
into the background.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;good-defaults&quot;&gt;
&lt;h2&gt;Good Defaults&lt;/h2&gt;
&lt;p&gt;Git might not have the best UI, but it has good defaults and they are
getting better over time.  Things look nice by default, the common
behavior is in general the default and if it is not, there will at least
be a discussion about changing it.  There is one blessed way to do
something and it's easy to learn.  Branching in git has never changed,
knowledge acquired ten years ago is just as valid today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;a-solid-design&quot;&gt;
&lt;h2&gt;A Solid Design&lt;/h2&gt;
&lt;p&gt;Ultimately I think Linus when he created git as a version control system
made an ungodly good design and very little change was necessary.  Sure,
some details had to change later, but the core of it was good.  Working
with commits and objects turned out to be the right way and the branching
clearly was always the right decision.  Even mercurial had to eventually
concede and is now warning when you create a named branch :)&lt;/p&gt;
&lt;p&gt;I learned the git concepts once and now I can use this thing.  Sure,
sometimes I need to google a rarely used command, but when it really
matters, I do not need to.  There has never been a situation where I
failed so badly that I could not recover from it.  And this beautiful and
simple concept makes up for a lot of inconsistent UI.&lt;/p&gt;
&lt;p&gt;Where the UI lacks consistency and maybe simplicity, the core design of
git has both.  I value this a ton.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;git-is-there-for-me&quot;&gt;
&lt;h2&gt;Git Is There For Me&lt;/h2&gt;
&lt;p&gt;That ultimately is the reason why I forgive git's UI a lot and why I
recollect very few frustrating experiences is because when it really
matters, git has always been on my side.  I screwed up really badly
before, merging wrong things together, accidentally deleting data and much
more, yet I &lt;em&gt;never&lt;/em&gt; lost any data or felt left abandoned by my tool.&lt;/p&gt;
&lt;p&gt;When I fail, sometimes I make a copy of my &lt;tt class=&quot;docutils literal&quot;&gt;.git&lt;/tt&gt; folder and carefully
trace back on what I did wrong.  This is where git shines.  There are very
few problems you cannot recover from.  On the other hand I have horrible
memories of me making mistakes in other version control systems where it
was either impossible or required the assistance of a developer of such
system to get out of my misery.&lt;/p&gt;
&lt;p&gt;Neither did it break because I misused it nor did it broke out of its own
volition.  I can't say the same thing about any other version control
system I used.  I successfully broke many subversion checkouts (even
destroyed the database on the server), screwed up perforce workspaces and
entire mercurial repositories.&lt;/p&gt;
&lt;p&gt;The worst that ever happened to me using git is that my Flask repositories
for all eternity will contain some bad file permissions on old tree
records due to a temporary github bug.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;more-of-this&quot;&gt;
&lt;h2&gt;More of This&lt;/h2&gt;
&lt;p&gt;I think I want more software like git.  Software where the way it works is
a crucial part of the user experience.  Where there is no disconnect
between how it works, and how it presents itself to the user.&lt;/p&gt;
&lt;p&gt;A strong counter example of this is the cognitive disconnect I have when
using Apple's recent software.  The &amp;quot;save as&amp;quot; dialog is gone, the &amp;quot;save&amp;quot;
dialog now shows a delete button even if something was not saved to the
file system ever.  Too many times I accidentally overwrote a file in
keynote or preview because my knowledge of how a file system works, does
not apply to how the UI maps the application operations to what it's
doing.  When fundamentally different methods of operations (discarding
something never saved and deleting a file already on the file system) are
called the same and look the same it causes me frustration.&lt;/p&gt;
&lt;p&gt;And this is why I don't hate git.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

