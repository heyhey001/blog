<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Armin Ronacher's Thoughts and Writings</title>
  <id>http://lucumr.pocoo.org/feed.atom</id>
  <updated>2016-12-29T00:00:00Z</updated>
  <link href="http://lucumr.pocoo.org/" />
  <link href="http://lucumr.pocoo.org/feed.atom" rel="self" />
  <subtitle type="text">Armin Ronacher's personal blog about programming, games and random thoughts that come to his mind.</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">A Fresh Look at Rust</title>
    <id>http://lucumr.pocoo.org/2014/10/1/a-fresh-look-at-rust</id>
    <updated>2014-10-01T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2014/10/1/a-fresh-look-at-rust" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;I have been programming with Rust for quite a long time now but that does
not mean much.  Rust has been changing for years now in such dramatic
ways that coming back after two months feels almost like working in a
different language.  One thing however never changed: the trajectory.
With every update, with every modification the whole thing became better
and better.&lt;/p&gt;
&lt;p&gt;There is still no end to the changes in sight but it feels a lot more
stable now than a few months ago, and some API design patterns begin to
emerge.  I felt like now is a good time to explore this a bit more and
started to rewrite my &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/mitsuhiko/redis-rs&quot;&gt;redis library&lt;/a&gt; to fit better into the scope of
the language.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;where-is-rust-positioned&quot;&gt;
&lt;h2&gt;Where is Rust Positioned?&lt;/h2&gt;
&lt;p&gt;The three languages where I do most of my work in are Python, C and C++.
To C++ I have a very ambivalent relationship because I never quite know
which part of the language I should use.  C is straightforward because the
language is tiny.  C++ on the other hand has all of those features where
you need to pick yourself a subset that you can use and it's almost
guaranteed that someone else picks a different one.  The worst part there
is that you can get into really holy wars about what you should be doing.
I have a huge hatred towards both the STL and boost and that has existed
even before I worked in the games industry.  However every time the topic
comes up there is at least someone who tells me I'm wrong and don't
understand the language.&lt;/p&gt;
&lt;p&gt;Rust for me fits where &lt;em&gt;I&lt;/em&gt; use Python, C and C++ but it fills that spot in
very different categories.  Python I use as language for writing small
tools as well as large scale server software.  Python there works well for
me primarily because the ecosystem is large and when it breaks it's a
super straightforward thing to debug.  It also keeps running and can
report if things go wrong.&lt;/p&gt;
&lt;p&gt;However one interesting thing about Python is that unlike many other
dynamic languages, Python feels very predictable.  For me this is largely
because I am a lot less dependent on the garbage collector than in many
other languages.  The reason for this is that Python for me means CPython
and CPython means refcounting.  I'm the guy who will go through your
Python codebase and break up cycles by introducing weak references.  Who
will put a refcount check before and after requests to make sure we're not
building up cycles.  Why?  Because I like when you can reason about what
the system is doing.  I'm not crazy and will disable the cycle collector
but I want it to be predictable.&lt;/p&gt;
&lt;p&gt;Sure, Python is slow, Python has really bad concurrency support, the
interpreter is quite weak and it really feels like it should work
differently, but it does not cause me big problems.  I can start it and it
will still be there and running when I come back a month afterwards.&lt;/p&gt;
&lt;p&gt;Rust is in your face with memory and data.  It's very much like C and C++.
However unlike C and C++ it feels more like you're programming with Python
from the API point of view because of the type inference and because the
API of the standard library was clearly written with programmer
satisfaction in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;you-will-run-into-walls&quot;&gt;
&lt;h2&gt;You will run into Walls&lt;/h2&gt;
&lt;p&gt;I think an interesting thing about programming in Rust is that in the
beginning you will run into walls.  It's clearly not Python so lots of
things you can get away with in Python do not work in Rust.  At the same
time it's not C++ and the borrow checker will become your greatest enemy.
You will write some code and say: this stuff really should work, why do
you think you know better and stop me from doing this you stupid thing?&lt;/p&gt;
&lt;p&gt;The truth is that the borrow checker is not perfect.  The borrow checker
prevents you from doing dangerous things and it does that.  However it
often feels too restrictive.  In my experience though the borrow checker
actually is wrong much less often than you think it is and just requires
you to think a bit differently.&lt;/p&gt;
&lt;p&gt;I like the borrow checker personally a lot.  I agree with that sometimes
you feel there should be a way to disable it, but when you think more
about it you are quite happy it's there.  The borrow checker prevents you
from building up some of the worst technical debt you can acquire, the
kind of debt which you can never repay.  The Python programming language
acquired a global interpreter lock when it got threading support and it
really required it ever since the language existed.  The interpreter was
written in a way that nowadays we are not sure how to make it concurrent.&lt;/p&gt;
&lt;p&gt;If you try, you can still make terrible decisions for concurrency in Rust,
but you really need to go out of your way to do it.  The language forces
you to think more and I believe that's a good thing.  I don't want to
become another &amp;quot;objective oriented programming is the billion dollar
mistake&amp;quot; preacher but I do think that the language decides largely what
code people write.  Because subclassing is easy in C++, Java, Python and
many more languages this is what we write.  And then birds are instances
of animal classes.  If you take that tool away you start thinking
differently and that's a good thing.  CPUs stop getting faster and looking
at one object at the time really no longer makes any sense at all.  We
need to start reasoning a lot more about collections of things and what
transformations we actually want to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;rust-inspires&quot;&gt;
&lt;h2&gt;Rust Inspires&lt;/h2&gt;
&lt;p&gt;For me programming in Rust is pure joy.  Yes I still don't agree with
everything the language currently forces me to do but I can't say I have
enjoyed programming that much in a long time.  It gives me new ideas how
to solve problems and I can't wait for the language to get stable.&lt;/p&gt;
&lt;p&gt;Rust is inspiring for many reasons.  The biggest reason I like it is
because it's practical.  I tried Haskell, I tried Erlang and neither of
those languages spoke &amp;quot;I am a practical language&amp;quot; to me.  I know there are
many programmers that adore them, but they are not for me.  Even if I
could love those languages, other programmers would never do and that
takes a lot of enjoyment away.&lt;/p&gt;
&lt;p&gt;Rust is something that anyone can pick up and it's fun all around.  First
of all (unless you hit a compiler bug) it won't crash on you.  It also
gives you nice error messages if it fails compiling.  Not perfect, but
pretty good.  It comes with a package manager that handles dependencies
for you, so you can start using libraries other people wrote without
having to deal with a crappy or non existing ecosystem.  Python got much
better over the years but packaging is still the biggest frustration
people have.  &lt;a class=&quot;reference external&quot; href=&quot;http://crates.io/&quot;&gt;Cargo&lt;/a&gt; (rust's package manager) is
barely half a year old, but it has a full time developer on it and it's
fun to use.&lt;/p&gt;
&lt;p&gt;Even just the installation experience of the language is top notch.  It
gives you compiler + documentation tool + package manager and you're good
to go.  The fact alone that it has a documentation tool that spits out
beautifully looking documentation out of the box is a major contributor to
enjoying programming in it.  While I wish it had a bit more of Sphinx and
a bit less of javadoc, it's a really good start for more.&lt;/p&gt;
&lt;p&gt;But what's really inspiring about Rust are the small things.  When I first
played with Rust what amazed me the most was the good FFI support.  Not
only could you call into C libraries easily: it also found and linked them
for you.  There is so much more though and it's hidden everywhere.  There
is a macro (&lt;tt class=&quot;docutils literal&quot;&gt;include_str!&lt;/tt&gt;) that will read a file next to your source at
compile time into a string into your binary (How cool is that!?).  Not
only can you bake in contents of files, you can also pull environment
variables into your binaries for instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;designing-apis&quot;&gt;
&lt;h2&gt;Designing APIs&lt;/h2&gt;
&lt;p&gt;The most interesting part currently is definitely finding out how to
properly write APIs for Rust.  Rust as a language is undoubtedly more
complex than most other but thankfully not in a way that it overwhelms
you.  What makes Rust complex from an API point of view is that as a
programmer you feel a bit of a tension between writing the straightforward
code that you expect when programming in a systems language and providing
a nice high level API like you expect in Python.&lt;/p&gt;
&lt;p&gt;The reason I feel making nice APIs is because the language encourages it.
First of all the language in itself is super expressive and it makes a lot
of fun to write things in it — on the other hand there is just so much
possibility.&lt;/p&gt;
&lt;p&gt;To give you an idea why it's fun to design APIs for Rust is that the type
system is just so damn good.  So Rust is statically type checked but it
has inference so you get away with writing really beautiful code.  In my
rust driver for instance, you can write code like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;redis://127.0.0.1/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SET&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;key_1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SET&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;key_2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;key_1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;key_2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;result = {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To give you an idea how the same code looks in Python currently:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;redis&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6379&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; \
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;key_1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;key_2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;key_1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;key_2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;result = {}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What I find interesting about this is that the Rust library is nearly as
small and clear as the Python one, but is a much lower-level binding.
Unlike the Python library which gives each call a separate method, the
Rust library (because quite new) only wraps the low-level API and you need
to create the request manually by chaining calls for each argument.  Yet
the end result for a user is nearly as nice.  Granted there is extra
handling needed in Rust for the errors (which I avoided here a bit by
using &lt;cite&gt;unwrap&lt;/cite&gt; which makes the app terminate, but then the same is the
case in the Python version where I also miss error handling).&lt;/p&gt;
&lt;p&gt;The cool thing though is that the Rust library is completely type safe.
And yet in total there are exactly &lt;em&gt;two&lt;/em&gt; places where types are mentioned
and that's the same ones, where a cast to an integer was necessary in
Python.&lt;/p&gt;
&lt;p&gt;This however is not the best we could do in Rust.  Rust has compiler
extensions which open up a whole range of possibilities.  For instance
there is a Rust library which statically verifies that Postgres SQL
commands are well formed: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sfackler/rust-postgres-macros&quot;&gt;rust-postgres-macros&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
test.rs:8:26: 8:63 error: Invalid syntax at position 10: syntax error at or near &amp;quot;FORM&amp;quot;
test.rs:8     let bad_query = sql!(&amp;quot;SELECT * FORM users WEHRE name = $1&amp;quot;);
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error: aborting due to previous error
&lt;/pre&gt;
&lt;p&gt;This sort of stuff excites me a whole lot.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;If you're into API design in rust, join us in #rust-apidesign on the
Mozilla IRC network&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;rust-s-future&quot;&gt;
&lt;h2&gt;Rust's Future&lt;/h2&gt;
&lt;p&gt;Is Rust's memory tracking concept strong enough that we will accept it as a
valid programming model?  I am not sure.  I do believe though that Rust
can stand on its own feet already.  Even if it would turn out that the
borrow checker is not sound, I believe it would not hurt the language at
all to widespread adoption.  It's shaping up to be a really good language,
it works really well without GC and you can use it without a runtime.&lt;/p&gt;
&lt;p&gt;Rust is an exceptionally good open source project.  And it needs more
helping hands.  The Windows support (while getting better) especially
needs more love.&lt;/p&gt;
&lt;p&gt;If there is interest in some more practical Rust experience I will
probably write something up about my experience making &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/mitsuhiko/redis-rs/&quot;&gt;redis-rs&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">About the Lack of Updates</title>
    <id>http://lucumr.pocoo.org/2012/8/27/about-the-lack-of-updates</id>
    <updated>2012-08-27T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2012/8/27/about-the-lack-of-updates" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;If you look over my contributions to my own open source projects over the
last six months you will have noticed that I became less active.  Why is
that?  There is no big conspiracy ongoing and I also don't plan on keeping
it this way, but there are two reasons for this.  The first one is that I
am now working for a computer game middleware company and we're using my
tools in production here.  The change in scenery caused me to use my own
stuff in a completely new environment and the amount of stuff I'm learning
on a daily basis is quite insane.&lt;/p&gt;
&lt;p&gt;You would think using eating your own dogfood results in more active
contributions but it turns out that quite the opposite is happening.  As I
have written about before we're using Werkzeug itself instead of Flask for
it and we went some new and interesting ways in utilizing our stack.  I'm
very proud about what we accomplished in the last half year and it gave me
a few new insights into software architecture which I eventually want to
integrate into my libraries.&lt;/p&gt;
&lt;p&gt;However a naive implementation also means breaking compatibility and I am
not very keen on that.  However with Python 3 becoming more and more
interesting I am currently playing with different ideas how to evolve the
libraries in interesting ways.&lt;/p&gt;
&lt;p&gt;The second reason is that I have to change my workflow.  The way I was
handling my email inbox over the last few years worked fine for me until
now.  If you sent me a mail in the last two months there is a high chance
I might have missed it.  The truth is that running your own mail server
these days has become a science in itself and I am no longer willing to do
that.  At the same time however I don't want to migrate mails off to a
hosted solution without ensuring I get stuff out of there easily if the
need ever comes up.  As it stands right now I clear out my mailbox in the
morning and at night I have 120 mails in it after filters.  And 90% of
that is what I would classify as various types of spam that my spamfilter
does not assume is spam.  I'm spending too much time currently dealing
with mail and that generally leaves me in a very unhappy state overwards
so that I don't want to deal with my github inbox as well.&lt;/p&gt;
&lt;p&gt;Worst part about all that is that it just piles up.&lt;/p&gt;
&lt;p&gt;So yeah, not going to keep it this way but I think I might have to invest
a week into migrating my mail to something else and go over &lt;em&gt;all&lt;/em&gt; the
things that piled up for my projects and make some clear decisions in how
to improve that flow.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">April 1st Post Mortem</title>
    <id>http://lucumr.pocoo.org/2010/4/3/april-1st-post-mortem</id>
    <updated>2010-04-03T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2010/4/3/april-1st-post-mortem" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;This year I decided to finally do what I planned for quite some time: an
April's fool joke. (I did contribute a bit to &lt;a class=&quot;reference external&quot; href=&quot;http://www.python.org/dev/peps/pep-3117/&quot;&gt;PEP 3117&lt;/a&gt;, but that does not count).
This year I decided to make a little joke about Python microframeworks
(micro-web-frameworks?) and wrote a little thing, and created a website
and screencast for it: &lt;a class=&quot;reference external&quot; href=&quot;http://denied.immersedcode.org/&quot;&gt;denied.immersedcode.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I did expect some responses to that, but I was a little bit surprised by
some of them though. So here my full disclosure of the april's fool
prank, what people thought of it and what my conclusion is.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-motivation&quot;&gt;
&lt;h2&gt;The Motivation&lt;/h2&gt;
&lt;p&gt;It seems like everybody likes microframeworks. Not sure what caused
that, but there are plenty of them. web.py (Python) and camping (Ruby)
where the first of their kind I think. Later others followed and it
seemed that people love the idea of software that does not have
dependencies and comes in a single file. So I thought, I can do the same
and make fun of it, so let's just create a framework based on existing
technology and throw everything together in a large single file: denied
was born. I just bundled a Werkzeug, simplejson and Jinja2 into a single
file and added a bit of code that glues them together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-implementation&quot;&gt;
&lt;h2&gt;The Implementation&lt;/h2&gt;
&lt;p&gt;Denied consists of 160 lines of code that implements a very basic WSGI
application based on Werkzeug and Jinja2 that incorporates really stupid
ideas into the code:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;it &lt;a class=&quot;reference external&quot; href=&quot;http://lucumr.pocoo.org/2009/7/24/singletons-and-their-problems-in-python&quot;&gt;stores state in the module&lt;/a&gt;
and uses implicitly defined data structures&lt;/li&gt;
&lt;li&gt;there is a function that accepts both a template filename or a
template source string as the same parameter and guesses based on the
contents of the string.&lt;/li&gt;
&lt;li&gt;it introspects the interpreter frame to figure out the name of the
function that called a template render function to automagically guess
the name of the template.&lt;/li&gt;
&lt;li&gt;it uses automatic function registration and decorators to register
URL rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't want to go into details why I hate everything there, that would
be a blog post of its own, but I want to point out that nearly all of
these &amp;quot;features&amp;quot; were inspired by existing microframeworks.&lt;/p&gt;
&lt;p&gt;I did not expect anyone to detect from these things that the framework
was an April's fool joke, but I thought that the obfuscated sourcecode
and the fact that it was basically just a zipfile would be obvious.
However I got more than one mail asking me to release the sourcecode of
it because people want to hack on it. Right now it has more than 50
followers and 6 forks on github which is insane if you keep in mind that
Jinja2 and Werkzeug have less than 30 on bitbucket.&lt;/p&gt;
&lt;p&gt;Thinking about it a bit more made me realize that camping back in the
days was in fact delivered as obfuscated 2K file of Ruby code. Not sure
why _why did that, but he was a man of mysteries so probably just
because he thought it was fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-screencast&quot;&gt;
&lt;h2&gt;The Screencast&lt;/h2&gt;
&lt;p&gt;To make the joke more obvious I created a screencast that would showcase
the framework and do pretty much everything wrong. For that I created a
persona called &amp;quot;Eirik Lahavre&amp;quot; that implemented the framework and did
the screencast. Originally I wanted that person to be a Norwegian web
developer but unfortunately the designated speaker disappeared so I had
to ask a friend of mine (Jeroen Ruigrok van der Werven) to record it for
me but he told me he can't do a norwegian accent so he went with French
and Eirik Lundbergh became Eirik Lahavre. I lay flat on the floor when I
listened to the recording for the first time because he's actually Dutch
:)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-website&quot;&gt;
&lt;h2&gt;The Website&lt;/h2&gt;
&lt;p&gt;For the website I collected tongue-in-cheek fake endorsements from
popular Python programmers and added one for myself that was just
bashing the quality of the code. I'm afraid I sort of made myself
popular by bashing other people's web frameworks, at least reading
reddit, hacker news and various mailinglists leaves that impression so I
thought it would be fun to emphasize that a bit more on that website.
This also comes very close to the website of web.py which shows a few
obviously bad comments from popular Python hackers.&lt;/p&gt;
&lt;p&gt;Furthermore the website shows a useless and short hello world example
which shows nothing about how the framework works. This was inspired by
every other microframework website out there. It claims RESTfulnes and
super scaling capabilities, kick-ass performance and describes the
developer of the project (the fictional Eirik Lahavre) as god of Python
code and coming from a professional company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-details&quot;&gt;
&lt;h2&gt;The Details&lt;/h2&gt;
&lt;p&gt;For everything in the joke I did what I would never do. I even went so
far to create the HTML of the website against my own code style, to use
deprecated HTML tags in the presentation, claim to use XHTML even though
the doctype and mimetype was wrong. The screencast also claims that flat
files were a scalable NoSQL database and that missing form helpers were
something positive because it means full flexibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-impact&quot;&gt;
&lt;h2&gt;The Impact&lt;/h2&gt;
&lt;p&gt;The screencast was downloaded over 10,000 times and the website got more
than 50.000 hits. The link is still tweeted and I never got that many
retweets for anything related to my projects so far. The fake project on
github has more than 50 followers and 6 forks. Quite a few people took
the project serious from the few comments on reddit and the emails I
got.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-i-learned&quot;&gt;
&lt;h2&gt;What I learned&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;It does not matter how good intended or well written a project is,
the bold marketing is king. Being present on github is &lt;em&gt;huge&lt;/em&gt;. As much
as I love bitbucket and mercurial, but there is an immense difference
between having your project on github or bitbucket, and I'm afraid
that no matter what bitbucket does or what the mercurial people do,
they will never even come close to github in terms of user base people
following your code and contributing.&lt;/li&gt;
&lt;li&gt;Small snippets of code on the website are killer. Werkzeug tries to
be honest by not showcasing a small &amp;quot;Hello World&amp;quot; application but
something more complex to show the API, but that does not attract
users. Jinja2 does not even try to show anything at all, you have to
look at the documentation to see how it looks like. That drives
potential users away.&lt;/li&gt;
&lt;li&gt;Don't be honest: be bold. Nobody will check your claims anyway and
if they don't live up to the promise, you can still say that your test
setup was or your understanding of the problem is different.&lt;/li&gt;
&lt;li&gt;There is no such thing as a &amp;quot;bad endorsement&amp;quot;. People took it as a
good sign that I did not give the project my blessing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-small-library&quot;&gt;
&lt;h2&gt;The Small Library&lt;/h2&gt;
&lt;p&gt;I'm currently trying to learn everything about game development and 3D
graphics I possibly can. I found out that the best way to learn that is
to write a minimal engine from scratch. Right now I'm doing that by
looking at other source code and reading books and writing the most
minimal code I can. I always try to prove to myself: existing code is
way to complex, that has to be easier. After the third refactoring and
improvements I usually end up with something as complex as the original
code or the explanation from the book.&lt;/p&gt;
&lt;p&gt;There is a reason why things are as complex as they are and not easier.
I think the same is true for microframeworks. The reason why everybody
is that crazy about having a single file implementing whatever is
necessary to implement a web application is because you can claim it's
easy and you can understand it. However things are not that easy in
reality. I am pretty sure that other framework developers will agree.&lt;/p&gt;
&lt;p&gt;web.py is the perfect example for that. It started as a library in 1000
lines of code in a single file, and look at what it became. It's not
that simple any more. Many of the initial design decisions that were
plain wrong were reverted. Such as abusing the print statement for
outputting values to the browser. There were good reasons why nobody
before web.py used print to output strings, yet web.py did it that way.
And a few versions later it disappeared again for good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-will-change&quot;&gt;
&lt;h2&gt;What will Change?&lt;/h2&gt;
&lt;p&gt;For one I will put small example snippets on the Werkzeug and Jinja2
website. Also for the fun of it I will publish one of the projects on
github just to see how that works out. In general though, I will try to
keep things low profile because I just feel more comfortable with that.&lt;/p&gt;
&lt;p&gt;Obviously, denied will stay the April's fool joke it was and not get
further attention. The &amp;quot;promised&amp;quot; documentation will not come :) However
I will probably blog about &amp;quot;how to create your own microframework based
on Werkzeug&amp;quot; because right now people base their microframeworks on the
standard library which I think is a terrible idea. One dependency might
not be as good as no dependency, but with Tarek Ziade's tremendous work
on packaging with Python that should not be a problem in the near
future.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Battlelog: Modern Web Applications are Here</title>
    <id>http://lucumr.pocoo.org/2011/11/15/modern-web-applications-are-here</id>
    <updated>2011-11-15T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2011/11/15/modern-web-applications-are-here" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;It's the shooter season of the year and this fall was all about Modern
Warfare 3 versus Battlefield 3.  And being the kind of game they are they
also try to keep their audience playing by introducing some additional
level of engagement.  Both Call of Duty and Battlefield introduced their
own online community websites and statistic platforms.  Call of Duty has
Elite, Battlefield has Battlelog.&lt;/p&gt;
&lt;p&gt;But just because these services are sitting in the same spot it does not
mean they are in any way similar.  And that actually goes for more than
just their monetization plans and feature sets.  Elite is a traditional
application as traditional as it can be.  You sign up, there is Flash,
there is a bit of JavaScript, there are tons of requests for each page and
a playercard transmits about 3 MB of data to your client.  Not very
interesting to say the least.&lt;/p&gt;
&lt;p&gt;But what are they doing?  Notwithstanding some of their respective extra
features both Battlelog and Elite are essentially a social network for
shooter games that expose the statistics of your individual gameplay as
well as the one of your friends to you.  Everything you do in the game is
reflected on these websites and you can further interact with the game
there by commenting on gameplay and chatting up with friends.&lt;/p&gt;
&lt;p&gt;Elite by itself is not very interesting technology wise, however Battlelog
certainly is.  It shows that an application that is probably used by
millions of gamers can be built on modern web technology as well.  And
under the hood is one of the most interesting ways to built a modern web
application that I think you should check out.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;embrace-the-client&quot;&gt;
&lt;h2&gt;Embrace the Client&lt;/h2&gt;
&lt;p&gt;A few months back I was claiming that WSGI is not the place for pluggable
applications and that it would make sense &lt;a class=&quot;reference external&quot; href=&quot;/2011/7/27/the-pluggable-pipedream/&quot;&gt;to assemble applications on the
client-side&lt;/a&gt;.  Turns out, Battlelog
is doing just that.  While I do not know what all of their infrastructure
looks like, their network graph and license information on the page is
revealing.&lt;/p&gt;
&lt;p&gt;Battlelog is written by a company called &lt;a class=&quot;reference external&quot; href=&quot;http://esn.me/&quot;&gt;ESN&lt;/a&gt; and their
infrastructure from the released code is basically Python 2.x with
gevent as well as JavaScript with jQuery and their own stuff on the client
and Java for their websocket backend.&lt;/p&gt;
&lt;p&gt;If you send an HTTP request to the website it appears to work as if it was
a regular website.  You get a bunch of HTML rendered and nothing
interesting happens.  However if you click on any link you do not get HTML
transmitted.  Instead what is transmitted is JSON, the HTML5 history API
is used to modify the URL dynamically and all the HTML is rendered on the
client.  Since it appears to be able to do both we can compare the sizes
of the data transmitted easily.&lt;/p&gt;
&lt;p&gt;The HTML for the index page is 18KB in size.  If we trigger the request to
the same URL with just the JSON it's 4KB.  Not only is it less to
transmit, it also means that the server is essentially just generating
JSON instead of rendering whole templates which also means a performance
improvement for the client.&lt;/p&gt;
&lt;p&gt;The platform is a work of beauty in general and I am amazed how little I
have heard on the interwebs about it.  So to give you an idea why it's an
incredible technical achievement on so many levels, here the breakdown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;feature-overview&quot;&gt;
&lt;h2&gt;Feature Overview&lt;/h2&gt;
&lt;p&gt;To understand what Battlelog is here a brief overview of what it does.
These are not necessarily the features that are immediately obvious to the
user but are very obvious for the interested developer that wants to peak
under the hood:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;the website insta-updates based on information coming from the push
connection.  If you have the website open in the background you can
hear a notification sound being played just the second your game ends.
That notification sound is for the report generated from the round you
played.&lt;/li&gt;
&lt;li&gt;The same websocket connection for the website is also used for the
chat feature on the site as well as game invites and more.&lt;/li&gt;
&lt;li&gt;All the pages can be rendered on both the client side via JavaScript
as well as the server.  How this work I cannot tell you but I find it
interesting considering the server side is Python.  So their templates
compile to Python and JavaScript as it seems.&lt;/li&gt;
&lt;li&gt;Battlelog comes with an optional browser plugin that makes it possible
to join into a game on the PC version of Battlefield right from within
the browser.  This plugin can interact with the game and exposes some
other functionality that is lacking in HTML5 (such as issuing pings).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;how-the-client-operates&quot;&gt;
&lt;h2&gt;How the Client Operates&lt;/h2&gt;
&lt;p&gt;In order to understand why Battlelog is interesting engineering we have to
reconstruct what it appears to be doing.  Again, I am not claiming
knowledge of their server technology, I basically just observed what I saw
and concluded a few things from it.&lt;/p&gt;
&lt;p&gt;When you access a page you get some nicely rendered HTML back.  One of the
things that is also transmitted to you is a large JavaScript document that
contains their client side framework as well as the rendering instructions
for all pages compiled to JavaScript code.  The framework then hooks into
your browser's navigation code an intercepts all page loads.  Instead of
letting the browser replace the page with something new on load it instead
does the HTTP request via Ajax and adds an additional header to the HTTP
request: &lt;cite&gt;X-Ajax-Navigation&lt;/cite&gt;.  If the server side sees that header it will
instead of rendering to HTML deliver the data that is normally passed to
the template as JSON.&lt;/p&gt;
&lt;p&gt;The data you get back is everything the page needs to render, including
the name of the template.  When that data arrives on the client the
browser replaces the current page content with the data that was rendered
on the client side from the received JSON.  Not only that, it also makes
sure to use the HTML5 history API to change the browser URL.&lt;/p&gt;
&lt;p&gt;The user does not notice that anything interesting is going on unless he's
tech savvy enough to open the firebug network panel and watch the system
operate.  In fact the whole thing is so incredible smooth that you would
not notice anything interesting besides the fact that the page loads fast.
I mean seriously fast.  Clicking on a link in Battlelog is such a snappy
operation it's haunting for the trained web developer eye.  Very few
systems respond this quickly.  This is especially noticeable on pages that
do not involve a lot of different data such as the news section of the
website or the forums.&lt;/p&gt;
&lt;p&gt;If you look at the website it also has a bar on the bottom of the screen
that shows notifications, your friendlist, open chat windows and a few
other things.  This bar can have state.  You can toggle windows open and
closed, you can scroll in the chat window, enter new next and the bar will
stay open and unchanged if you navigate to a different page.  True, this
is nothing special these days, facebook does it too.  However from the
design that Battlelog follows this comes natural.  When the page contents
are hooked in the DOM element for that bar on the bottom is preserved and
not touched.&lt;/p&gt;
&lt;p&gt;The other aspect of Battlelog is the real time component with web sockets.
I have not looked too far into that but it appears that it's based on an
abstraction layer on top of web sockets, Flash or whatever is supported
that was written by ESN for other projects in mind as well.  The server
code sends an information to the push hub which handles the socket
connection for the clients.  This way various systems can inform the
client about updates, that does not even have to be Battlelog itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;why-the-client&quot;&gt;
&lt;h2&gt;Why the Client?&lt;/h2&gt;
&lt;p&gt;While it's not necessarily the case with Battlelog, there are a bunch of
really good reasons why you want to render stuff on the client side:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;You can do partial updates.  And you want partial updates since they
are good for the user experience.&lt;/li&gt;
&lt;li&gt;You can mix content together from different resources which is good
for caching.  If there is information on the page that rarely changes
and is the same for each user you can load it from a well cached page
and keep it in the client's DOM and never replace it.&lt;/li&gt;
&lt;li&gt;Generating HTML on the server side is more expensive than on the
client.  You don't pay for the client side and even the fastest
template engine on the server is beaten by an optimized JSON
serializer.  Faster apps mean more satisfied customers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Even if you do not have a JavaScript heavy application, moving
computations to the client side is a good thing.  This obviously assumes
that it does not break the navigation like some websites do.  Battlelog
does not do that.  The principles on which Battlelog is built would also
very well work in a more traditional application.  However it requires a
well structured architecture were the data you're sending to the template
engine is simple (and secure!) enough that you can put it in JSON and that
the templates themselves are simple enough that compiling them to
JavaScript is an option.&lt;/p&gt;
&lt;p&gt;Jinja2 for instance could in theory execute on the client but practically
not.  Practically it's exposing a little bit too much of Python to make
sense to compile to JavaScript.  But a template language much like Jinja2
could be written that would make this possible.&lt;/p&gt;
&lt;p&gt;In fact I think you could build a microframework that would very well
support this paradigm and still be agnostic to the JavaScript code you're
running on the client for the most part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-native-code-thing&quot;&gt;
&lt;h2&gt;The Native Code Thing&lt;/h2&gt;
&lt;p&gt;The real interesting thing about Battlelog however is a Windows PC
specific component.  If you are heading to Battlelog from a Windows PC and
you own the PC version of Battlefield 3 you can launch into a game right
from within the browser.  How does this work?  It works with the help of a
browser plugin that exposes additional functionality to the in browser
client.  Namely it has a function to start the game and pass it
information as well as a general purpose function to ping an IP address
which is used for the server browser.&lt;/p&gt;
&lt;p&gt;In fact if you are playing on PC this is how the game is launched, always.
There is no in game menu, you join from within your browser.  This is mind
blowing thing.  First of all it makes it easier for DICE to update the
server infrastructure since it's now mostly separated from the client and
also makes for much quicker iterations.&lt;/p&gt;
&lt;p&gt;The communication for the most part works in one-way but in a cycle as it
seems.  If you log into Battlelog and head to the server browser you get a
list of servers.  How does &lt;em&gt;that&lt;/em&gt; work?  Here's how:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;When you send an HTTP request to Battlelog it determines your
approximate location based on the request IP.  This way it can
pre-filter servers for you that are probably near you.&lt;/li&gt;
&lt;li&gt;Each server connects to a ping site on connect.  There are a couple
different ping sites for different countries.  The USA have three I
think, Europe has one, Japan has one, Australia etc.  Each ping site
then notifies Battlelog about the distance of that server to the ping
site.&lt;/li&gt;
&lt;li&gt;Based on that information as well as your filter settings, Battlelog
now sends you a list of servers.  Once that data is retrieved by the
client it starts connecting to the browser plugin and asks it to ping
all the server IPs it received.&lt;/li&gt;
&lt;li&gt;If you now want to join that server it sends an HTTP request to
the Battlelog server side to reserve a slot on that server.  In
response it gets a token that identifies that slot.  When the server
managed to reserve a slot for that player the client uses the
serverlog plugin to boot up the game.  It passes that token to the
game alongside a secret and lets the game boot in the background.&lt;/li&gt;
&lt;li&gt;While the game is booting up it uses the received authentication
information to use the slot that was reserved.  When it loaded up
properly it notifies the Battlelog client with the help of the plugin
about changes in the executable.&lt;/li&gt;
&lt;li&gt;The plugin also exposes some more functionality of the client to the
website which makes it possible for the JavaScript part of Battlelog
to close the game away and initiate some other game modes such as coop
hosting.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;thinking-does-it-need-the-plugin&quot;&gt;
&lt;h2&gt;Thinking: Does it need the Plugin?&lt;/h2&gt;
&lt;p&gt;Now here was me thinking.  Would the plugin be necessary to accomplish all
of the above things or could it be done in a different way?  Native
applications are here to stay, that's a given.  However more and more
stuff of what a native application does can be moved into a browser for
great success.  So how does a web application speak to a native
application?&lt;/p&gt;
&lt;p&gt;The traditional way is by letting the application register a custom URL
scheme and then letting the user click on that link which then launches
the application.  That's unfortunately a one way communication only.  But
that might be everything that is needed.&lt;/p&gt;
&lt;p&gt;So here is how it could be done.  Battlefield or any other application
that wants to do the same but without the browser plugin could instead
register a URL handler with a unique name.  Let's say &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;battlefield3://&lt;/span&gt;&lt;/tt&gt;.
The operating system then knows about this URL scheme and can start a
handling application.  What can we do with this?&lt;/p&gt;
&lt;p&gt;The server component would have to uniquely identify a user for starters.
Considering that each user has to log in that's fine anyways.  Then next
to that user information one would have to remember if the game is
running and how.  What does that mean?  Let's start with the simple case:
the game is not running.  The Battlelog server looks at the current user
and sees he or she does not have the game running.  Consequently it will
generate a unique token and generate a URL to the URL scheme (for instance
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;battlefield3://start?token=...&lt;/span&gt;&lt;/tt&gt;.  It then generates a JavaScript prompt
that informs the user that he has to launch the game by clicking on the
link generated.  This is the only chance in flow that is necessary.  By
clicking that link the user agrees that he wants to start that
application.&lt;/p&gt;
&lt;p&gt;But instead of launching the game it starts a daemon.  That daemon takes
the token and picks a random TCP port on the system and starts an HTTP
server there.  Once that server is running it notifies the central server
that it's running and on what port.  Since the web browser has a push
notification channel open it will get a notification now that the daemon
is running and on which port.&lt;/p&gt;
&lt;p&gt;After that it can use HTTP and JSONP to communicate with the daemon.  But
how does the daemon know when to shut down?  Basically that daemon will
needs to be informed when to shut down.  I would assume that 15 minutes
without a ping from the browser would be a good indication that it should
destruct itself.  When shutting down it also tells Battlelog that it's no
longer running to clear out the port entry.&lt;/p&gt;
&lt;p&gt;Additionally to make this better it should not only record the port but
also an identifier that uniquely identifies the machine the daemon is
running on so that the user can alternate between different computers
without ending up with weird behavior where the central server is
informing the browser that the game is running when in fact it's running
on a different machine.&lt;/p&gt;
&lt;p&gt;Since Battlefield 3 supports only one running game per user account it
does not make sense to support more than one session.  If that would be
wanted it could obviously be done.&lt;/p&gt;
&lt;p&gt;The downside here obviously is that it needs a websocket connection and a
central server that acts as mediator between the different systems
(daemon, client side app).  In Battlefield 3's case that would not be a
concern (and already is not) since it's an online game.  The second
problem here is that it needs one additional user interaction: the user
has to click on the link to activate it.  This currently is not necessary
in Battlelog since it's provided by a plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;browser-native-code-communication&quot;&gt;
&lt;h2&gt;Browser &amp;lt;-&amp;gt; Native Code Communication&lt;/h2&gt;
&lt;p&gt;The whole concept of using a browser application as a frontend for a
native application is an interesting thing indeed.  Due to offline support
becoming widespread that is also no longer a concern if the application
can largely run in the client side.  But that would break my above
hypothetical example of interacting with a local application.&lt;/p&gt;
&lt;p&gt;Falling back to a browser plugin currently is the only way to make a
consenting communication with a local application.  I really wonder if
there is not room for improvement by having an API in HTML5 that makes
this possible which would also work for offline applications.&lt;/p&gt;
&lt;p&gt;Basically what would be needed is a simple way for a two way communication
with a local application.  That application would have to register itself
somewhere and then be able to respond to the client's requests.  It could
totally work like a CGI script (eg: speak HTTP via stdin/stdout).&lt;/p&gt;
&lt;p&gt;I think there is a lot of potential for such applications in the future
and Battlelog shows that it can be done already with a little help of a
small plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;killer-applications&quot;&gt;
&lt;h2&gt;Killer Applications&lt;/h2&gt;
&lt;p&gt;One last thing.  Battlefield 3 sold a couple millions of copies.  The PC
users all have to update to recent version of their browsers since the
website basically demands a modern browser.  Even with all the fallbacks
in place, it kinda forces people to update.  For a certain audience
websites like Battlelog can be the killer application of modern HTML5
features.  Keep this in mind.  In case you have a similar audience that's
something to take advantage of.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Be Careful About What You Dislike</title>
    <id>http://lucumr.pocoo.org/2016/11/5/be-careful-about-what-you-dislike</id>
    <updated>2016-11-05T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2016/11/5/be-careful-about-what-you-dislike" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;The last few months I keep making the same observation over and over again
in various different contexts: that whenever you are confronted with a
very strong opinion about a topic, reasonable discussions about the topic
often involve arguments that have long become outdated or are no longer
strictly relevant to the conversation.&lt;/p&gt;
&lt;p&gt;What I mean by that is that given a controversial topic, a valid argument
for one side of the other is being repeated by a crowd of people that once
heard it, even after that argument stops being valid.  This happens because
often the general situation changed and the argument references a reality
that no longer exists in the same form.  Instead of reevaluating the
environment however, goalposts are moved to restore the general sentiment
of the opinion.&lt;/p&gt;
&lt;p&gt;To give you a practical example of this problem I can just go by a topic I
have a very strong opinion about: Python 3.  When Python 3 was not a huge
thing yet I started having conversations with people in the community
about the problems I see with splitting the community and complexity of
porting.  Not just that, I also kept bringing up general questions about
some of the text and byte decisions.  I started doing talks about the
topic and write blog articles that kept being shared.  Nowadays when I go
to a conference I very quickly end up in conversations where other
developers come to me and see me as the &amp;quot;Does not like Python 3 guy&amp;quot;.
While I still am not a friend of some of the decisions in Python 3 I am
very much aware that Python 3 in 2016 is a very different Python 3 than 6
years ago or earlier.&lt;/p&gt;
&lt;p&gt;In fact, I myself campaigned for some changes to Python 3 that made it
possible to achieve better ports (like the reintroduction of the &lt;cite&gt;u&lt;/cite&gt;
prefix on Unicode string literals) and the bulk of my libraries work on
Python 3 for many years now.  It's a fact that in 2016 the problems that
people have with Python 3 are different than they used to have before.&lt;/p&gt;
&lt;p&gt;This leads to very interesting conversations where I can have a highly
technical conversation about a very specific issue with Python 3 and
thoughts about how to do it differently or deal with it (like some of the
less obvious consequences of the new text storage model) and another
person joins into the conversation with an argument against Python 3 that
has long stropped being valid.  Why?  Because there is a cost towards
porting to Python 3 and a chance is not seen.  This means that a person
with a general negativity towards Python 3 would seek me out and try to
reaffirm their opposition to a port to it.&lt;/p&gt;
&lt;p&gt;Same thing is happening with JavaScript where there is a general negative
sentiment about programming in it but not everybody is having good
arguments for it.  There are some that actually program a lot in it and
dislike specific things about the current state of the ecosystem, but
generally acknowledge that the language is evolving, and then there are
those that take advantage of unhappiness and bring their heavily outdated
opposition against JavaScript into a conversation just to reaffirm their
own opinion.&lt;/p&gt;
&lt;p&gt;This is hardly confined to the programming world.  I made the same
discovery about CETA.  CETA is a free trade agreement between the European
Union and Canada and it had the misfortune of being negotiated at the same
time as the more controversial TTIP with the US.  The story goes roughly
like this: TTIP was negotiated in secrecy (as all trade agreements are)
and there were strong disagreements between what the EU and what the US
thought trade should look like.  Those differences were about food safety
standards and other highly sensitive topics.  Various organizations on
both the left and right extremes of the political scale started to grab
any remotely controversial information that leaked out to shift the public
opinion towards negativity to TTIP.  Then the entire thing spiraled out of
control: people not only railed against TTIP but took their opposition
and looked for similar contracts and found CETA.  Since both are trade
agreements there is naturally a lot of common ground between them.  The
subtleties where quickly lost.  Where the initial arguments against TTIP
were food standards, public services and intransparent ISDS courts many of
the critics failed to realize that CETA fundamentally was a different
beast.  Not only was it already a much improved agreement from the start,
but it kept being modified from the initial public version of it to the
one that was finally sent to national parliaments.&lt;/p&gt;
&lt;p&gt;However despite what I would have expected: that critics go in and
acknowledge that their criticism was being heard instead slowly moved the
goalposts.  At this point there is so much emotion and misinformation in
the general community that the goalpost moved all the way to not
supporting further free trade at all.  In the general conversation about
ISDS and standards many people brought introduced their own opinions about
free trade and their dislike towards corporations and multinationals.&lt;/p&gt;
&lt;p&gt;This I assume is human behavior.  Admitting that you might be wrong is
hard enough, but it's even harder when you had validation that you were
right in the past.  In particular that an argument against something might
no longer be valid because that something has changed in the meantime is
hard.  I'm not sure what the solution to this is but I definitely realized
in the few years on my own behavior that one needs to be more careful
about stating strong opinions in public.  At the same time however I think
we should all be more careful dispelling misinformation in conversations
even if the general mood supports your opinion.  As an example while
emotionally I like hearing stories about how JavaScript's packaging causes
pain to developers since I experienced it first hand, I know from a
rational point of view that the ecosystem is improving a tremendous
speeds.  Yes I have been burned by npm but it's not like this is not
tremendously improving.&lt;/p&gt;
&lt;p&gt;Something that has been put to paper once is hard to remove from people's
minds.  In particular in the technological context technology moves so
fast that very likely something you read once might no longer be up to
date as little as six months later.&lt;/p&gt;
&lt;p&gt;So I suppose my proposal to readers is not to fall into that trap and to
assume that the environment around oneself keeps on changing.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Be careful with exec and eval in Python</title>
    <id>http://lucumr.pocoo.org/2011/2/1/exec-in-python</id>
    <updated>2011-02-01T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2011/2/1/exec-in-python" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;One of the perceived features of a dynamic programming language like
Python is the ability to execute code from a string.  In fact many people
are under the impression that this is the main difference between
something like Python and C#.  That might have been true when the people
compared Python to things like C.  It's certainly not a necessarily a
feature of the language itself.  For instance Mono implements the compiler
as a service and you can compile C# code at runtime, just like Python
compiles code at runtime.&lt;/p&gt;
&lt;p&gt;Wait what.  Python compiles?  That is correct.  CPython and PyPy (the
implementations worth caring about currently) are in fact creating a code
object from the string you pass to &lt;cite&gt;exec&lt;/cite&gt; or &lt;cite&gt;eval&lt;/cite&gt; before executing it.
And that's just one of the things many people don't know about the exec
statement.  So this post aims to clean up some of the misconceptions about
the &lt;cite&gt;exec&lt;/cite&gt; keyword (or builtin function in Python 3) and why you have to
be careful with using it.&lt;/p&gt;
&lt;p&gt;This post was inspired by a discussion on reddit about the use of the
&lt;cite&gt;execfile&lt;/cite&gt; function in the &lt;a class=&quot;reference external&quot; href=&quot;http://web2py.com/&quot;&gt;web2py&lt;/a&gt; web framework
but also applies to other projects.  Some of this here might actually not
affect web2py at all and is just a general suggestion of how to deal with
&lt;cite&gt;exec&lt;/cite&gt;.  There are some very good reasons for using &lt;cite&gt;exec&lt;/cite&gt; when that's the
right thing to do.&lt;/p&gt;
&lt;p&gt;Disclaimer beforehand: the numbers for this post are taken from Python 2.7
on OS X.  Do not ever trust benchmarks, take them only as a reference and
test it for yourself on your target environment.  Also: “Yay, another post
about the security implications of &lt;cite&gt;eval&lt;/cite&gt;/&lt;cite&gt;exec&lt;/cite&gt;.”  Wrong!  I am assuming
that everybody already knows how to &lt;em&gt;properly&lt;/em&gt; use these two, so I will
not talk about security here.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;behind-the-scenes-of-imports&quot;&gt;
&lt;h2&gt;Behind the Scenes of Imports&lt;/h2&gt;
&lt;p&gt;Let's start with everybody's favourite topic: Performance.  That's
probably the most pointless argument against &lt;cite&gt;exec&lt;/cite&gt;, but well, it's
important to know though.  But before that, let's see what Python roughly
does if you import a module (&lt;tt class=&quot;docutils literal&quot;&gt;import foo&lt;/tt&gt;):&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;it locates the module (surprise).  That happens by traversing the
&lt;cite&gt;sys.path&lt;/cite&gt; info in various ways.  There is builtin import logic, there
are import hooks and all in all there is a lot of magic involved I
don't want to go into.  If you are curious, check &lt;a class=&quot;reference external&quot; href=&quot;http://svn.python.org/view/sandbox/trunk/import_in_py/&quot;&gt;this&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://www.python.org/dev/peps/pep-0302/&quot;&gt;this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Now depending on the import hook responsible it might load bytecode
(&lt;cite&gt;.pyc&lt;/cite&gt;) or sourcecode (&lt;cite&gt;.py&lt;/cite&gt;):&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;If bytecode is available and the magic checksum matches the
current Python interpreter's version, the timestamp of the
bytecode file is newer or equal to the source version (or the
source does not exist) it will load that.&lt;/li&gt;
&lt;li&gt;If the bytecode is missing or outdated it will load the source
file and compile that to bytecode.  For that it checks magic
comments in the file header for encoding settings and decodes
according to those settings.  It will also check if a special
tab-width comment exists to treat tabs as something else than 8
characters if necessary.  Some import hooks will then generate
&lt;cite&gt;.pyc&lt;/cite&gt; files or store the bytecode somewhere else (&lt;cite&gt;__pycache__&lt;/cite&gt;)
depending on Python version and implementation.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The Python interpreter creates a new module object (you can do that on
your own by calling &lt;cite&gt;imp.new_module&lt;/cite&gt; or creating an instance of
&lt;cite&gt;types.ModuleType&lt;/cite&gt;.  Those are equivalent) with a proper name.&lt;/li&gt;
&lt;li&gt;If the module was loaded from a file the &lt;cite&gt;__file__&lt;/cite&gt; key is set.  The
import system will also make sure that &lt;cite&gt;__package__&lt;/cite&gt; and &lt;cite&gt;__path__&lt;/cite&gt;
are set properly if packages are involved before the code is executed.
Import hooks will furthermore set the &lt;cite&gt;__loader__&lt;/cite&gt; variable.&lt;/li&gt;
&lt;li&gt;The Python interpreter executes the bytecode in the context of the
dictionary of the module.  Thus the frame locals and frame globals for
the executed code are the &lt;cite&gt;__dict__&lt;/cite&gt; attribute of that module.&lt;/li&gt;
&lt;li&gt;The module is inserted into &lt;cite&gt;sys.modules&lt;/cite&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now first of all, none of the above steps ever passed a string to the
&lt;cite&gt;exec&lt;/cite&gt; keyword or function.  That's obviously true because that happens
deep inside the Python interpreter unless you are using an import hook
written in Python.  But even if the Python interpreter was written in
Python it would never pass a string to the exec function.  So what would
you want to do if you want to get that string into bytecode yourself?  You
would use the &lt;cite&gt;compile&lt;/cite&gt; builtin:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a = 1 + 2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, &lt;cite&gt;exec&lt;/cite&gt; happily executes bytecode too.  Because the &lt;cite&gt;code&lt;/cite&gt;
variable is actually an object of type &lt;cite&gt;code&lt;/cite&gt; and not a string.  The
second argument to &lt;cite&gt;compile&lt;/cite&gt; is the filename hint.  If we are compiling
from an actual string there we should provide a value enclosed in angular
brackets because this is what Python will do.  &lt;tt class=&quot;docutils literal&quot;&gt;&amp;lt;string&amp;gt;&lt;/tt&gt; and
&lt;tt class=&quot;docutils literal&quot;&gt;&amp;lt;stdin&amp;gt;&lt;/tt&gt; are common values.  If you do have a file to back this up,
please use the actual filename there.  The last parameter is can be one of
&lt;tt class=&quot;docutils literal&quot;&gt;'exec'&lt;/tt&gt;, &lt;tt class=&quot;docutils literal&quot;&gt;'eval'&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;'single'&lt;/tt&gt;.  The first one is what exec is
using, the second is what the &lt;cite&gt;eval&lt;/cite&gt; function uses.  The difference is
that the first can contain statements, the second only expressions.
&lt;tt class=&quot;docutils literal&quot;&gt;'single'&lt;/tt&gt; is a form of hybrid mode which is useless for anything but
interactive shells.  It exists solely to implement things like the
interactive Python shell and is very limited in use.&lt;/p&gt;
&lt;p&gt;Here however we were already using a feature you should never, ever, ever
use: executing code in the calling code's namespace.  What should you do
instead?  Execute against a new environment:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a = 1 + 2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why should you do that?  Cleaner for starters, also because exec without a
dictionary has to hack around some implementation details in the
interpreter.  We will cover that later.  For the moment: if you want to
use &lt;cite&gt;exec&lt;/cite&gt; and you plan on executing that code more than once, make sure
you compile it into bytecode first and then execute that bytecode only and
only in a new dictionary as namespace.&lt;/p&gt;
&lt;p&gt;In Python 3 the &lt;tt class=&quot;docutils literal&quot;&gt;exec ... in&lt;/tt&gt; statement disappeared and instead you can
use the new &lt;cite&gt;exec&lt;/cite&gt; function which takes the globals and locals
dictionaries as parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;performance-characteristics&quot;&gt;
&lt;h2&gt;Performance Characteristics&lt;/h2&gt;
&lt;p&gt;Now how much faster is executing bytecode over creating bytecode and
executing that?:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ python -mtimeit -s 'code = &amp;quot;a = 2; b = 3; c = a * b&amp;quot;' 'exec code'
10000 loops, best of 3: 22.7 usec per loop

$ python -mtimeit -s 'code = compile(&amp;quot;a = 2; b = 3; c = a * b&amp;quot;,
  &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, &amp;quot;exec&amp;quot;)' 'exec code'
1000000 loops, best of 3: 0.765 usec per loop
&lt;/pre&gt;
&lt;p&gt;32 times as fast for a very short code example.  It becomes a lot worse
the more code you have.  Why is that the case?  Because parsing Python
code and converting that into Bytecode is an expensive operation compared
to evaluating the bytecode.  That of course also affects &lt;cite&gt;execfile&lt;/cite&gt; which
totally does not use bytecode caches, how should it.  It's not gonna
magically check if there is a &lt;cite&gt;.pyc&lt;/cite&gt; file if you are passing the path to a
&lt;cite&gt;foo.py&lt;/cite&gt; file.&lt;/p&gt;
&lt;p&gt;Alright, lesson learned.  &lt;cite&gt;compile&lt;/cite&gt; + &lt;cite&gt;exec&lt;/cite&gt; &amp;gt; &lt;cite&gt;exec&lt;/cite&gt;.  What else has to
be considered when using &lt;cite&gt;exec&lt;/cite&gt;?  The next thing you have to keep in mind
is that there is a huge difference between the global scope and the local
scope.  While both the global scope and the local scope are using
dictionaries as a data storage, the latter actually is not.  Local
variables in Python are just pulled from the frame local dictionary and
put there as necessary.  For all calculations that happen between that,
the dictionary is never ever used.  You can quickly verify this yourself.&lt;/p&gt;
&lt;p&gt;Execute the following thing in the Python interpreter:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Works as expected.  Why?  Because the interactive Python shell executes
code as part of the global namespace like any code outside of functions or
class declarations.  The local scope &lt;em&gt;is&lt;/em&gt; the global scope:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now what happens if we do this at function level?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How unfortunate.  No magic variable changing for us.  That however is only
partially correct.  There is a Python opcode for synchronizing the frame
dictionary with the variables from the fast local slots.  There are two
ways this synchronization can happen: from fast local to dictionary and
the other way round.  The former is implicitly done for you when you call
&lt;cite&gt;locals()&lt;/cite&gt; or access the &lt;cite&gt;f_locals&lt;/cite&gt; attribute from a frame object, the
latter happens either explicitly when using some opcodes (which I don't
think are used by Python as part of the regular compilation process but
nice for hacks) or when the &lt;cite&gt;exec&lt;/cite&gt; statement is used in the frame.&lt;/p&gt;
&lt;p&gt;So what are the performance characteristics of code executed in a global
scope versus code executed at a local scope?  This is a lot harder to
measure because the &lt;cite&gt;timeit&lt;/cite&gt; module does not allow us to execute code at
global scope by default.  So we will need to write a little helper module
that emulates that:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code_global&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;sum = 0&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;for x in xrange(500000):&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    sum += x&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;code_local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;def f():&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    sum = 0&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    for x in xrange(500000):&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        sum += x&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code_global&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code_local&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we compile two times the same algorithm into a string.  One time
directly globally, one time wrapped into a function.  Then we have two
functions.  The first one executes that code in an empty dictionary, the
second executes the code in a new dictionary and then calls the function
that was declared.  Let's ask &lt;cite&gt;timeit&lt;/cite&gt; how fast we are:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ python -mtimeit -s 'from execcompile import test_global as t' 't()'
10 loops, best of 3: 67.7 msec per loop

$ python -mtimeit -s 'from execcompile import test_local as t' 't()'
100 loops, best of 3: 23.3 msec per loop
&lt;/pre&gt;
&lt;p&gt;Again, an increase in performance &lt;a class=&quot;footnote-reference&quot; href=&quot;#timingfix&quot; id=&quot;id1&quot;&gt;[3]&lt;/a&gt;.  Why is that?  That has
to do with the fact that fast locals are faster than dictionaries (duh).
What is a fast local?  In a local scope Python keeps track of the names of
variables it knows about.  Each of that variable is assigned a number
(index).  That index is used in an array of Python objects instead of a
dictionary.  It will only fall back to the dictionary if this is necessary
(debugging purposes, &lt;cite&gt;exec&lt;/cite&gt; statement used at local scope).  Even though
&lt;cite&gt;exec&lt;/cite&gt; still exists in Python 3 (as a function) you no longer it at a
local scope to override variables.  The Python compiler does not check if
the &lt;cite&gt;exec&lt;/cite&gt; builtin is used and will not unoptimize the scope because of
that &lt;a class=&quot;footnote-reference&quot; href=&quot;#exec&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All of the above knowledge is good to know if you plan on utilizing the
Python interpreter to interpret your own language by generating Python
code and compiling it to bytecode.  That's for instance how template
engines like Mako, Jinja2 or Genshi work internally in one way or another.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;semantics-and-unwritten-conventions&quot;&gt;
&lt;h2&gt;Semantics and Unwritten Conventions&lt;/h2&gt;
&lt;p&gt;However most people are using the &lt;cite&gt;exec&lt;/cite&gt; statement for something else:
executing actual Python code from different locations.  A very popular use
case is executing config files as Python code.  That's for example what
&lt;a class=&quot;reference external&quot; href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt; does if you tell it to.  That's usually
okay because you don't expect your config file to be a place where you
implement actual code.  However there are also people that use &lt;cite&gt;exec&lt;/cite&gt; to
load actual Python code that declares functions and classes.  This is a
very popular pattern in some plugin systems and the web2py framework.&lt;/p&gt;
&lt;p&gt;Why is that not a good idea?  Because it breaks some (partially unwritten)
conventions about Python code:&lt;/p&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Classes and functions belong into a module.  That basic rule holds for
all functions and classes imported from regular modules:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;xml.sax.saxutils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quoteattr&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quoteattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__module__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;xml.sax.saxutils&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why is that important?  Because that is how pickle works &lt;a class=&quot;footnote-reference&quot; href=&quot;#pickle&quot; id=&quot;id3&quot;&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quoteattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;function quoteattr at 0x1005349b0&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quoteattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__module__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;fake&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quoteattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;  ..&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;pickle.PicklingError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;Can&amp;#39;t pickle quoteattr: it&amp;#39;s not found as fake.quoteattr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are using &lt;cite&gt;exec&lt;/cite&gt; to execute Python code, be prepared that
some modules like pickle, inspect, pkgutil, pydoc and probably some
others that depend on those will not work as expected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;CPython has a cyclic garbage collector, classes can have destructors
and interpreter shutdown breaks up cycles.  What does it mean?&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;CPython uses refcounting internally.  One (of many) downsides of
refcounting is that it cannot detect circular dependencies between
objects.  Thus Python introduced a cyclic garbage collector at one
point.&lt;/li&gt;
&lt;li&gt;Python however also allows destructors on objects.  Destructors
however mean that the cyclic garbage collector will skip these
objects because it does not know in what order it should delete
these objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let's look at an innocent example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__del__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Deleted&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's execute that file:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ python test.py
Deleted
&lt;/pre&gt;
&lt;p&gt;Looks good.  Let's try that with exec:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;execfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test.py&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;execfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test.py&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;execfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test.py&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gc&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It clearly collected something, but it never collected our &lt;cite&gt;Foo&lt;/cite&gt;
instances.  What the hell is happening?  What's happening is that
there is an implicit cycle between &lt;cite&gt;foo&lt;/cite&gt;, and the &lt;cite&gt;__del__&lt;/cite&gt; function
itself.  The function knows the scope it was created in and from
&lt;cite&gt;__del__&lt;/cite&gt; -&amp;gt; global scope -&amp;gt; &lt;cite&gt;foo&lt;/cite&gt; instance it has a nice cycle.&lt;/p&gt;
&lt;p&gt;Now now we know the cause, why doesn't it happen if you have a module?
The reason for that is that Python will do a trick when it shuts down
modules.  It will override all global values that do not begin with an
underscore with &lt;cite&gt;None&lt;/cite&gt;.  We can easily verify that if we print the
value of &lt;cite&gt;foo&lt;/cite&gt; instead of &lt;tt class=&quot;docutils literal&quot;&gt;'Deleted'&lt;/tt&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__del__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And of course it's &lt;cite&gt;None&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ python test.py
None
&lt;/pre&gt;
&lt;p&gt;So if we want to replicate that with &lt;cite&gt;exec&lt;/cite&gt; or friends, we have to
apply the same logic, but Python will not do that for us.  If we are
not careful this could lead to hard to spot memory leaks.  And this is
something many people rely on, because it's &lt;a class=&quot;reference external&quot; href=&quot;http://docs.python.org/reference/datamodel.html#object.__del__&quot;&gt;documented behaviour&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Lifetime of objects.  A global namespace sticks around from when it
was imported to the point where the interpreter shuts down.  With
&lt;cite&gt;exec&lt;/cite&gt; you as a user no longer know when this will happen.  It might
happen at a random point before.  web2py is a common offender here.
In web2py the magically executed namespace comes and goes each request
which is very surprising behaviour for any experienced Python
developer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;python-is-not-php&quot;&gt;
&lt;h2&gt;Python is not PHP&lt;/h2&gt;
&lt;p&gt;Don't try to circumvent Python idioms because some other language does it
differently.  Namespaces are in Python for a reason and just because it
gives you the tool &lt;cite&gt;exec&lt;/cite&gt; it does not mean you should use that tool.  C
gives you &lt;cite&gt;setjmp&lt;/cite&gt; and &lt;cite&gt;longjmp&lt;/cite&gt; and yet you will be very careful with
using it.  The combination of &lt;cite&gt;exec&lt;/cite&gt; and &lt;cite&gt;compile&lt;/cite&gt; are a powerful tool for
anyone that wants to implement a domain specific language on top of Python
or for developers interested in &lt;em&gt;extending&lt;/em&gt; (not circumventing) the Python
import system.&lt;/p&gt;
&lt;p&gt;A python developer depends on imports doing what they are documented to do
and that the namespace has a specific initial value (namely that it's
empty with the exception of a few internal variables such as &lt;cite&gt;__name__&lt;/cite&gt;,
&lt;cite&gt;__loader__&lt;/cite&gt; etc.).  A Python developer depends on being able to import
that module by a dotted name, on the fact that modules shut down in a
specific way, that they are cached in &lt;cite&gt;sys.modules&lt;/cite&gt; etc.&lt;/p&gt;
&lt;p&gt;Jacob Kaplan-Moss &lt;a class=&quot;reference external&quot; href=&quot;http://www.reddit.com/r/Python/comments/ex54j/seeking_clarification_on_pylonsturbogearspyramid/c1bo1v5&quot;&gt;wrote a comment on Reddit&lt;/a&gt;
about the use of &lt;cite&gt;exec&lt;/cite&gt; in web2py a while ago which I would recommend
reading.  He brings up some very good points why changing the semantics of
a language is a bad idea.&lt;/p&gt;
&lt;p&gt;However web2py and it's use of &lt;cite&gt;execfile&lt;/cite&gt; are not the only offenders in
the Python web community.  Werkzeug has it's fair share of abusing Python
conventions as well.  We were shipping (and still do) an on-demand import
system which caused more problems than it solved and are currently in the
progress of moving away from it (despite all the pain this is for us).
Django abused Python internals as well.  It was generating Python code on
the fly and totally changing semantics (to the point where imports
vanished without warning!).  They learned their lesson as well and fixed
that problem in the magic removal branch.  Same goes for web.py which was
abusing the &lt;cite&gt;print&lt;/cite&gt; statement to write into an internal thread-local
buffer that was then sent out as response to the browser.  Also something
that turned out to be a bad idea and was subsequently removed.&lt;/p&gt;
&lt;p&gt;With that I encourage the web2py developers to reconsider their decision
on the use of the &lt;cite&gt;exec&lt;/cite&gt; statement and using regular Python modules.&lt;/p&gt;
&lt;p&gt;Because one of the things we all have to keep in mind: if a Python
developer starts his journeys in the twisted world of wrongly executed
Python modules they will be very confused when they continue their travels
in another Python environment.  And having different semantics in
different frameworks/modules/libraries is very hurtful for Python as a
runtime and language.&lt;/p&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;exec&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;if one wants to argue that this is obvious: it should be.  But
Python does track another builtin function to change the behaviour of
the compiler: &lt;cite&gt;super&lt;/cite&gt;.  So it would have been possible to do the same
with &lt;cite&gt;exec&lt;/cite&gt;.  It's for the better however that this does not happen.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;pickle&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id3&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;p class=&quot;first&quot;&gt;if you however set &lt;cite&gt;__module__&lt;/cite&gt; to &lt;cite&gt;None&lt;/cite&gt; you will notice
that Python is magically still able to find your function if it
originated from a module registered in &lt;cite&gt;sys.modules&lt;/cite&gt;.  How does that
work?  It will actually walk through &lt;em&gt;all the modules&lt;/em&gt; and look at &lt;em&gt;all
the global variables&lt;/em&gt; to find that function again.&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;I have no idea who came up with that idea, but it's an incredible slow
operation if a lot of modules are loaded.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;timingfix&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I actually made a mistake in this benchmark.  As correctly
pointed out by &lt;a class=&quot;reference external&quot; href=&quot;http://twitter.com/thp4&quot;&gt;&amp;#64;thp4&lt;/a&gt; the benchmark was
flawed because it was comparing different iterations.  This has since
been fixed.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Be Careful with Python's New-Style String Format</title>
    <id>http://lucumr.pocoo.org/2016/12/29/careful-with-str-format</id>
    <updated>2016-12-29T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2016/12/29/careful-with-str-format" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;This should have been obvious to me for a longer time, but until earlier
today I did not really realize the severity of the issues caused by
&lt;cite&gt;str.format&lt;/cite&gt; on untrusted user input.  It came up as a way to bypass the
Jinja2 Sandbox in a way that would permit retrieving information that you
should not have access to which is why I just pushed out a &lt;a class=&quot;reference external&quot; href=&quot;https://www.palletsprojects.com/blog/jinja-281-released/&quot;&gt;security
release&lt;/a&gt; for
it.&lt;/p&gt;
&lt;p&gt;However I think the general issue is quite severe and needs to be a
discussed because most people are most likely not aware of how easy it is
to exploit.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-core-issue&quot;&gt;
&lt;h2&gt;The Core Issue&lt;/h2&gt;
&lt;p&gt;Starting with Python 2.6 a new format string syntax landed inspired by
.NET which is also the same syntax that is supported by Rust and some
other programming languages.  It's available behind the &lt;cite&gt;.format()&lt;/cite&gt; method
on byte and unicode strings (on Python 3 just on unicode strings) and it's
also mirrored in the more customizable &lt;cite&gt;string.Formatter&lt;/cite&gt; API.&lt;/p&gt;
&lt;p&gt;One of the features of it is that you can address both positional and
keyword arguments to the string formatting and you can explicitly reorder
items at all times.  However the bigger feature is that you can access
attributes and items of objects.  The latter is what is causing the
problem here.&lt;/p&gt;
&lt;p&gt;Essentially one can do things like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class of {0} is {0.__class__}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;quot;class of 42 is &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In essence: whoever controls the format string can access potentially
internal attributes of objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;where-does-it-happen&quot;&gt;
&lt;h2&gt;Where does it Happen?&lt;/h2&gt;
&lt;p&gt;First question is why would anyone control the format string.  There are a
few places where it shows up:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;untrusted translators on string files.  This is a big one because many
applications that are translated into multiple languages will use
new-style Python string formatting and not everybody will vet all the
strings that come in.&lt;/li&gt;
&lt;li&gt;user exposed configuration.  One some systems users might be permitted
to configure some behavior and that might be exposed as format
strings.  In particular I have seen it where users can configure
notification mails, log message formats or other basic templates in web
applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;levels-of-danger&quot;&gt;
&lt;h2&gt;Levels of Danger&lt;/h2&gt;
&lt;p&gt;For as long as only C interpreter objects are passed to the format string
you are somewhat safe because the worst you can discover is some internal
reprs like the fact that something is an integer class above.&lt;/p&gt;
&lt;p&gt;However tricky it becomes once Python objects are passed in.  The reason
for this is that the amount of stuff that is exposed from Python functions
is pretty crazy.  Here is an example from a hypothetical web application
setup that would leak the secret key:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;super secret key&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the user can inject &lt;cite&gt;format_string&lt;/cite&gt; here they could discover the secret
string like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{event.__init__.__globals__[CONFIG][SECRET_KEY]}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;sandboxing-formatting&quot;&gt;
&lt;h2&gt;Sandboxing Formatting&lt;/h2&gt;
&lt;p&gt;So what do you do if you do need to let someone else provide format
strings?  You can use the somewhat undocumented internals to change the
behavior.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagicFormatMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;This class implements a dummy wrapper to fix a bug in the Python&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    standard library for string formatting.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    See http://bugs.python.org/issue13598 for information about why&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    this is necessary.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_last_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_last_index&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_last_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;LookupError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__len__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This is a necessary API but it&amp;#39;s undocumented and moved around&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# between Python releases&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;_string&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter_field_name_split&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter_field_name_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; \
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_formatter_field_name_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SafeFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter_field_name_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safe_getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;safe_getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Expand the logic here.  For instance on 2.x you will also need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to disallow func_globals, on 3.x you will also need to hide&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# things like cr_frame and others.  So ideally have a list of&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# objects that are entirely unsafe to access.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;safe_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SafeFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagicFormatMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vformat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can use the &lt;cite&gt;safe_format&lt;/cite&gt; method as a replacement for
&lt;cite&gt;str.format&lt;/cite&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{0.__class__}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;quot;&amp;lt;type &amp;#39;int&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;safe_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{0.__class__}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Beautiful Native Libraries</title>
    <id>http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries</id>
    <updated>2013-08-18T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;I'm obsessed with nice APIs.  Not just APIs however, also in making the
overall experience of using a library as good as possible.  For Python
there are quite a few best practices around by now but it feels like there
is not really a lot of information available about how to properly
structure a native library.  What do I mean by native library?
Essentially a dylib/DLL/so.&lt;/p&gt;
&lt;p&gt;Since I'm currently spending more time on C and C++ than Python at work I
figured I might take the opportunity and collect my thoughts on how to
write proper shared libraries that do not annoy your users.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;shared-or-static&quot;&gt;
&lt;h2&gt;Shared or Static?&lt;/h2&gt;
&lt;p&gt;This post almost entirely assumes that you are building a DLL or shared
library and not something you link statically.  While it sounds like a
statically and dynamically linked library are essentially the same thing
where the only difference is how you link against it, there is much more
to it.&lt;/p&gt;
&lt;p&gt;With a dynamically linked library you have much better control over your
symbols.  Dynamically linked libraries also work much better between
different programming languages.  Nothing stops you from writing a library
in C++ and then using it in Python.  In fact, that's exactly how I
recommend doing unittests against such libraries.  More about that later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;which-language&quot;&gt;
&lt;h2&gt;Which Language?&lt;/h2&gt;
&lt;p&gt;So you want to write a library that compiles into a DLL or something of
that sort and it should be somewhat platform independent.  Which languages
can you actually use there?  Right now you can pick between C and C++ and
soon you might also be able to add Rust to that list.  Why not others?  C
is easy: because that's the only language that actually defines a somewhat
stable ABI.  Strictly speaking it's not the language that defines it, it's
the operating system, but in one way or another, C is the language of
choice for libraries and the C calling conventions is the lingua franca of
shared libraries.&lt;/p&gt;
&lt;p&gt;“The greatest trick that C ever pulled was convince the world that it does
not have a runtime”.  I'm not sure where I heard the quote first, but it's
incredibly appropriate when talking about libraries.  Essentially C is so
commonplace that everything can assume that some basic functionality is
provided by the C standard library.  That's the one thing that everybody
agreed on that exists.  For C++ the situation is more complicated.  C++
needs a bunch of extra functionality that is not provided by the C
standard library.  Primarily it needs support for exception handling.  C++
however degrades otherwise nicely to C calling conventions so it's very
easy to still write libraries in it, that completely hide the fact that
there is C++ behind the scenes.&lt;/p&gt;
&lt;p&gt;For other languages that's not so easy however.  Why for instance is it
not a good idea to write a library in Go?  The reason for this is that Go
for needs quite a heavy runtime that does garbage collection and provides
a scheduler for it's coroutines.  Rust is getting closer to not having any
runtime requirements besides the C standard library which will make it
possible to write libraries in it.&lt;/p&gt;
&lt;p&gt;Right now however, C++ is most likely the language you want to use.  Why
not C?  The reason for this is that Microsoft's C compiler is notoriously
bad at receiving language updates and you would otherwise be stuck with
C89.  Obviously you could just use a different compiler on Windows but
that causes a whole bunch of problems for the users of your library if
they want to compile it themselves.  Requiring a tool chain that is not
native to the operating system is an easy way to alienate your developer
audience.&lt;/p&gt;
&lt;p&gt;I would however generally recommend to a very C like subset of C++: don't
use exceptions, don't use RTTI, don't build crazy constructors.  The rest
of the post assumes that C++ is indeed the language of choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;public-headers&quot;&gt;
&lt;h2&gt;Public Headers&lt;/h2&gt;
&lt;p&gt;The library you're building should ideally have exactly one public header
file.  Internally go nuts and create as many headers as you want.  You
want that one public header file to exist, even if you think your library
is only ever going to be linked against something that is not C.  For
instance Python's CFFI library can parse header files and build bindings
out of that.  People of all languages know how headers work, they will
have a look at them to build their own bindings.&lt;/p&gt;
&lt;p&gt;What rules are there to follow in headers?&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;header-guards&quot;&gt;
&lt;h3&gt;Header Guards&lt;/h3&gt;
&lt;p&gt;Each public header that other people use should have sufficiently unique
header guards to make sure they can be included multiple times safely.
Don't get too creative with the guards, but also don't be too generic with
them.  It's no fun including a header that has a super generic include
guard at the top (like &lt;tt class=&quot;docutils literal&quot;&gt;UTILS_H&lt;/tt&gt; and nothing else).  You also want to
make sure that there are &lt;tt class=&quot;docutils literal&quot;&gt;extern &amp;quot;C&amp;quot;&lt;/tt&gt; markers for C++.&lt;/p&gt;
&lt;p&gt;This would be your minimal header:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef YOURLIB_H_INCLUDED&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define YOURLIB_H_INCLUDED&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef __cplusplus&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* code goes here */&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef __cplusplus&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;export-markers&quot;&gt;
&lt;h3&gt;Export Markers&lt;/h3&gt;
&lt;p&gt;Because you yourself will probably include your header file as well you
will need to make sure that there are macros defined that export your
functions.  This is necessary on Windows and it's a really good idea on
other platforms as well.  Essentially it can be used to change the
visibility of symbols.  I will go into that later, for the time being just
add something that looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef YL_API&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#  ifdef _WIN32&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#     if defined(YL_BUILD_SHARED) &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* build dll */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#         define YL_API __declspec(dllexport)&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#     elif !defined(YL_BUILD_STATIC) &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* use dll */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#         define YL_API __declspec(dllimport)&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#     else &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* static library */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#         define YL_API&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#     endif&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#  else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#     if __GNUC__ &amp;gt;= 4&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#         define YL_API __attribute__((visibility(&amp;quot;default&amp;quot;)))&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#     else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#         define YL_API&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#     endif&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#  endif&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows it will set &lt;tt class=&quot;docutils literal&quot;&gt;YL_API&lt;/tt&gt; (I used &lt;tt class=&quot;docutils literal&quot;&gt;YL&lt;/tt&gt; as short version for
“Your Library” here, pick a prefix that fits you) for DLLs appropriately
depending on what flag is set.  Whoever includes the header without doing
anything fancy before will automatically get &lt;tt class=&quot;docutils literal&quot;&gt;__declspec(dllimport)&lt;/tt&gt; in
its place.  This is a really good default behavior on Windows.  For other
platforms nothing is set unless a somewhat recent GCC/clang version is
used in which case the default visibility marker is added.  As you can see
some macros can be defined to change which branch is taken.  For instance
when you build the library you would tell the compiler to also defined
&lt;tt class=&quot;docutils literal&quot;&gt;YL_BUILD_SHARED&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;On Windows the default behavior for DLLs has always been: all symbols are
not exported default unless marked with &lt;tt class=&quot;docutils literal&quot;&gt;__declspec(dllexport)&lt;/tt&gt;.  On
other platforms unfortunately the behavior has always been to export
everything.  There are multiple ways to fix that, one is the visibility
control of GCC 4.  This works okay, but there are some extra things that
need to be considered.&lt;/p&gt;
&lt;p&gt;The first is that the in-source visibility control is not the silver
bullet.  For a start the marker will do nothing unless the library is
compiled with &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-fvisibility=hidden&lt;/span&gt;&lt;/tt&gt;.  More important than that however
is that this will only affect your own library.  If you statically link
anything against your library, that library might expose symbols you do
not want to expose.  Imagine for instance you write a library that depends
on another library you want to statically link in.  This library's symbols
will also be exported from your library unless you prevent that.&lt;/p&gt;
&lt;p&gt;This works differently on different platforms.  On Linux you can pass
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--exclude-libs&lt;/span&gt; ALL&lt;/tt&gt; to &lt;tt class=&quot;docutils literal&quot;&gt;ld&lt;/tt&gt; and the linker will remove those symbols
automatically.  On OS X it's tricker because there is no such
functionality in the linker.  The easiest solution is to have a common
prefix for all functions.  For instance if all your functions start with
&lt;tt class=&quot;docutils literal&quot;&gt;yl_&lt;/tt&gt; it's easy to tell the linker to hide everything else.  You do this
by creating a symbols file and then pointing the linker to it with
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-exported_symbols_list&lt;/span&gt; symbols.txt&lt;/tt&gt;.  The contents of this file can be
the single line &lt;tt class=&quot;docutils literal&quot;&gt;_yl_*&lt;/tt&gt;.  Windows we can ignore as DLLs need explicit
export markers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;careful-with-includes-and-defines&quot;&gt;
&lt;h2&gt;Careful with Includes and Defines&lt;/h2&gt;
&lt;p&gt;One thing to be careful about is that your headers should not include
too many things.  Generally I believe it's fine for a header to include
things like &lt;tt class=&quot;docutils literal&quot;&gt;stdint.h&lt;/tt&gt; to get some common integer types.  However what
you should not do is being clever and defining types yourself.  For
instance msgpack had the brilliant idea to define &lt;tt class=&quot;docutils literal&quot;&gt;int32_t&lt;/tt&gt; and a few
other types for Visual Studio 2008 because it lacks the &lt;tt class=&quot;docutils literal&quot;&gt;stdint.h&lt;/tt&gt;
header.  This is problematic as only one library can define those types
then.  Instead the better solution is to ask the user to provide a
replacement &lt;tt class=&quot;docutils literal&quot;&gt;stdint.h&lt;/tt&gt; header for older Visual Studio versions.&lt;/p&gt;
&lt;p&gt;Especially do not ever include &lt;tt class=&quot;docutils literal&quot;&gt;windows.h&lt;/tt&gt; in a library header.  That
header pulls in so much stuff that Microsoft added extra defines to make
it leaner (&lt;tt class=&quot;docutils literal&quot;&gt;WINDOWS_LEAN_AND_MEAN&lt;/tt&gt;, &lt;tt class=&quot;docutils literal&quot;&gt;WINDOWS_EXTRA_LEAN&lt;/tt&gt; and
&lt;tt class=&quot;docutils literal&quot;&gt;NOMINMAX&lt;/tt&gt;).  If you need &lt;tt class=&quot;docutils literal&quot;&gt;windows.h&lt;/tt&gt; included, have a private header
file that's only included for your &lt;tt class=&quot;docutils literal&quot;&gt;.cpp&lt;/tt&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;stable-abi&quot;&gt;
&lt;h2&gt;Stable ABI&lt;/h2&gt;
&lt;p&gt;Do not put any structs into public headers unless you are 100% sure that
you will never change them.  If you do want to expose structs and you do
want to add extra members later, make sure that the user does not have to
allocate that header.  If the user does have to allocate that header, add
a version or size information as first member into the struct.&lt;/p&gt;
&lt;p&gt;Microsoft generally puts the size of structs into the structs to allow
adding members later, but this leads to APIs that are just not fun to use.
If you can try to avoid having too many structs in the headers, if you
can't at least try to come up with alternative methods to make the API
suck less.&lt;/p&gt;
&lt;p&gt;With structs you also run into the issue that alignments might differ
between different compilers.  Unfortunately there are cases where you are
dealing with a project that forces the alignment to be different for the
whole project and that will obviously also affect the structs in your
header file.  The fewer structs the better :-)&lt;/p&gt;
&lt;p&gt;Something that should go without saying: do not make macros part of your
API.  A macro is not a symbol and users of languages not based on C will
hate you for having macros there.&lt;/p&gt;
&lt;p&gt;One more note on the ABI stability: it's a very good idea to include
the version of the library both in the header as well as compiled into
the binary.  That way you can easily verify that the header matches the
binary which can save you lots of headaches.&lt;/p&gt;
&lt;p&gt;Something like this in the header:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define YL_VERSION_MAJOR 1&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define YL_VERSION_MINOR 0&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define YL_VERSION ((YL_VERSION_MAJOR &amp;lt;&amp;lt; 16) | YL_VERSION_MINOR)&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_get_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_is_compatible_dll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this in the implementation file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_get_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YL_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_is_compatible_dll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;major&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_get_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;major&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YL_VERSION_MAJOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;exporting-a-c-api&quot;&gt;
&lt;h2&gt;Exporting a C API&lt;/h2&gt;
&lt;p&gt;When exposing a C++ API to C there is not much that needs to be
considered.  Generally for each internal class you have, you would have an
external opaque struct without any fields.  Then provide functions that
call into your internal functions.  Picture a class like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yourlibrary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;result_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The internal C++ API is quite obvious, but how do you expose that via C?
Because the external ABI now no longer knows how large the structs are you
will need to allocate memory for the external caller or give it a method
to figure out how much memory to allocate.  I generally prefer to allocate
for the external user and provide a free function as well.  For how to
make the memory allocation system still flexible, have a look at the next
part.&lt;/p&gt;
&lt;p&gt;For now this is the external header (this has to be in &lt;tt class=&quot;docutils literal&quot;&gt;extern &amp;quot;C&amp;quot;&lt;/tt&gt;
braces):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_task_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_task_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_task_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_task_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_task_is_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_task_tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_task_get_result_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this is how the shim layer would look like in the implementation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define AS_TYPE(Type, Obj) reinterpret_cast&amp;lt;Type *&amp;gt;(Obj)&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define AS_CTYPE(Type, Obj) reinterpret_cast&amp;lt;const Type *&amp;gt;(Obj)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_task_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yourlibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_task_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yourlibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_task_is_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS_CTYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yourlibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_task_tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AS_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yourlibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_task_get_result_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_task_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS_CTYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yourlibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how the constructor and destructor is fully wrapped.  Now there is
one problem with standard C++: it raises exceptions.  Because constructors
have no return value to signal to the outside that something went wrong it
will raise exceptions if the allocation fails.  That's however not the
only problem.  How do we customize how the library allocates memory now?
C++ is pretty ugly in that regard.  But it's largely fixable.&lt;/p&gt;
&lt;p&gt;Before we go on: please under no circumstances, make a library, that
pollutes the namespace with generic names.  Always put a common prefix
before all your symbols (like &lt;tt class=&quot;docutils literal&quot;&gt;yl_&lt;/tt&gt;) to lower the risk of namespace
clashes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;context-objects&quot;&gt;
&lt;h2&gt;Context Objects&lt;/h2&gt;
&lt;p&gt;Global state is terrible, so what's the solution?  Generally the solution
is to have what I would call “context” objects that hold the state
instead.  These objects would have all the important stuff on that you
would otherwise put into a global variable.  That way the user of your
library can have multiple of those.  Then make each API function take that
context as first parameter.&lt;/p&gt;
&lt;p&gt;This is especially useful if your library is not threadsafe.  That way you
can have one per thread at least, which might already be enough to get
some parallelism out of your code.&lt;/p&gt;
&lt;p&gt;Ideally each of those context objects could also use a different
allocator, but given the complexities of doing that in C++ I would not be
super disappointed if you did not make that work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;memory-allocation-customization&quot;&gt;
&lt;h2&gt;Memory Allocation Customization&lt;/h2&gt;
&lt;p&gt;As mentioned before, constructors can fail and we want to customize memory
allocations, so how do we do this?  In C++ there are two systems
responsible for memory allocations: the allocation operators &lt;tt class=&quot;docutils literal&quot;&gt;operator
new&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;operator new[]&lt;/tt&gt; as well as the allocators for containers.  If
you want to customize the allocator you will need to deal with both.
First you need a way to let others override the allocator functions.  The
simplest is to provide something like this in the public header:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_set_allocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                              &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                              &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YL_API&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_strdup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then in your internal header you can add a bunch of inline functions
that redirect to the function pointers set to an internal struct.  Because
we do not let users provide &lt;tt class=&quot;docutils literal&quot;&gt;calloc&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;strdup&lt;/tt&gt; you probably also
want to reimplement those functions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_allocators_s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_allocators_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_yl_allocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_yl_allocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_yl_allocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_yl_allocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_yl_allocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yl_strdup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the setting of the allocators themselves you probably want to put that
into a separate source file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yl_allocators_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_yl_allocators&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yl_set_allocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_yl_allocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_malloc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_yl_allocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_realloc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_yl_allocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;memory-allocators-and-c&quot;&gt;
&lt;h2&gt;Memory Allocators and C++&lt;/h2&gt;
&lt;p&gt;Now that we have those functions set, how do we make C++ use them?  This
part is tricky and annoying.  To get your custom classes allocated through
your &lt;tt class=&quot;docutils literal&quot;&gt;yl_malloc&lt;/tt&gt; you need to implement the allocation operators in all
your classes.  Because that's quite a repetitive process I recommend
writing a macro for it that can be placed in the private section of the
class.  I chose to pick by convention that it has to go into private, even
though the function it implements are public.  Primarily I did that so
that it lives close to where the data is defined, which in my case is
usually private.  You will need to make sure you don't forget adding that
macro to all your classes private sections:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define YL_IMPLEMENTS_ALLOCATORS \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;public: \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;    void *operator new(size_t size) { return yl_malloc(size); } \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;    void operator delete(void *ptr) { yl_free(ptr); } \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;    void *operator new[](size_t size) { return yl_malloc(size); } \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;    void operator delete[](void *ptr) { yl_free(ptr); } \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;    void *operator new(size_t, void *ptr) { return ptr; } \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;    void operator delete(void *, void *) {} \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;    void *operator new[](size_t, void *ptr) { return ptr; } \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;    void operator delete[](void *, void *) {} \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;private:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is how an example usage would look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;YL_IMPLEMENTS_ALLOCATORS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now with that all &lt;em&gt;your&lt;/em&gt; classes will be allocated through your allocator
functions.  But what if you want to use STL containers?  Those containers
will not be allocated through your functions yet.  To fix that particular
issue you need to write an STL proxy allocator.  That's an enormously
annoying process because of how complex the interface is, for essentially
doing nothing.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;limits&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ptrdiff_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;difference_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const_reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rebind&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const_pointer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const_reference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;yl_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;size_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeric_limits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So before we go on, how does one use this abomination?  Like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;deque&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basic_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char_traits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;proxy_allocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would recommend making a header somewhere that defines all the
containers you want to use and then force yourself not to use anything
else from the STL without typedefing it to use the right allocator.
Careful: do not &lt;tt class=&quot;docutils literal&quot;&gt;new TaskQueue()&lt;/tt&gt; those things as you would invoke the
global new operator.  Place them instead as members in your own structs so
that the allocation happens as part of your object which has a custom
allocator.  Alternatively just put them on the stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;memory-allocation-failures&quot;&gt;
&lt;h2&gt;Memory Allocation Failures&lt;/h2&gt;
&lt;p&gt;In my mind the best way to deal with memory allocation failures is to not
deal with them.  Just don't cause any allocation to fail.  For a library
that's easy to accomplish, just be aware of how much memory you will
allocate in the worst case scenario and if you are unbounded, provide the
user of the library with a way to get an idea of how bad things are.  The
reason for this is that nobody deals with allocation failures either.&lt;/p&gt;
&lt;p&gt;For a start the STL entirely depends on &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::bad_alloc&lt;/span&gt;&lt;/tt&gt; being thrown
from operator new (which we're not doing above, hehe) and will just bubble
up the error for you to deal with it.  When you compile your library
without exception handling then the library will just terminate the
process.  That's pretty terrible, but that's what's going to happen
anyways if you're not careful.  I have seen more code that ignores the
return value of malloc than code that deals with it properly.&lt;/p&gt;
&lt;p&gt;Aside from that: on some systems malloc will totally lie to you about how
much memory is available anyways.  Linux will gladly give you pointers to
memory it can't back up with real physical memory.  This fiat memory
behavior is quite useful but also will mean that you generally already
have to assume that allocation failure might not happen.  So instead of
reporting allocation errors, if you use C++ and you also want to stick to
the STL, then give up on that and just don't run out of memory.&lt;/p&gt;
&lt;p&gt;In computer games the general concept there is to give subsystems their
own allocator and just make sure they never allocate more than what they
are given.  EA seems to recommend the allocator to handle allocation
failures.  For instance when it fails to load more memory it would check
if it can free up some resources that are not needed (like caches) instead
of letting the caller know there is a memory failure.  This works even
with the limited design that the C++ standard gives with allocators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;building&quot;&gt;
&lt;h2&gt;Building&lt;/h2&gt;
&lt;p&gt;Now that you have written the code, how do you build your library without
making your users unhappy?  If you're like me you come from a Unix
background where makefiles are what builds software.  However that's not
what everybody wants.  Autotools/autoconf are terrible, terrible pieces of
software and if you give that to a windows guy they will call you all
kinds of names.  Instead make sure there are Visual Studio solutions
sitting around.&lt;/p&gt;
&lt;p&gt;What if you don't want to deal with Visual Studio because it's not your
toolchain of choice?  What if you want to keep solutions and makefiles in
sync?  The answer to that question is &lt;a class=&quot;reference external&quot; href=&quot;http://industriousone.com/premake&quot;&gt;premake&lt;/a&gt; or &lt;a class=&quot;reference external&quot; href=&quot;http://www.cmake.org/&quot;&gt;cmake&lt;/a&gt;.  Which of the two you use depends largely on
you.  Both can generate Makefiles, XCode or Visual Studio solutions out of
a simple definition script.&lt;/p&gt;
&lt;p&gt;I used to be a huge fan of cmake but I now switched to premake.  The
reason for this is that cmake has some stuff hardcoded which I need to
customize (for instance building a Visual Studio solution for Xbox 360 is
something you cannot do with stock cmake).  Premake has many of the same
problems as cmake but it's written almost entirely in lua and can be
easily customized.  Premake is essentially one executable that includes a
lua interpreter and a bunch of lua scripts.  It's easy to recompile and if
you don't want to, your premake file can override everything if you just
know how.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;testing&quot;&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Lastly: how do you test your library?  Now obviously there are tons of
testing tools written in C and C++ you can use, but I think the best tools
are actually somewhere else.  Shared libraries are not just for C and C++
to enjoy, you can use them in a variety of languages.  What better way is
there to test your API by using it from a language that is not C++?&lt;/p&gt;
&lt;p&gt;In my case I am using Python to test my libraries.  More to the point: I'm
using &lt;a class=&quot;reference external&quot; href=&quot;http://pytest.org/&quot;&gt;py.test&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://cffi.readthedocs.org/&quot;&gt;CFFI&lt;/a&gt; to test my library.  This has a couple
of big advantages over directly doing it in C/C++.&lt;/p&gt;
&lt;p&gt;The biggest advantage is the increased iteration speed.  I do not have to
compile my tests at all, they just run.  Not only does the compilation
step fall away, I can also take advantage of Python's dynamic typing and
py.test's good assert statement.  I write myself helpers to print out
information and to convert data between my library and Python and I get
all the benefit of good error reporting.&lt;/p&gt;
&lt;p&gt;The second advantage is good isolation.  &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.python.org/pypi/pytest-xdist&quot;&gt;pytest-xdist&lt;/a&gt; is a plugin for py.test
that adds the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--boxed&lt;/span&gt;&lt;/tt&gt; flag to py.test which runs each test in a
separate process.  That's amazingly useful if you have tests that might
crash due to a segfault.  If you enable coredumps on your system you can
then afterwards load up the segfault in gdb and figure out what's wrong.
This also works really well because you don't need to deal with memory
leaks that happen because an assertion failed and the code skips the
cleanup.  The OS will clean up for each test separately.  Unfortunately
that's implemented through the &lt;tt class=&quot;docutils literal&quot;&gt;fork()&lt;/tt&gt; system call so it does not work
well on windows right now.&lt;/p&gt;
&lt;p&gt;So how do you use your library with CFFI?  You will need to do two things:
you need to make sure your public header file does not include any other
headers.  If you can't do that, just add a define that disables the
includes (like &lt;tt class=&quot;docutils literal&quot;&gt;YL_NOINCLUDE&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;This is all that's needed to make CFFI work:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cffi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FFI&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;include&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;yourlibrary.h&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ffi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;cc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-E&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-DYL_API=&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-DYL_NOINCLUDE&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ffi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;libyourlibrary.dylib&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Place it in a file called &lt;tt class=&quot;docutils literal&quot;&gt;testhelpers.py&lt;/tt&gt; next to your tests.&lt;/p&gt;
&lt;p&gt;Now obviously that is the simple version that only works on OS X but it's
simple to extend for different operating systems.  In essence this
invokes the C preprocessor and adds some extra defines, then feeds the
return value of that to the CFFI parser.  Afterwards you have a beautiful
wrapped library to work with.&lt;/p&gt;
&lt;p&gt;Here an example of how such a test could look like.  Just place it in a
file called &lt;tt class=&quot;docutils literal&quot;&gt;test_something.py&lt;/tt&gt; and let &lt;tt class=&quot;docutils literal&quot;&gt;py.test&lt;/tt&gt; execute it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;testhelpers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ffi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_basic_functionality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_is_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_get_result_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ffi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;py.test has other advantages too.  For instance it supports fixtures which
allow you to set up common resources that can be reused between tests.
This is super useful for instance, if using your library requires creating
some sort of context object, setting up common configuration on it, and
later destroying it.&lt;/p&gt;
&lt;p&gt;To do that, just create a &lt;tt class=&quot;docutils literal&quot;&gt;conftest.py&lt;/tt&gt; file with the following content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;testhelpers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ffi&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@pytest.fixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_context_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_context_set_api_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my api key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_context_set_debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_context_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addfinalizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use this now, all you need to do is to add a parameter called
&lt;tt class=&quot;docutils literal&quot;&gt;context&lt;/tt&gt; to your test function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;testhelpers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ffi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_basic_functionality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yl_task_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;summary&quot;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Since this is longer than usual, here a quick summary of the most
important things to keep in mind when building a native shared library:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Write it in C or C++, don't get crazy with building it in a language
that pulls in a whole runtime that takes up CPU and memory.&lt;/li&gt;
&lt;li&gt;No global state if you can avoid it!&lt;/li&gt;
&lt;li&gt;Do not define common types in your public headers&lt;/li&gt;
&lt;li&gt;Do not include crazy headers like &lt;tt class=&quot;docutils literal&quot;&gt;windows.h&lt;/tt&gt; in your public
headers.&lt;/li&gt;
&lt;li&gt;Be light on includes in your headers altogether.  Consider adding a
way to disable all includes through a define.&lt;/li&gt;
&lt;li&gt;take good care about your namespace.  Don't expose symbols you do not
want to be exposed.&lt;/li&gt;
&lt;li&gt;Create a macro like &lt;tt class=&quot;docutils literal&quot;&gt;YL_API&lt;/tt&gt; that prefixes each symbol you want to
expose.&lt;/li&gt;
&lt;li&gt;Try to build a stable ABI&lt;/li&gt;
&lt;li&gt;Don't go crazy with structs&lt;/li&gt;
&lt;li&gt;let people customize the memory allocators.  If you can't do it per
“context” object, at least do it per library.&lt;/li&gt;
&lt;li&gt;Be careful when using the STL, always only through a typedef that adds
your allocator.&lt;/li&gt;
&lt;li&gt;Don't force your users to use your favourite build tool, always make
sure that the user of a library finds a Visual Studio solution and
makefile in place.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it!  Happy library building!&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Codec Confusion in Python</title>
    <id>http://lucumr.pocoo.org/2012/8/11/codec-confusion</id>
    <updated>2012-08-11T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2012/8/11/codec-confusion" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;Alright, I admit Alex Gaynor is a pretty clever guy but I was very close
to strangling him today for &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/alex_gaynor/status/234050951173005312&quot;&gt;this tweet&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&amp;#64;alex_gaynor: WTF does str.encode or unicode.decode even do on Python2?&lt;/blockquote&gt;
&lt;p&gt;And that's because on the way to Python 3 these functions were removed
because they cause confusion with people, but this broke a lot of really
good use cases for them in the process.  On top of that I truly believe
the mere presence of these function did not actually cause confusion, but
an unintended side effect did.  And all in all I believe that's a really
sad example of where wrong conclusions were drawn.&lt;/p&gt;
&lt;p&gt;One thing I believe is pretty true is that you should never ask people
about their opinions directly.  You should observe them, figure out what's
wrong and then slowly figure out where the true problem lies.  In this
particular case it seems like many people missed the true problem and
stopped noticing that the true solution was much simpler.  I can't blame
anyone for that and I did not notice it either until the damage was
already done.&lt;/p&gt;
&lt;p&gt;So what do &lt;cite&gt;str.encode&lt;/cite&gt; and &lt;cite&gt;str.decode&lt;/cite&gt; actually do in Python 2.x?  They
are roughly implemented like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;codecs&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;basestring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;strict&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;basestring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;encoder did not return a string/unicode object&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;strict&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;basestring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;encoder did not return a string/unicode object&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basestring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basestring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alright, so they are just shortcuts for functionality hidden in another
module.  One important thing of note here is that this is talking about
encodings, not about charsets.  Very important difference!&lt;/p&gt;
&lt;p&gt;The most important part here is that codecs in Python are not restricted
to strings at all.  If you look into the original Python sources you will
see that the codecs module talks about objects and not strings.&lt;/p&gt;
&lt;p&gt;So what is actually the confusing part?  The confusing part is not the
codecs API but the Python default encoding.  Let me show you the problem
on a simple example.  Alex was arguing against &lt;cite&gt;str.encode&lt;/cite&gt; because of
this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe2\x98\x83&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;UnicodeDecodeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;&amp;#39;ascii&amp;#39; codec can&amp;#39;t decode byte 0xe2 in position 0: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What's happening here?  The call did not make any sense.  The utf-8 codec
encodes from Unicode to bytes, not from bytes to bytes like in the given
example.  Now that might let you believe the correct solution is just to
get rid of the &lt;cite&gt;encode&lt;/cite&gt; function on strings.  However there are
legitimate cases for string to string encodings:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;Zm9v\n&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alright, so we want to preserve that.  So why exactly is the first example
confusing anyways?  I mean, it gives an exception.  The problem is the
wording of the exception.  Where is the ascii codec coming from all the
sudden?  That's actually coming from something completely unrelated and
that is Python's default encoding which caused us all the problems in the
first place.  What's happening in the above code is that the codec
function is written in a way that it looks at the incoming object and it
sees that it expects an unicode object but it got a bytestring object.  As
the next step that function takes that bytestring object and asks the
interpreter state what it should do with that.  The interpreter has a
special setting which defines the default encoding.  In Python 2.x this
historically has been set to ascii.  Now the function will ask the ascii
codec to decode the string to Unicode.  Because the string did not fit
into ASCII range it will error out with that horrible error message.&lt;/p&gt;
&lt;p&gt;Not only is that error message misleading, it also does not show up at all
if the string does indeed fit into ascii:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There it does foo (bytes) -&amp;gt; ascii decode -&amp;gt; foo (Unicode) -&amp;gt; utf-8 encode
-&amp;gt; foo (bytes).&lt;/p&gt;
&lt;p&gt;Now let me blow your mind: this was actually envisioned when the module
was created initially.  You can in fact still take a stock Python 2.x
interpreter and disable that behavior:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;module &amp;#39;sys&amp;#39; (built-in)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefaultencoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe2\x98\x83&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;UnicodeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;undefined encoding&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;UnicodeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;undefined encoding&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(The reload on sys is necessary because after site.py did it's job there
is no way to change the default encoding any more).&lt;/p&gt;
&lt;p&gt;So there you have it.  If we would have just never started doing the
implicit ASCII codec we would have solved so much confusion early on and
everything would have been more explicit.  When going to Python 3 all we
would have had to do was to add a &lt;cite&gt;b&lt;/cite&gt; prefix for bytestrings and made the
&lt;cite&gt;u&lt;/cite&gt; implied.  And we would not now end up with inferior codec support in
Python 3 because the byte to byte and Unicode to Unicode codecs were
removed.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://lucumr.pocoo.org/feed.atom">
    <title type="text">Common Mistakes as Python Web Developer</title>
    <id>http://lucumr.pocoo.org/2010/12/24/common-mistakes-as-web-developer</id>
    <updated>2010-12-24T00:00:00Z</updated>
    <link href="http://lucumr.pocoo.org/2010/12/24/common-mistakes-as-web-developer" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">&lt;p&gt;A few weeks ago I had a heated discussion with a bunch of Python and Open
Source people at a local meet-up about the way Python's path joining works.
I was always pretty sure that people are aware of how the path joining
works and why it works that way.  However a bit of searching around on the
internet quickly showed that it's actually a pretty common mistake to use
the &lt;cite&gt;os.path.join&lt;/cite&gt; function with arbitrary and unfiltered input, leading
to security issues.  Because the most common case where user input comes
from another system is web development I went a bit further and tried to
find a few other cases where people might be blindly trusting an API or
operating system.&lt;/p&gt;
&lt;p&gt;So here it is: my list of things not to do when doing Python web
development.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;untrusted-data-and-file-systems&quot;&gt;
&lt;h2&gt;Untrusted Data and File Systems&lt;/h2&gt;
&lt;p&gt;Unless you are running on a virtualized filesystem like when you are
executing code on Google Appengine, chances are, vital files can be
accessed with the rights your application has.  Very few deployments
actually reduce the rights of the executing user account to a level where
it would become save to blindly trust user submitted filenames.  Because
it typically isn't, you have to think about that.&lt;/p&gt;
&lt;p&gt;In PHP land this is common knowledge by now because many people write
innocent looking code like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;header.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;missing_page.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;footer.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the problem is that if you accept the filename blindly one could
just pass a string with some leading “go one layer up” markers and access
files somewhere else on the file system.  Now many people thought that
wouldn't be a problem because the file has to end with “.php” so only PHP
files can be accessed.  Turns out that PHP never (at least not until
recently) removed nullbytes from the string before opening the file.  Thus
the underlying C function that opened the file stopped reading at the null
byte.  So if one attacker would access the page
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;?page=../../../../htpasswd%00&lt;/span&gt;&lt;/tt&gt; he would see the contents of the passwd
file.&lt;/p&gt;
&lt;p&gt;Python programmers apparently don't care too much about this problem
because Python's file opening functions don't have this problem and
reading files from the filesystem is a very uncommon thing to do anyways.
However in the few situations where people do work with the filenames,
always always will you find code like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upload_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;destination_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UPLOAD_FOLDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;copy_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem there is that you expect &lt;cite&gt;os.path.join&lt;/cite&gt; never to go a folder
up.  While in fact, that's exactly what &lt;cite&gt;os.path.join&lt;/cite&gt; is capable of
doing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/var/www/uploads&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;../foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;/var/www/uploads/../foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/var/www/uploads&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While in this case the attacker is “just” able to overwrite files anywhere
on the filesystem where the user has access (might be able to override
your code and inject code that way!) it's not uncommon to read files on
the filesystem as well and expose information that way.&lt;/p&gt;
&lt;p&gt;So yes, &lt;cite&gt;os.path.join&lt;/cite&gt; is totally not safe to use in a web context.
Various libraries have ways that help you deal with this problem.
Werkzeug for instance has a function called &lt;cite&gt;secure_filename&lt;/cite&gt; that will
strip any path separators from the file, slashes, even remove non-ASCII
characters from the path as character sets and filesystems are immensly
tricky.  At the very least you should do this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;[\0&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;]&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;altsep&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;secure_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will remove any slashes and null bytes from the filename.  Why also
remove the Null byte if Python does not have a problem with that?  Because
Python might not, but your code.  A nullbyte in the filename will trigger
a &lt;cite&gt;TypeError&lt;/cite&gt; which very few people are expecting:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;file() argument 1 must be encoded string without NULL bytes, not str&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows you furthermore have to make sure people are not naming their
files after device files, but that is outside of the scope of this post.
If you are curious, check how Werkzeug does it.&lt;/p&gt;
&lt;p&gt;If you actually do want to allow slashes in the filename there are a
couple of things you have to consider.  On POSIX the whole system is
incredible easy: if it starts with a trailing slash or the combination of
&lt;tt class=&quot;docutils literal&quot;&gt;../&lt;/tt&gt; it will or might try to reference a file outside of the folder you
want the file to be in.  That's easy to prevent:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;posixpath&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_secure_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posixpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;../&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On windows the whole situation is more tricky (and I fell into that trap a
few days ago as well).  First of all you have backslashes you have to
consider.  Technically you would also have to consider colons on Mac OS,
but there are very few people that still aim for Mac OS compatibility.
Thus the backslash is the main culprit.  Secondly you can't just test for
absolute paths by checking if the path starts with a slash.  On windows
there are multiple different kinds of absolute paths: regular Unix
absolute paths and secondly absolute paths that also include a drive
letter.  Thankfully the path module provides ways to reliably check if the
path is absolute.&lt;/p&gt;
&lt;p&gt;The following function checks if paths will not manage to escaped a
folder on POSIX and Windows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;non_slash_sep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;altsep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_in_folder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non_slash_seps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;../&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The idea is that we consider the filenames to be in posix notation and
that the operating system is fine with filenames containing slashes.  That
is the case for all operating systems you would care about these days.
Then if the native operating system path separator is in the string we can
assume it's not a valid character for a filename on the web anyways and
consider it unsafe.  Once that passed we make sure the path is not
absolute or does not start with the special &lt;tt class=&quot;docutils literal&quot;&gt;../&lt;/tt&gt; string that indicates
going to a higher level on both Windows and POSIX.&lt;/p&gt;
&lt;p&gt;Generally speaking though, if you do aim for windows compatibility you
have to be extra careful because Windows has its special device files in
every folder on the filesystem for DOS compatibility.  Writing to those
might be problematic and could be abused for denial of service attacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;mixing-up-data-with-markup&quot;&gt;
&lt;h2&gt;Mixing up Data with Markup&lt;/h2&gt;
&lt;p&gt;This is a topic that always makes me cringe inside.  I know it's very
common and many don't see the issue with it but it's the root of a whole
bunch of problems and unmaintainable code.  Let's say you have some data.
That data for all practical purposes will be a string of some arbitrary
maximum length and that string will be of a certain format.  Let's say
it's prosaic text and we want to preserve newlines but collapse all other
whitespace to a single space.&lt;/p&gt;
&lt;p&gt;A very common pattern.&lt;/p&gt;
&lt;p&gt;However that data is usually displayed on a website in the context of
HTML, so someone will surely bring up the great idea to escape the input
text and convert newlines to &lt;tt class=&quot;docutils literal&quot;&gt;&amp;lt;br&amp;gt;&lt;/tt&gt; before feeding the data into the
database.  Don't do this!&lt;/p&gt;
&lt;p&gt;There are a bunch of reasons for this but the most important one is called
“context”.  Web applications these days are getting more and more complex,
mainly due to the concept of APIs.  A lot of the functionality of the
website that was previously only avaiable in an HTML form is now also
available as RESTful interfaces speaking some other format such as JSON.&lt;/p&gt;
&lt;p&gt;The context of a rendered text in your web application will most likely be
“HTML”.  In that context, &lt;tt class=&quot;docutils literal&quot;&gt;&amp;lt;br&amp;gt;&lt;/tt&gt; makes a lot of sense.  But what if your
transport format is JSON and the client on the other side is not
(directly) rendering into HTML?  This is the case for twitter clients for
instance.  Yet someone at Twitter decided that the string with the
application name that is attached to each tweet should be in HTML.  When I
wrote my first JavaScript client for that API I was parsing that HTML with
jQuery and fetching the application name as a string because I was only
interested in that.  Annoying.  However even worse: someone found out a
while later that this particular field could actually be used to emit
arbitrary HTML.  &lt;a class=&quot;reference external&quot; href=&quot;http://praetorianprefect.com/archives/2010/06/persistent-xss-on-twitter-com/&quot;&gt;A major security disaster&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other problem is if you have to reverse the stuff again.  If you want
to be able to edit that text again you would have to unescape it,
reproduce the original newlines etc.&lt;/p&gt;
&lt;p&gt;So there should be a very, very simple rule (and it's actually really
simple): store the data as it comes in.  Don't flip a single bit!  (The
only acceptable conversion before storing stuff in the database might be
Unicode normalization)&lt;/p&gt;
&lt;p&gt;When you have to display your stored information: provide a function that
does that for you.  If you fear that this could become a bottleneck:
memcache it or have a second column in your database with the rendered
information if you absolutely must.  But never, ever let the HTML
formatted version be the only thing you have in your database.  And
certainly never expose HTML strings over your API if all you want to do is
to transmit text.&lt;/p&gt;
&lt;p&gt;Every time I get a notification on my mobile phone from a certain
notification service where the message would contain an umlaut the
information arrives here completely broken.  Turns out that one service
assumes that HTML escaped information is to be transmitted, then however
the other service only allows a few HTML escaped characters and completely
freaks out when you substitute “ä” with “&amp;amp;auml;”.  If you ever are in the
situation where you have to think about “is this plain text that is HTML
escaped or just plain text” you are in deep troubles already.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;spending-too-much-time-with-the-choice-of-framework&quot;&gt;
&lt;h2&gt;Spending too much Time with the Choice of Framework&lt;/h2&gt;
&lt;p&gt;This should probably go to the top.  If you have a small application (say
less than 10.000 lines of code) the framework probably isn't your problem
anyways.  And if you have more code than that, it's still not that hard to
switch systems when you really have to.  In fact even switching out core
components like an ORM is possible and achievable if you write a little
shim and get rid of that step by step.  Better spend your time making the
system better.  The framework choice used to be a lot harder when the
systems were incompatible.  But this clearly no longer is the case.&lt;/p&gt;
&lt;p&gt;In fact, combine this with the next topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;building-monolithic-systems&quot;&gt;
&lt;h2&gt;Building Monolithic Systems&lt;/h2&gt;
&lt;p&gt;We are living in an agile world.  Some systems become deprecated before
they are even finished :)  In such an agile world new technologies are
introduced at such a high speed that your favorite platform might not
support it yet.&lt;/p&gt;
&lt;p&gt;As web developers we have the huge advantage that we have a nice protocol
to separate systems: it's called HTTP and the base of all we do.  Why not
leverage that even further?  Write small services that speak HTTP and
bridge them together with another application.  If that does not scale,
put a load balancer between individual components.  This has the nice side
effect that each part of the system can be implemented in a different
system.  If Python does not have the library you need or does not have the
performance: write a part of the System in Ruby/Java or whatever comes to
mind.&lt;/p&gt;
&lt;p&gt;But don't forget to still make it easy to deploy that system and put
another machine in.  If you end up with ten different programming
languages with different runtime environments you are quickly making the
life of your system administrator hell.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

